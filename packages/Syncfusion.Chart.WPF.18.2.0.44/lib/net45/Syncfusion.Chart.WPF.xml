<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Chart.Wpf</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Windows.Chart.CartesianAxis3D">
            <summary>
            Follow steps 1a or 1b and then 2 to use this custom control in a XAML file.
            Step 1a) Using this custom control in a XAML file that exists in the current project.
            Add this XmlNamespace attribute to the root element of the markup file where it is 
            to be used:
                xmlns:MyNamespace="clr-namespace:Syncfusion.Windows.Chart._3DChart"
            Step 1b) Using this custom control in a XAML file that exists in a different project.
            Add this XmlNamespace attribute to the root element of the markup file where it is 
            to be used:
                xmlns:MyNamespace="clr-namespace:Syncfusion.Windows.Chart._3DChart;assembly=Syncfusion.Windows.Chart._3DChart"
            You will also need to add a project reference from the project where the XAML file lives
            to this project and Rebuild to avoid compilation errors:
                Right click on the target project in the Solution Explorer and
                "Add Reference"->"Projects"->[Browse to and select this project]
            Step 2)
            Go ahead and use your control in the XAML file.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.CartesianAxis3D.ChartAxisProperty">
            <summary>
            Identifies the ChartAxis dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.CartesianAxis3D.OnChartAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnChartAxisChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.CartesianAxis3D.OnChartAxisChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises ChartAxisChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.CartesianAxis3D.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.CartesianAxis3D"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.CartesianAxis3D.#ctor(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.CartesianAxis3D"/> class.
            </summary>
            <param name="axis">The axis value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.CartesianAxis3D.ChartAxis">
            <summary>
            Gets or sets the value of the ChartAxis dependency property.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.CartesianAxis3D.ChartAxisChanged">
            <summary>
            Event that is raised when ChartAxis property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Chart3D">
            <summary>
            Represents Chart 3D class to set 3D settings
            </summary>
            <remarks>
            Chart3D class supports various properties for making a chart appear in 3D mode.
            3D mode can be easily enabled on a ChartArea using the <b>View3DMode</b>
            property
            </remarks>
            <example>
            XAML:
            <code language="XAML">
            &lt;sfchart:Chart Name="chart1"&gt; 
              &lt;sfchart:ChartArea View3DMode="True"&gt; 
                &lt;sfchart:ChartSeries Label="Sales" DataSource="{Binding
            Source={StaticResource myXmlData}, XPath=Products/Product}" BindingPathX="Month"
            BindingPathsY="Sales" Type="Column"  /&gt;
              &lt;/sfchart:ChartArea&gt;
            &lt;/sfchart:Chart&gt;
            </code>
            C#:
            <code language="C#">
            Chart chart = new Chart();
            chart.Areas.Add(new ChartArea());
            chart.Areas[0].View3DMode= true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowTopWallProperty">
            <summary>
             Using a DependencyProperty as the backing store for ShowTopWall.  This enables animation, styling, binding, etc...
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowRightWallProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowRightWall.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowBackWallProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowBackWall.  This enables animation, styling, binding, etc...
            </summary>   
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowLeftWallProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowLeftWall.  This enables animation, styling, binding, etc...
            </summary>   
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowBottomWallProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowBottonWall.  This enables animation, styling, binding, etc...
            </summary>   
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowPrimaryAxisProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowPrimaryAxis.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowSecondaryAxisProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowSecondaryAxis.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ShowDepthAxisProperty">
            <summary>
              Using a DependencyProperty as the backing store for ShowDepthAxis.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ChartLightProperty">
            <summary>
             Using a DependencyProperty as the backing store for ChartLight.  This enables animation, styling, binding, etc...
            </summary>   
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.TopWallBackgroundProperty">
            <summary>
              Using a DependencyProperty as the backing store for TopWallBackground.  This enables animation, styling, binding, etc...
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.RightWallBackgroundProperty">
            <summary>
              Using a DependencyProperty as the backing store for RightWallBackground.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>     
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.LeftWallBackgroundProperty">
            <summary>
              Using a DependencyProperty as the backing store for LeftWallBackground.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.BottomWallBackgroundProperty">
            <summary>
              Using a DependencyProperty as the backing store for BottomWallBackground.  This enables animation, styling, binding, etc...
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.BackWallBackgroundProperty">
            <summary>
              Using a DependencyProperty as the backing store for BackWallBackground.  This enables animation, styling, binding, etc...
            </summary> 
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ViewDefaultTurnProperty">
            <summary>
              Using a DependencyProperty as the backing store for ViewDefaultTurn.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ViewDefaultRotateProperty">
            <summary>
              Using a DependencyProperty as the backing store for ViewDefaultRotate.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.ViewDefaultTiltProperty">
            <summary>
             Using a DependencyProperty as the backing store for ViewDefaultTilt.  This enables animation, styling, binding, etc...
            </summary> 
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.CameraProjectionProperty">
            <summary>
            Identifies the CameraProjection Dependency property
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.BackWallThicknessProperty">
            <summary>
             Using a DependencyProperty as the backing store for BackWallThickness.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.LeftWallThicknessProperty">
            <summary>
             Using a DependencyProperty as the backing store for LeftWallThickness.  This enables animation, styling, binding, etc...
             <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.BottomWallThicknessProperty">
            <summary>
             Using a DependencyProperty as the backing store for BottomWallThickness.  This enables animation, styling, binding, etc...
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.RightWallThicknessProperty">
            <summary>
             Using a DependencyProperty as the backing store for RightWallThickness.  This enables animation, styling, binding, etc...
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.RotateOnMouseDownProperty">
            <summary>
             Using a DependencyProperty as the backing store for RotateOnMouseDown.  This enables animation, styling, binding, etc...
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.TopWallThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for TopWallThickness.  This enables animation, styling, binding, etc...
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3D.m_area">
            <summary>
             Initializes ChartArea
            </summary> 
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3D.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Syncfusion.Windows.Chart.Chart3D"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3D.OnCameraProjectionChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises CameraProjectionChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3D.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3D.OnCameraProjectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnCameraProjectionChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart3D.CameraProjectionChanged">
            <summary>
            Event that is raised when CameraProjection property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowTopWall">
            <summary>
            Gets or sets a value indicating whether Show/Hide Top wall
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowRightWall">
            <summary>
            Gets or sets a value indicating whether Show/Hide Right wall
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowBackWall">
            <summary>
            Gets or sets a value indicating whether Show/Hide Back wall
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowLeftWall">
            <summary>
            Gets or sets a value indicating whether Show/Hide Left wall
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowBottomWall">
            <summary>
            Gets or sets a value indicating whether Show/Hide Bottom wall
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowPrimaryAxis">
            <summary>
            Gets or sets a value indicating whether Show/Hide Primary Axis
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowSecondaryAxis">
            <summary>
            Gets or sets a value indicating whether Show/Hide Secondary Axis
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ShowDepthAxis">
            <summary>
            Gets or sets a value indicating whether Show/Hide Secondary Axis
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ChartLight">
            <summary>
            Gets or sets ChartLight for 3D mode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.TopWallBackground">
            <summary>
            Gets or sets the top wall background brush
            </summary>
            <value>The top wall background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.RightWallBackground">
            <summary>
            Gets or sets the right wall background brush
            </summary>
            <value>The right wall background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.LeftWallBackground">
            <summary>
            Gets or sets the left wall background brush
            </summary>
            <value>The left wall background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.BottomWallBackground">
            <summary>
            Gets or sets the bottom wall background brush
            </summary>
            <value>The bottom wall background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.BackWallBackground">
            <summary>
            Gets or sets the back wall background brush
            </summary>
            <value>The back wall background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ViewDefaultTurn">
            <summary>
            Gets or sets the view default turn.
            </summary>
            <value>The view default turn.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ViewDefaultRotate">
            <summary>
            Gets or sets the view default rotate.
            </summary>
            <value>The view default rotate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.ViewDefaultTilt">
            <summary>
            Gets or sets the view default tilt.
            </summary>
            <value>The view default tilt.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.CameraProjection">
            <summary>
            Gets or sets the value of the CameraProjection dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.LeftWallThickness">
            <summary>
            Gets or sets the left wall thickness.
            </summary>
            <value>The left wall thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.BackWallThickness">
            <summary>
            Gets or sets the back wall thickness.
            </summary>
            <value>The back wall thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.BottomWallThickness">
            <summary>
            Gets or sets the bottom wall thickness.
            </summary>
            <value>The bottom wall thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.TopWallThickness">
            <summary>
            Gets or sets the top wall thickness.
            </summary>
            <value>The top wall thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.RightWallThickness">
            <summary>
            Gets or sets the right wall thickness.
            </summary>
            <value>The right wall thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.RotateOnMouseDown">
            <summary>
            Gets or sets a value indicating whether [rotate on mouse down].
            </summary>
            <value><c>true</c> if [rotate on mouse down]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3D.Parent">
            <summary>
            Sets the parent
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Chart3DGrid">
            <summary>
            Follow steps 1a or 1b and then 2 to use this custom control in a XAML file.
            Step 1a) Using this custom control in a XAML file that exists in the current project.
            Add this XmlNamespace attribute to the root element of the markup file where it is 
            to be used:
                xmlns:MyNamespace="clr-namespace:Syncfusion.Windows.Chart._3DChart"
            Step 1b) Using this custom control in a XAML file that exists in a different project.
            Add this XmlNamespace attribute to the root element of the markup file where it is 
            to be used:
                xmlns:MyNamespace="clr-namespace:Syncfusion.Windows.Chart._3DChart;assembly=Syncfusion.Windows.Chart._3DChart"
            You will also need to add a project reference from the project where the XAML file lives
            to this project and Rebuild to avoid compilation errors:
                Right click on the target project in the Solution Explorer and
                "Add Reference"->"Projects"->[Browse to and select this project]
            Step 2)
            Go ahead and use your control in the XAML file.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3DGrid.m_xaxis">
            <summary>
            Initializes m_xAxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3DGrid.m_yaxis">
            <summary>
            Initializes m_yAxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3DGrid.m_zaxis">
            <summary>
            Initializes m_zaxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart3DGrid.m_side">
            <summary>
            Initializes m_side
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3DGrid.#cctor">
            <summary>
            Initializes static members of the Chart3DGrid class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3DGrid.#ctor(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Initializes a new instance of the Chart3DGrid class
            </summary>
            <param name="xaxis">The xaxis value</param>
            <param name="yaxis">The yaxis value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3DGrid.#ctor(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Initializes a new instance of the Chart3DGrid class
            </summary>
            <param name="xaxis">The xaxis value</param>
            <param name="yaxis">The yaxis value</param>
            <param name="zaxis">The zaxis value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3DGrid.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            OnRender method
            </summary>
            <param name="drawingContext">The DrawingContext</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart3DGrid.DrawGridLines(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Draws the grid lines.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="clientRect">The client rect.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart3DGrid.Side">
            <summary>
            Gets or sets the side.
            </summary>
            <value>The side value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo">
            <summary>
             Initializes internal class ChartMaterialInfo
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.DEF_SPECULAR">
            <summary>
            Declares DEF_SPECULAR
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.m_material">
            <summary>
            Initializes m_material
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.m_emissive">
            <summary>
            Initializes m_emissive
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.m_specular">
            <summary>
            Initializes m_specular
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.m_diffuse">
            <summary>
            Initializes m_diffuse
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.#ctor">
            <summary>
            Initializes a new instance of the ChartMaterialInfo class
            </summary>       
        </member>
        <member name="M:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.#ctor(System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the ChartMaterialInfo class
            </summary>
            <param name="brush">The brush value</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.Material">
            <summary>
            Gets the MaterialGroup value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.Emissive">
            <summary>
            Gets or sets the EmissiveMaterial value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.Specular">
            <summary>
            Gets or sets the SpecularMaterial value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart._3DChart.ChartMaterialInfo.Diffuse">
            <summary>
            Gets or sets the DiffuseMaterial value
            </summary>
        </member>
        <member name="T:ChartWpf.ChartMath">
            <summary>
            Represents ChartMath class
            </summary>
            <exclude/>
        </member>
        <member name="F:ChartWpf.ChartMath.DEGREE_TO_RADIAL">
            <summary>
            Declares DEGREE_TO_RADIAL
            </summary>
        </member>
        <member name="F:ChartWpf.ChartMath.RADIAL_TO_DEGREE">
            <summary>
            Declares RADIAL_TO_DEGREE
            </summary>
        </member>
        <member name="M:ChartWpf.ChartMath.CalcCameron(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Method to calculate Camera value
            </summary>
            <param name="a">The Vector3D a value</param>
            <param name="b">The Vector3D b value</param>
            <param name="c">The Vector3D c value</param>
            <param name="d">The Vector3D d value</param>
            <returns>Returns Vector3D</returns>
        </member>
        <member name="M:ChartWpf.ChartMath.GetRotateBy(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            GetRotateBy method
            </summary>
            <param name="oDirVector">The first DirVector</param>
            <param name="oUpVector">The first UpVector</param>
            <param name="nDirVector">The second DirVector</param>
            <param name="nUpVector">The second UpVector</param>
            <returns>The RotateTransform3D</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis">
            <summary>
            Represent ChartMeshGeometry3DAxis Enum
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis.X">
            <summary> 
            The X value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis.Y">
            <summary>
            The Y value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis.Z">
            <summary>
            The Z value 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder">
            <summary>
            Represents ChartMeshGeometry3DBuilder class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.HALF">
            <summary>
            The Half value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.TWO_PI">
            <summary>
            The TWO_PI value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.R_TO_D">
            <summary>
            The R_TO_D value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.D_TO_R">
            <summary>
            The D_TO_R value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.BuildPlane(System.Windows.Size,Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis)">
            <summary>
            MeshGeometry3D Build Plane
            </summary>
            <param name="size">The size value</param>
            /// <param name="axis">The axis value</param>
            <returns>Returns the writer Geometry value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.BuildBox(System.Windows.Media.Media3D.Size3D)">
            <summary>
            The BuildBox method
            </summary>
            <param name="size">The size value</param>
            <returns>Returns writer.Geometry</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.BuildRounedBox(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            BuildRounedBox mwthod
            </summary>
            <param name="size">The size value</param>
            <param name="radius">The radius value</param>
            <returns>Returns writer.Geometry</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.BuildShpere(System.Windows.Media.Media3D.Size3D,System.Int32)">
            <summary>
            Build Shpere method
            </summary>
            <param name="size">The size value</param>
            <param name="desc">The desc value</param>
            <returns>Returns writer.Geometry</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.BuildCylinder(System.Windows.Media.Media3D.Size3D,System.Int32,Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis)">
            <summary>
            The Build Cylinder method
            </summary>
            <param name="size">The size value</param>
            <param name="desc">The desc value</param>
            <param name="axis">The axis value</param>
            <returns>Returns writer.Geometry</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.BuildCylindricPolyline(System.Windows.Point[],Syncfusion.Windows.Chart.ChartMeshGeometry3DAxis,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            BuildCylindricPolyline method
            </summary>
            <param name="points">The points</param>
            <param name="axis">The axis value</param>
            <param name="desc">The desc value</param>
            <param name="useSolid">The use solid</param>
            <param name="IsExploded"></param>
            <returns>Returns writer.Geometry</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.GetHalfSize(System.Windows.Media.Media3D.Size3D)">
            <summary>
            Gets the size of the half.
            </summary>
            <param name="size">The size value.</param>
            <returns>Returns the Half size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.Generate(System.Windows.Media.Media3D.Size3D)">
            <summary>
            Generate method to return Point3D
            </summary>
            <param name="size">The size value</param>
            <returns>Returns Point3D</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder.SubtractMin(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
            <summary>
            SubtractMin method
            </summary>
            <param name="source">The source</param>
            <param name="sz">The size value</param>
            <returns>Returns Size3D value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartMeshGeometry3DBuilder"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter">
            <summary>
            Represents ChartMeshGeometry3DWriter 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.m_geometry">
            <summary>
            Initializes m_geometry
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.#ctor">
            <summary>
            Initializes a new instance of the ChartMeshGeometry3DWriter class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WritePoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The WritePoint method
            </summary>
            <param name="point">The point value</param>
            <param name="normal">The normal normal</param>
            <param name="uv">The uv point</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WritePoint(System.Int32)">
            <summary>
            The write point method
            </summary>
            <param name="index">The index value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidPoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The WriteSolidPoint method
            </summary>
            <param name="point">The point value</param>
            <param name="normal">The normal normal</param>
            <param name="uv">The uv point</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothPoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The Write Smooth Point method
            </summary>
            <param name="point">The Point value</param>
            <param name="normal">The normal value</param>
            <param name="uv">The uv point </param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The Write Solid Triangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="n1">The n1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="n2">The n2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="n3">The n3 value</param>
            <param name="uv3">The uv3 value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Vector3D)">
            <summary>
             The Write Solid Triangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="normal">The normal value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point)">
            <summary>
            The WriteSolidTriangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The WriteSmoothTriangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="n1">The n1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="n2">The n2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="n3">The n3 value</param>
            <param name="uv3">The uv3 value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            The WriteSmoothTriangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="normal">The normal value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothTriangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point)">
            <summary>
            The WriteSmoothTriangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidQuadrangle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The WriteSolidQuadrangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="n1">The n1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="n2">The n2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="n3">The n3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="pt4">The pt4 value</param>
            <param name="n4">The n4 value</param>
            <param name="uv4">The uv4 value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidQuadrangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            The WriteSolidQuadrangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="pt4">The pt4 value</param>
            <param name="uv4">The uv4 value</param>
            <param name="normal">The normal value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSolidQuadrangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point)">
            <summary>
            The WriteSolidQuadrangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="pt4">The pt4 value</param>
            <param name="uv4">The uv4 value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothQuadrangle(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Point)">
            <summary>
            The WriteSmoothQuadrangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="n1">The n1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="n2">The n2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="n3">The n3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="pt4">The pt4 value</param>
            <param name="n4">The n4 value</param>
            <param name="uv4">The uv4 value</param>       
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothQuadrangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            WriteSmoothQuadrangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="pt4">The pt4 value</param>
            <param name="uv4">The uv4 value</param>
            <param name="normal">The normal value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.WriteSmoothQuadrangle(System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point,System.Windows.Media.Media3D.Point3D,System.Windows.Point)">
            <summary>
            WriteSmoothQuadrangle method
            </summary>
            <param name="pt1">The pt1 value</param>
            <param name="uv1">The uv1 value</param>
            <param name="pt2">The pt2 value</param>
            <param name="uv2">The uv2 value</param>
            <param name="pt3">The pt3 value</param>
            <param name="uv3">The uv3 value</param>
            <param name="pt4">The pt4 value</param>
            <param name="uv4">The uv4 value</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartMeshGeometry3DWriter.Geometry">
            <summary>
            Gets the Geometry
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTargetCameraController">
            <summary>
            Represents ChartTargetCameraController
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTargetCameraController.m_camera">
            <summary>
            Initializes m_camera
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTargetCameraController.m_target">
            <summary>
            Initializes m_target
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTargetCameraController.m_length">
            <summary>
            Initializes m_length
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTargetCameraController.TiltProperty">
            <summary>
            Identifies the Tilt dependency property.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTargetCameraController"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTargetCameraController.TurnProperty">
            <summary>
            Identifies the Turn dependency property.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTargetCameraController"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTargetCameraController.RotateProperty">
            <summary>
            Identifies the Rotate dependency property.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTargetCameraController"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTargetCameraController.#ctor(System.Windows.Media.Media3D.ProjectionCamera)">
            <summary>
            Initializes a new instance of the ChartTargetCameraController class
            </summary>
            <param name="camera">The camera value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTargetCameraController.Calculate">
            <summary>
            The Calculate method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTargetCameraController.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTargetCameraController.Camera">
            <summary>
            Gets the Camera value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTargetCameraController.Rotate">
            <summary>
            Gets or sets the Rotate value. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTargetCameraController.Tilt">
            <summary>
            Gets or sets the Tilt value. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTargetCameraController.Turn">
            <summary>
            Gets or sets the Tilt value. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTargetCameraController.Length">
            <summary>
            Gets or sets the Length value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTargetCameraController.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FormattedText3D">
            <summary>
            Represents FormattedText3D
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FormattedText3D.m_formattedText">
            <summary>
            Initializes m_formattedText
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FormattedText3D.m_drawingVisual">
            <summary>
            Initializes m_drawingVisual
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FormattedText3D.m_drawingBrush">
            <summary>
            Initializes m_drawingBrush
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FormattedText3D.m_model">
            <summary>
            Initializes m_model
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FormattedText3D.m_rect">
            <summary>
            Initializes m_rect
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FormattedText3D.#ctor">
            <summary>
            Initializes a new instance of the FormattedText3D class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FormattedText3D.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            The OnRender method
            </summary>
            <param name="drawingContext">The drawingContext</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FormattedText3D.Init">
            <summary>
            The Init method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FormattedText3D.UpdateBrush">
            <summary>
            The UpdateBrush method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FormattedText3D.Update">
            <summary>
            The Update method
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.FormattedText3D"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FormattedText3D.FormattedText">
            <summary>
            Gets or sets the FormattedText
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FormattedText3D.Model">
            <summary>
            Gets the Model
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FormattedText3D.Rect">
            <summary>
            Gets or sets the Rect
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MeshGenerator">
            <summary>
            Represents MeshGenerator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.PI_IN_RADIAL">
            <summary>
            Initializes PI_IN_RADIAL
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.DOUBLE_PI_IN_RADIAL">
            <summary>
            Initializes DOUBLE_PI_IN_RADIAL
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.DOUBLE_PI">
            <summary>
            Initializes DOUBLE_PI
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.HALF_PI">
            <summary>
            Initializes HALF_PI
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.RADIAL_TO_PI">
            <summary>
            Initializes RADIAL_TO_PI
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.PI_TO_RADIAL">
            <summary>
            Initializes PI_TO_RADIAL
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.box_POINT_INDEXES">
            <summary>
            Initializes BOX_POINT_INDEXES
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.MeshGenerator.pyramid_POINT_INDEXES">
            <summary>
            Initializes PYRAMID_POINT_INDEXES
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Cone(System.Double,System.Double,System.Int32)">
            <summary>
            Cones the specified radius.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="sect">The sect value.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Cone(System.Double,System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Cones the specified top radius.
            </summary>
            <param name="topRadius">The top radius.</param>
            <param name="bottomRadius">The bottom radius.</param>
            <param name="height">The height.</param>
            <param name="sect">The sect value.</param>
            <param name="IsExploded">Exploded boolean value</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Cylinder(System.Double,System.Double,System.Int32)">
            <summary>
            Cylinders the specified radius.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="sect">The sect value.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Sphere(System.Double,System.Int32)">
            <summary>
            Spheres the specified radius.
            </summary>
            <param name="radius">The radius.</param>
            <param name="sect">The sect value.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Cube(System.Double)">
            <summary>
            Cubes the specified side.
            </summary>
            <param name="side">The side value.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Parallelotope(System.Double,System.Double,System.Double)">
            <summary>
            Parallelotopes the specified side A.
            </summary>
            <param name="sideA">The side A.</param>
            <param name="sideB">The side B.</param>
            <param name="sideC">The side C.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.AreaSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Areas the segment
            </summary>
            <param name="width">The width.</param>
            <param name="height1">The height1.</param>
            <param name="height2">The height2.</param>
            <param name="depth">The depth.</param>
             <param name="index">The index.</param>
             <param name="deep">The deep.</param>
             <param name="clustered">The clustered.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.AreaSegmentFull(Syncfusion.Windows.Chart.IChartDataPoint[],System.Double,Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Areas the segment.
            </summary>
            <param name="points">The IChartDataPoint.</param>
            <param name="depth">The depth.</param>
            <param name="transformer">The IChartTransformer.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.ColumnParallelotope(System.Double,System.Double,System.Double)">
            <summary>
            Columns the parallelotope.
            </summary>
            <param name="sideA">The side A.</param>
            <param name="sideB">The side B.</param>
            <param name="sideC">The side C.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Pyramid(System.Double,System.Double)">
            <summary>
            Pyramids the specified side.
            </summary>
            <param name="side">The side value.</param>
            <param name="height">The height.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Pyramid(System.Double,System.Double,System.Double)">
            <summary>
            Pyramids the specified bottom.
            </summary>
            <param name="bottom">The bottom.</param>
            <param name="top">The top value.</param>
            <param name="height">The height.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.PlaneX(System.Double,System.Double)">
            <summary>
            Planes the Y.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.PieSegment(System.Windows.Point,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Pies the segment.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
             <param name="IsExploded">The IsExploded.</param>
             <param name="isExplodedVisible">The isExplodedVisible.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.DoughnutSegment(System.Windows.Point,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,System.Boolean)">
            <summary>
            Doughnuts the segment.
            </summary>
            <param name="center">The center.</param>
            <param name="radius1">The radius1.</param>
            <param name="radius2">The radius2.</param>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="IsExploded"></param>
            <param name="explodedRadius"></param>
            <param name="isExplodedVisible"></param>
            <returns>The MeshGeometry3D res</returns>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.PlaneY(System.Double,System.Double)">
            <summary>
            Planes the Y.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.PlaneZ(System.Double,System.Double)">
            <summary>
            Planes the Z.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Sector(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Sectors the specified radius.
            </summary>
            <param name="radius">The radius.</param>
            <param name="height">The height.</param>
            <param name="start">The start.</param>
            <param name="angle">The angle.</param>
            <param name="sect">The sect value.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.LineBar(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Int32,System.Boolean,System.Double)">
            <summary>
            Lines the bar.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
            <param name="point4">The point4.</param>
            <param name="index"></param>
            <param name="isClustered"></param>
            <param name="deep"></param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.StepLine(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Steps the line.
            </summary>
            <param name="pointStart">The point start.</param>
            <param name="pointEnd">The point end.</param>
            <param name="pointStep">The point step.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.FastLineBar(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Fasts the line bar.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
            <param name="point4">The point4.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.SplineArea(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Splines the area.
            </summary>
            <param name="splinePoints">The spline points.</param>
            <param name="transformer">The IChartTransformer.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.SplineSegment(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Draws splines segment.
            </summary>
            <param name="point1">The poin1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
            <param name="point4">The point4.</param>
            <returns>The MeshGeometry3D res</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.Glyph(System.Windows.Media.GlyphTypeface)">
            <summary>
            Glyphes the specified glyph.
            </summary>
            <param name="glyph">The glyph.</param>
            <returns>Returns null</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.InterpolateBezier(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Int32)">
            <summary>
            Interpolates the bezier.
            </summary>
            <param name="p1">The p1 value.</param>
            <param name="p2">The p2 value.</param>
            <param name="p3">The p3 value.</param>
            <param name="p4">The p4 value.</param>
            <param name="count">The count.</param>
            <returns>The points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.InterpolateBezier(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Int32)">
            <summary>
            Interpolates the bezier.
            </summary>
            <param name="p1">The p1 value.</param>
            <param name="p2">The p2 value.</param>
            <param name="p3">The p3 value.</param>
            <param name="p4">The p4 value.</param>
            <param name="count">The count.</param>
            <returns>The points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.AddQuad(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Adds the quad.
            </summary>
            <param name="geomerty">The geomerty.</param>
            <param name="p1">The p1 value.</param>
            <param name="p2">The p2 value.</param>
            <param name="p3">The p3 value.</param>
            <param name="p4">The p4 value.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.AddTexturedQuad(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Adds the textured quad.
            </summary>
            <param name="geomerty">The geomerty.</param>
            <param name="p1">The p1 value.</param>
            <param name="p2">The p2 value.</param>
            <param name="p3">The p3 value.</param>
            <param name="p4">The p4 value.</param>
            <param name="normal">The normal.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.MeshGenerator"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.AddTri(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Adds the tri.
            </summary>
            <param name="geomerty">The geomerty.</param>
            <param name="p1">The p1 value.</param>
            <param name="p2">The p2 value.</param>
            <param name="p3">The p3 value.</param>
            <param name="normal">The normal.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.MeshGenerator"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MeshGenerator.ShiftPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            The ShiftPoint method
            </summary>
            <param name="poin1">The point1 value</param>
            <param name="poin2">The point2 value</param>
            <param name="poin3">The point3 value</param>
            <returns>The point value</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PseudoText3D">
            <summary>
            Represents PseudoText3D
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.PseudoText3D.Location">
            <summary>
            Initializes Location
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.PseudoText3D.TextBlock">
            <summary>
            Initializes TextBlock
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PseudoText3D.Render(System.Windows.Controls.Viewport3D,System.Windows.Media.DrawingContext)">
            <summary>
            The Render method
            </summary>
            <param name="vp">The Viewport3D vp</param>
            <param name="dc">The DrawingContext dc</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TextBlock3D">
            <summary>
            Represents TextBlock3D
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextBlock3D.m_textBlock">
            <summary>
            Initializes m_textBlock
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextBlock3D.m_visualBrush">
            <summary>
            Initializes m_visualBrush
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextBlock3D.m_model">
            <summary>
            Initializes m_model
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextBlock3D.m_rect">
            <summary>
            Initializes m_rect
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextBlock3D.m_image">
            <summary>
            Initializes m_image
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TextBlock3D.#ctor">
            <summary>
            Initializes a new instance of the TextBlock3D class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TextBlock3D.Init">
            <summary>
            The Init method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TextBlock3D.Update">
            <summary>
            The Update method
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.TextBlock3D"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TextBlock3D.TextBlock">
            <summary>
            Gets the TextBlock
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TextBlock3D.Model">
            <summary>
            Gets the Model
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TextBlock3D.Rect">
            <summary>
            Gets or sets the Rect
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisType">
            <summary>
            Represents ChartAxisType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisType.X">
            <summary>
            The X value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisType.Y">
            <summary>
            The Y value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisType.Z">
            <summary>
            The Z value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSpaceType">
            <summary>
            Specifies the mode in which the Chart Space values should be interpreted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.None">
            <summary>
            The None Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.X">
            <summary>
            The X Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.Y">
            <summary>
            The Y Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.Z">
            <summary>
            The Z Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.XYZ">
            <summary>
            The XYZ Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.XDepth">
            <summary>
            The XDepth Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.YDepth">
            <summary>
            The YDepth Space value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSpaceType.ZDepth">
            <summary>
            The ZDepth Space value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastBarType">
            <summary>
            Represents FastBarType for performance
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastColumnType">
            <summary>
            Class implementation for 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartType">
            <summary>
            This is base class for all chart types. 
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.SpacingProperty">
            <summary>
            Using a DependencyProperty as the backing store for Spacing.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartType"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.UpdateSeriesInArea(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Updates the series in area.
            </summary>
            <param name="area">The area value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.GetSpacing(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the spacing.
            </summary>
            <param name="area">The area value.</param>
            <returns>The double space</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.SetSpacing(Syncfusion.Windows.Chart.ChartArea,System.Double)">
            <summary>
            Sets the spacing.
            </summary>
            <param name="area">The area value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the specified series.
            </summary>
            <param name="series">The series.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this chart type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
            <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.GetSeriesVisiblePoints(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the series visible points.
            </summary>
            <param name="series">The series.</param>
            <returns><see cref="T:Syncfusion.Windows.Chart.ChartIndexedDataPoint"/> array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.UpdateLastSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculate the last segment
            </summary>
            <param name="series"></param>
            <param name="points"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.CreateAdornment(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint,System.Int32)">
            <summary>
            Calculates the adornments.
            </summary>
            <param name="series">The series.</param>
            <param name="point">The point.</param>
            <param name="index">The index.</param>
            <returns>The ChartAdornment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.CheckFlags(Syncfusion.Windows.Chart.ChartType.ChartTypeFlags)">
            <summary>
            Checks the flags.
            </summary>
            <param name="flag">The flag value.</param>
            <returns>The bool value to check flags</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartType.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.IsIndexed">
            <summary>
            Gets a value indicating whether this type is indexed.
            </summary>
            <value>
            <c>true</c> if this type is indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.IsRotated">
            <summary>
            Gets a value indicating whether this type is independent
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.IsStacked">
            <summary>
            Gets a value indicating whether this type is stacked type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.IsSideBySide">
            <summary>
            Gets a value indicating whether this is side-by-side chart type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.RequiresAxis">
            <summary>
            Gets a value indicating whether chart type requires axis to be built.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.CustomAxisLabels">
            <summary>
            Gets a value indicating whether custom axis labels present.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.IsIndependent">
            <summary>
            Gets a value indicating whether this type is independent of other series.
            </summary>
            <value>
            <c>true</c> if this instance is independent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.RequiresDataCount">
            <summary>
            Gets the requirement for data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.AxesType">
            <summary>
            Gets the required type of the axes.
            </summary>
            <value>The type of the axes.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags">
            <summary>
            Chart type flags are used to identify specific to chart settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.None">
            <summary>
            Default chart type flag.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.SideBySide">
            <summary>
            Identifies that chart segments can be represented side-by-side on area.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.Stacked">
            <summary>
            Identifies that chart are represented in stacking form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.Indexed">
            <summary>
            Identifies that chart type is indexed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.Rotated">
            <summary>
            Identifies that chart type is rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.NotRequiresAxis">
            <summary>
            Identifies that axis is not required for this chart type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartType.ChartTypeFlags.CustomAxisLabels">
            <summary>
            Identifies that chart has custom labels on axis.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
             <seealso>
                 <cref>ChartFastHiLoLineSegment</cref>
             </seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastColumnType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastBarType.ToString">
            <summary>
            ChartBarType ToString method
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBarType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastBarType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastColumnSegment">
            <summary>
            Class implemenation for ChartFastColumnSegment
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSegment">
            <summary>
            This is base class for all chart segments.
            </summary>
            <remarks>
            Segment is a building block for any chart series. 
            Depending on chart type, segments on series may change. 
            For detailed information about segments on series see inherited segments documentation.
            Use chart segments templates to customize series look.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTypes"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.CenterOfViewportPropertyKey">
            <summary>
            Identifies CenterOfViewport attached readonly dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.IsSelectedPropertyKey">
            <summary>
            Represents IsSelected property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.SeriesPropertyKey">
            <summary>
            Represents Series property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.m_axisLabelInfo">
            <summary>
            Label axis info.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.xRange">
            <summary>
            Represents X-axis range of segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.yRange">
            <summary>
            Represents Y-axis range of segment. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.zRange">
            <summary>
            Represents Z-axis range of segment. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.seriesCorrespondingPoints">
            <summary>
            Series points that segment represent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.m_geometry">
            <summary>
            Initializes m_geometry
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.m_geometry3DGroup">
            <summary>
            Initializes m_geometry3DGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.InteriorProperty">
            <summary>
            Identifies the Interior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.DefaultTemplatePropertyKey">
            <summary>
            Identifies the Template dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.HighlightedProperty">
            <summary>
            Identifies the IsHighlighted property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.ItemProperty">
            <summary>
            Identifies the Item dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.SeriesProperty">
            <summary>
            Identifies Series dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.IsSelectedProperty">
            <summary>
            Identifies IsSelected dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSegment.CenterOfViewportProperty">
            <summary>
            Identifies CenterOfViewport dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.#ctor(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/> class.
            </summary>
            <param name="series">The series.</param>
            <param name="correspondingPoints">The corresponding points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.#ctor(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartAdornmentInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/> class.
            </summary>
            <param name="series">The series.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="adornment"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.GetCenterOfViewport(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the CenterOfViewport dependency property.
            </summary>
            <param name="obj">The obj value.</param>
            <returns>the CenterOfViewport point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draw3s the D segment.
            </summary>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.SetXRange(System.Double[])">
            <summary>
            Sets the X range for segment.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.SetYRange(System.Double[])">
            <summary>
            Sets the Y range for segment.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.SetZRange(System.Double[])">
            <summary>
            Sets the Z range for segment.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.SetRange(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"></see> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSegment.DisposeSegment">
            <summary>
            Method is used to Clear the all segments in the Chart
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.IsSelected">
            <summary>
            Gets a value indicating whether IsSelected. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Series">
            <summary>
            Gets a value indicating the parent Series. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Item">
            <summary>
            Gets or sets the Item. This is a dependency property.
            </summary>
            <value>The Item value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Geometry3D">
            <summary>
            Gets or sets the geometry.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Geometry3DGroup">
            <summary>
            Gets or sets the geometry 3D group.
            </summary>
            <value>The geometry 3D group.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.XDataMeasure">
            <summary>
            Gets the X data measure of series.
            </summary>
            <remarks>
            Used to determine X data range that segment represents.
            </remarks>
            <value>The X data measure.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.YDataMeasure">
            <summary>
            Gets the Y data measure of series.
            </summary>
            <remarks>
            Used to determine Y data range that segment represents.
            </remarks>
            <value>The Y data measure.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.ZDataMeasure">
            <summary>
            Get the CLR property ZDataMeasure from the internal variable zRange
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.CorrespondingPoints">
            <summary>
            Gets the corresponding points.
            </summary>
            <remarks>
            Represents points that segments should be built on.
            </remarks>
            <value>The <see cref="T:Syncfusion.Windows.Chart.ChartIndexedDataPoint"/> points array.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.ToolTip">
            <summary>
            Gets or sets the tooltip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Interior">
            <summary>
            Gets or sets the interior brush. This is a dependency property. 
            </summary>
            <remarks>
            This property is being set automatically by the chart building system.
            This property in bound with similar property on series that segment belongs to.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Stroke">
            <summary>
            Gets or sets the stroke brush. This is a dependency property.
            </summary>
            <remarks>
            This property in bound with similar property on series that segment belongs to.
            </remarks>
            <value>The stroke <see cref="T:System.Windows.Media.Brush"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness. This is a dependency property.
            </summary>
            <remarks>
            This property in bound with similar property on series that segment belongs to.
            </remarks>
            <value>The stroke thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.DefaultTemplate">
            <summary>
            Gets the default segment template. This is a dependency property.
            </summary>
            <value>The <see cref="T:System.Windows.DataTemplate"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.Highlighted">
            <summary>
            Gets or sets a value indicating whether this segment is highlighted.
            </summary>
            <value>
            <c>true</c> if this segment is highlighted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSegment.AxisLabelInfo">
            <summary>
            Gets or sets the axis label info.
            </summary>
            <value>The axis label info.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastColumnSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastColumnSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastColumnSegment.m_vpts1">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartFastColumnSegment"/> class.
            </summary>
            <remarks>
            During initialization the default template for Fast line segment is being created.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.#ctor(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFastColumnSegment"/> class.
            </summary>
            <param name="points">The points array.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.CheckForNewRange(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.GetSegmet(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.SetPointToNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.UpdateSegment(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="series"></param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">The transformer</param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartFastColumnSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.GetCrossPoint(System.Windows.Vector,System.Windows.Vector,System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Gets the cross point.
            </summary>
            <param name="p11">The P11 value.</param>
            <param name="p12">The P12. value.</param>
            <param name="p21">The P21 value.</param>
            <param name="p22">The P22 value.</param>
            <returns>The cross point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastColumnSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastColumnSegment.Points">
            <summary>
            Gets or sets the points collection.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastColumnPresenter">
            <summary>
            Class implementation for FastColumnPresenter
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastSeriesPresenter">
            <summary>
            ChartFastSeriesPresenter abstract class acts a base renderer for Fast Chart types
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.IndexProperty">
            <summary>
            Using a DependencyProperty as the backing store for Index.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.PenProperty">
            <summary>
            Identifies the Pen dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.DrawingPointsProperty">
            <summary>
            Using a DependencyProperty as the backing store for DrawingPoints.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.StrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for StrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.StrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Stroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.InteriorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interior.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.SegmentInteriorListProperty">
            <summary>
            Identifies the SegmentInteriorList dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.GetIndex(System.Windows.DependencyObject)">
            <summary>
            Return int value based on the given dependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.SetIndex(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set Index to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.GetPen(System.Windows.DependencyObject)">
            <summary>
            return pen value based on given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.SetPen(System.Windows.DependencyObject,System.Windows.Media.Pen)">
            <summary>
            Set Pen value to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.#ctor">
            <summary>
            Called when instance created for ChartFastSeriesPresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.OnDrawingPointsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Virtual method created for OnDrawingPointsChanged
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
            <remarks>GetVisualChild is the Override method used to get the visual child from the visual collection based on the index value.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.PointView">
            <summary>
            Get PointView CLR property value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.VisualCollection">
            <summary>
            Get Visualcollection CLR property value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.SegmentInteriorList">
            <summary>
            Get or Set SegmentInteriorList property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.DrawingPoints">
            <summary>
            Get or Set DrawingPointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.Interior">
            <summary>
            Get or Set InteriorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.AffectRender">
            <summary>
            Get or Set AffectRenderProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.Stroke">
            <summary>
            Get or Set StrokeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.StrokeThickness">
            <summary>
            Get or Set StrokeThicknessProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSeriesPresenter.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements.
            </summary>
            <returns>
            The number of visual child elements for this element.
            </returns>
            <remarks>VisualChildrenCount is the Override method used to get the count of the visual child from the visual collection.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastColumnPresenter.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastColumnPresenter.SeriesProperty">
            <summary>
             Identifies the Series dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastColumnPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastColumnPresenter.Points">
            <summary>
            Gets or Sets the PointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastColumnPresenter.Series">
            <summary>
            Get or Set SeriesProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SyncDrawingVisual">
            <summary>
            Class implementation for SyncdrawingVisual
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncDrawingVisual.Index">
            <summary>
            Get and Set Index proeprty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseType">
            <summary>
            Class implementation for ChartFastHiLoOpenCloseType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseType.ToString">
            <summary>
            Converts ChartHiLoOpenCloseType to string 
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The ChartSeries</param>
            <param name="points">The indexed data points</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseType.RequiresDataCount">
            <summary>
            Gets the requirement for data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment">
            <summary>
            Class implementation for ChartFastHiLoOpenCloseSegment
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.m_sopen">
            <summary>
            Initializes m_sOpen
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.m_eopen">
            <summary>
            Initializes m_eOpen
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.m_sclose">
            <summary>
            Initializes m_sClose
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.m_eclose">
            <summary>
            Initializes m_eClose
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.PointsProperty">
            <summary>
            Identifies the points dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment"/> class.
            </summary>
            <remarks>Default template is being assigned automatically.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.#ctor(Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment">ChartHiLoOpenCloseSegment</see> class. 
            </summary>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.Points">
            <summary>
            Get or Set PointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment.AffectRender">
            <summary>
            Get or Set AffectRenderProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastScatterSegment">
            <summary>
            Class implementation for ChartFastScatterSegment
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastScatterSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastScatterSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastScatterSegment.m_vpts1">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartFastScatterSegment"/> class.
            </summary>
            <remarks>
            During initialization the default template for Fast line segment is being created.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.#ctor(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFastScatterSegment"/> class.
            </summary>
            <param name="points">The points array.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.CheckForNewRange(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.GetSegmet(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.SetPointToNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.UpdateSegment(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="series"></param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">The transformer</param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartFastScatterSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.GetCrossPoint(System.Windows.Vector,System.Windows.Vector,System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Gets the cross point.
            </summary>
            <param name="p11">The P11 value.</param>
            <param name="p12">The P12. value.</param>
            <param name="p21">The P21 value.</param>
            <param name="p22">The P22 value.</param>
            <returns>The cross point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastScatterSegment.Points">
            <summary>
            Gets or sets the points collection.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastScatterType">
            <summary>
            Class implementation for ChartFastScatterType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.GetFastScatterHeight(System.Windows.DependencyObject)">
            <summary>
            Return the double Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.SetFastScatterHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the FastScatterHeight dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastScatterType.FastScatterHeightProperty">
            <summary>
            Indicates the FastScatterHeight Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.GetFastScatterWidth(System.Windows.DependencyObject)">
            <summary>
            Return the double Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.SetFastScatterWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the FastScatterWidth dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastScatterType.FastScatterWidthProperty">
            <summary>
            Indicates the FastScatterWidth Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastScatterType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
             <seealso>
                 <cref>ChartFastHiLoLineSegment</cref>
             </seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastScatterType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastScatterPresenter">
            <summary>
            Class implementation fro 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastScatterPresenter.PointsProperty">
            <summary>
             Identifies the points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastScatterPresenter.SeriesProperty">
            <summary>
             Identifies the Series dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastScatterPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastScatterPresenter.Points">
            <summary>
            Get or Set PointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastScatterPresenter.Series">
            <summary>
            Get or Set SeriesProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastSplineSegment">
            <summary>
            Represents FastSpline chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFastSplineType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSplineSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSplineSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastSplineSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartFastSplineSegment"/> class.
            </summary>
            <remarks>
            Default segment template is being assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.#ctor(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFastSplineSegment"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.SetPointToNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.UpdateSegment(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Method implementation for UpdateSegments for update the FastSplineSegments by given ChartSeries
            </summary>
            <param name="points"></param>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.GetSegmet(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Get the points and set the range to the corresponding series
            </summary>
            <param name="point"></param>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.NaturalSpline(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},System.Double[]@)">
            <summary>
            Naturals the spline.
            </summary>
            <param name="points">The points.</param>
            <param name="ys2">The ys2 value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineSegment.GetBezierControlPoints(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,System.Double,System.Double,Syncfusion.Windows.Chart.ChartPoint@,Syncfusion.Windows.Chart.ChartPoint@)">
            <summary>
            Gets the bezier control points.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="ys1">The ys1 value.</param>
            <param name="ys2">The ys2 value.</param>
            <param name="controlPoint1">The control point1.</param>
            <param name="controlPoint2">The control point2.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSplineSegment.Points">
            <summary>
            Gets or sets the points collection.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSplineSegment.Geometry">
            <summary>
            Gets or sets the segment's geometry. This is a dependency property.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastSplineType">
            <summary>
            Represents FastSpline chart type.
            </summary>
            <remarks>
            FastSpline Chart is similar to a Spline Chart except that it gives more performance
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFastSplineSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFastSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastSplineType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFastSplineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastSplineType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastSplinePresenter">
            <summary>
            Represents spline chart  Adornments
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.FastSplinePresenter"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastSplinePresenter.PointsProperty">
            <summary>
             Identifies the points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastSplinePresenter.SeriesProperty">
            <summary>
             Identifies the Series  dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastSplinePresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastSplinePresenter.Points">
            <summary>
            Get or Set PointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastSplinePresenter.Series">
            <summary>
            Get or Set SeriesProperty 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment">
            <summary>
            Class implementation for ChartFastStackingColumnSegment
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.m_bottomLeftPoint">
            <summary>
            Initializes m_bottomLeftPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.m_topRightPoint">
            <summary>
            Initializes m_topRightPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.PointsProperty">
            <summary>
            Identifies the points dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.AffectRender">
            <summary>
            Gets or Sets the AffectRenderProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastStackingColumnSegment.Points">
            <summary>
            Get or Set PointsProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastStackingColumnType">
            <summary>
            Class implementation for ChartFastStackingColumnType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastStackingColumnType.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnType.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Set RequiresNegativeSeriesStack to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnType.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Return the Bool Value from the given DependencyObject
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastStackingColumnType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHiLoAreaSegment">
            <summary>
            Represents HiLo area segment type.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoAreaType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment">
            <summary>
            Represents chart range area segment.
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaSegment">
            <summary>
            Represents chart area segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartAreaSegment"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAreaSegment"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">The transformer</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaSegment.Geometry">
            <summary>
            Gets or sets the segment geometry. This is a dependency property.
            </summary>
            <value>The <see cref="P:Syncfusion.Windows.Chart.ChartAreaSegment.Geometry"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaSegment.AreaPoints">
            <summary>
            Gets or sets the points array that area initially represents.
            </summary>
            <value>The area points.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRangeAreaSegment.FillBrushProperty">
            <summary>
            Identifies the FillBrush dependency property.
            Using a DependencyProperty as the backing store for FillBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
            <param name="isHighLow">The isHighLow.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">The transformer</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.PrepareRangePoints">
            <summary>
            Prepares the range points.
            </summary>
            <returns>Returns the range points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRangeAreaSegment.IsHighLow">
            <summary>
            Gets or sets a value indicating whether this instance is high low.
            </summary>
            <value>
             <c>true</c> if this instance is high low; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRangeAreaSegment.FillBrush">
            <summary>
            Gets or sets the fill brush.
            </summary>
            <value>The fill brush.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment.SegmentFillConverter">
            <summary>
            Represents SegmentFillConverter
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.SegmentFillConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment.SegmentFillConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaSegment.SegmentFillConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment.SegmentFillConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoAreaSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoAreaSegment"/> class.
            </summary>
            <param name="points">The ChartData points</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
            <param name="isHighLow">The HighLow bool value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoAreaSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">The transformer</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoAreaSegment"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHiLoAreaType">
            <summary>
            Represents HiLoArea type class
            </summary>
            <remarks>
            HiLoArea Chart is a variation of Area Chart type that is normally used in stock
            analysis.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoAreaSegment"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRangeAreaType">
            <summary>
            Represents ChartRangeAreaType class
            </summary>
            <remarks>
            Range Area Chart is a variation of Area Chart type that lets you plot bands of
            data in a chart, like Bollinger bands, weather patterns, etc. Each point in the
            chart is specified by 2 Y values – the lower and higher end of the band.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaType">
            <summary>
            Represents the CahrtArea type
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaType.ToString">
            <summary>
            Converts ChartAreaType to string 
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaType.Flags">
            <summary>
            Gets the flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.GetHighValueInterior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the HighValueInterior dependency property.
            </summary>
            <param name="obj">The DependencyObjectobj.</param>
            <returns>The HighValueInterior brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.SetHighValueInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the HighValueInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRangeAreaType.HighValueInteriorProperty">
            <summary>
            Indicates the HighValueInterior Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.GetLowValueInterior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the LowValueInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>The LowValueInterior Brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.SetLowValueInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the LowValueInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRangeAreaType.LowValueInteriorProperty">
            <summary>
            Indicates the LowValueInterior Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartRangeAreaType"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.Point2ChartPoint(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Point2s the chart point.
            </summary>
            <param name="points">The points.</param>
            <returns>Returns the point array</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.GetCrossPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the cross point.
            </summary>
            <param name="p11">The P11 value.</param>
            <param name="p12">The P12 value.</param>
            <param name="p21">The P21 value.</param>
            <param name="p22">The P22 value.</param>
            <returns>The CrossPoint</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeAreaType.ToString">
            <summary>
            Converts ChartAreaType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRangeAreaType.RequiresDataCount">
            <summary>
            Gets the requirement for data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRangeAreaType.Flags">
            <summary>
            Gets the flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoAreaType.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this chart type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
            <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoAreaType.ToString">
            <summary>
            Returns the string representation.
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoAreaType.RequiresDataCount">
            <summary>
            Gets the requirement for data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingArea100Type">
            <summary>
            Represents stacking 100% area type.
            </summary>
            <remarks>
            In the 100 % Stacked Area Chart, the cumulative proportion of each stacked
            element always totals 100%. This type of chart is great to visualize the
            relative contribution of each series values to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingArea100Type"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingAreaType">
            <summary>
            Represents ChartStackingAreaType class
            </summary>
            <remarks>
            Stacking Area Charts are similar to regular area charts except that the Y values
            stack on top of each other in the specified series order. This helps visualize
            the relationship of parts to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingAreaType.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingAreaType.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingAreaType.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingAreaType.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingAreaType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingAreaType.ToString">
            <summary>
            Converts ChartAreaType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingAreaType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingArea100Type.ShowValueAsProbabilityProperty">
            <summary>
            Identifies ShowValueAsProbability attached dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingArea100Type.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.OnShowValueAsProbabilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [show value as probability changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.GetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the show value as probability.
            </summary>
            <param name="area">The area value.</param>
            <returns>True is the value is to be displayed as probability</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.SetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the show value as probability.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingArea100Type.ToString">
            <summary>
            Converts ChartAreaType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingAreaType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingArea100Type.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingBar100Type">
            <summary>
            Represents Stacked 100 bar type.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingColumn100Type">
            <summary>
            Represents stacking 100% column type.
            </summary>
            <remarks>
            In the 100 % Stacked Column Chart, the cumulative proportion of each stacked
            element always totals 100%. This type of chart is great to visualize the
            relative contribution of each series values to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumn100Segment"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingColumnType">
            <summary>
            Represents stacking column chart type.
            </summary>
            <remarks>
            Stacking Column Charts are similar to regular column charts except that the Y
            values stack on top of each other in the specified series order. This helps
            visualize the relationship of parts to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumnSegment"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartColumnType">
            <summary>
            Represents ChartColumnType class
            </summary>
            <remarks>
            Column Charts are among the most common chart types that are being used. It uses
            vertical bars (called columns) to display different values of one or more items.
            It is similar to a bar chart except that here the bars are vertical and not
            horizontal. Points from adjacent series are drawn as bars next to each other.  
            <para></para>
            <para>It is used for comparing the frequency, count, total or average of data in
            different categories. It is ideal for showing the variations in the value of an
            item over time.</para>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartColumnSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnType.ToString">
            <summary>
            Converts ChartColumnType to string 
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartColumnType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartColumnType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingColumnType.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnType.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnType.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumnType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnType.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumnType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnType.ToString">
            <summary>
            Converts ChartColumnType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumnType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingColumnType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingColumn100Type.ShowValueAsProbabilityProperty">
            <summary>
            Identifies ShowValueAsProbability attached dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this chart type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
            <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.OnShowValueAsProbabilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [show value as probability changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.GetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the show value as probability.
            </summary>
            <param name="area">The area value.</param>
            <returns>True is the value is to be displayed as probability</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.SetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the show value as probability.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.AddAdornment(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Adds the adornment.
            </summary>
            <param name="series">The target series.</param>
            <param name="point">The corresponding point.</param>
            <param name="sideBySideInfo">The side by side info.</param>
            <param name="percentageRange">The percentage range.</param>
            <param name="end"></param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumn100Type"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Type.ToString">
            <summary>
            Converts ChartColumnType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingBar100Type"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingBar100Type.ToString">
            <summary>
            ChartBarType ToString method
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingBar100Type"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingBar100Type.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingLine100Type">
            <summary>
            Represents stacking 100% line type.
            </summary>
            <remarks>
            In the 100 % Stacked Line Chart, the cumulative proportion of each stacked
            element always totals 100%. This type of chart is great to visualize the
            relative contribution of each series values to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLine100Type"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingLineType">
            <summary>
            Represents ChartStackingLineType class
            </summary>
            <remarks>
            Stacking Line Charts are similar to regular line charts except that the Y values
            stack on top of each other in the specified series order. This helps visualize
            the relationship of parts to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLineType">
            <summary>
            Represents ChartLineType class
            </summary>
            <remarks>
            Line Charts join points on a plot using straight lines showing trends in data at
            equal intervals. Line charts treats the input as non-numeric, categorical
            information, equally spaced along the X axis. This is appropriate for
            categorical data, such as text labels, but can produce unexpected results when
            the X values consist of numbers.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.GetBreakLineForNonIndexedData(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the BreakLineForNonIndexedData dependency property.
            </summary>
            <param name="obj">The obj value.</param>
            <returns>bool value for BreakLineForNonIndexedData</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.SetBreakLineForNonIndexedData(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the BreakLineForNonIndexedData dependency property. 
            </summary>
            <param name="obj">The obj value.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.GetBreakLineForDoublePointsDistanceMoreThan(System.Windows.DependencyObject)">
            <summary>
             Gets the value of the BreakLineForDoublePointsDistanceMoreThan dependency property.
            </summary>
            <param name="obj">The obj value.</param>
            <returns>The double value for BreakLineForDoublePointsDistanceMoreThan</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.SetBreakLineForDoublePointsDistanceMoreThan(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the BreakLineForDoublePointsDistanceMoreThan dependency property. Used for Double ValueType
            </summary>
            <param name="obj">The obj value.</param>
            <param name="value">The value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.GetBreakLineForTimeSpanPointsDistanceMoreThan(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the BreakLineForTimeSpanPointsDistanceMoreThan dependency property.  Used for DateTime ValueType
            </summary>
            <param name="obj">The obj value.</param>
            <returns>The Timespan for BreakLineForTimeSpanPointsDistanceMoreThan</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.SetBreakLineForTimeSpanPointsDistanceMoreThan(System.Windows.DependencyObject,System.TimeSpan)">
            <summary>
            Sets the value of the BreakLineForTimeSpanPointsDistanceMoreThan dependency property. 
            </summary>
            <param name="obj">The obj value.</param>
            <param name="value">The value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineType.BreakLineForNonIndexedDataProperty">
            <summary>
            Identifies the BreakLineForNonIndexedData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineType.BreakLineForDoublePointsDistanceMoreThanProperty">
            <summary>
            Identifies the BreakLineForDoublePointsDistanceMoreThan dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineType.BreakLineForTimeSpanPointsDistanceMoreThanProperty">
            <summary>
            Identifies the BreakLineForTimeSpanPointsDistanceMoreThan dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingLineType.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLineType.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLineType.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLineType.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLineType.ToString">
            <summary>
            Converts ChartStackingLineType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingLineType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingLine100Type.ShowValueAsProbabilityProperty">
            <summary>
            Identifies ShowValueAsProbability attached dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingLine100Type.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.OnShowValueAsProbabilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [show value as probability changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.GetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the show value as probability.
            </summary>
            <param name="area">The area value.</param>
            <returns>True is the value is to be displayed as probability</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.SetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the show value as probability.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingLine100Type.ToString">
            <summary>
            Converts ChartStackingLine100Type to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingLineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingLine100Type.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingSpline100Type">
            <summary>
            Represents stacking 100% spline type.
            </summary>
            <remarks>
            In the 100 % Stacked Spline Chart, the cumulative proportion of each stacked
            element always totals 100%. This type of chart is great to visualize the
            relative contribution of each series values to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSpline100Type"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingSplineType">
            <summary>
            Represents ChartStackingSplineType class
            </summary>
            <remarks>
            Stacking Spline Charts are similar to regular spline charts except that the Y values
            stack on top of each other in the specified series order. This helps visualize
            the relationship of parts to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSplineType">
            <summary>
            Represents spline chart type.
            </summary>
            <remarks>
            Spline Chart is similar to a Line Chart except that it connects the different
            data points using splines instead of straight lines.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.GetBreakLineForNonIndexedData(System.Windows.DependencyObject)">
            <summary>
            Gets the break line for non indexed data.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>The bool value for BreakLineForNonIndexedData</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.SetBreakLineForNonIndexedData(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the break line for non indexed data.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.GetBreakLineForDoublePointsDistanceMoreThan(System.Windows.DependencyObject)">
            <summary>
            Gets the break line for double points distance more than.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>Break line for Double points distance</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.SetBreakLineForDoublePointsDistanceMoreThan(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the break line for double points distance more than.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.GetBreakLineForTimeSpanPointsDistanceMoreThan(System.Windows.DependencyObject)">
            <summary>
            Gets the break line for time span points distance more than.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>Break line for TimeSpan points distance</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.SetBreakLineForTimeSpanPointsDistanceMoreThan(System.Windows.DependencyObject,System.TimeSpan)">
            <summary>
            Sets the break line for time span points distance more than.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineType.SplineCoefficientProperty">
            <summary>
            Using a DependencyProperty as the backing store for Splinecoefficient.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineType.BreakLineForNonIndexedDataProperty">
            <summary>
            Identifies the BreakLineForNonIndexedData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineType.BreakLineForDoublePointsDistanceMoreThanProperty">
            <summary>
            Identifies the BreakLineForDoublePointsDistanceMoreThan dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineType.BreakLineForTimeSpanPointsDistanceMoreThanProperty">
            <summary>
            Identifies the BreakLineForTimeSpanPointsDistanceMoreThan dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.GetSplineCoefficient(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the spline coefficient.
            </summary>
            <param name="series">The series.</param>
            <returns>The SplineCoefficient</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.SetSplineCoefficient(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the spline coefficient.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.NaturalSpline(Syncfusion.Windows.Chart.ChartIndexedDataPoint[],System.Double[]@)">
            <summary>
            Naturals the spline.
            </summary>
            <param name="points">The points.</param>
            <param name="ys2">The ys2 value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineType.GetBezierControlPoints(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,System.Double,System.Double,Syncfusion.Windows.Chart.ChartPoint@,Syncfusion.Windows.Chart.ChartPoint@)">
            <summary>
            Gets the bezier control points.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="ys1">The ys1 value.</param>
            <param name="ys2">The ys2 value.</param>
            <param name="controlPoint1">The control point1.</param>
            <param name="controlPoint2">The control point2.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingSplineType.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineType.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineType.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineType.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineType.ToString">
            <summary>
            Converts ChartStackingSplineType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingSplineType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingSpline100Type.ShowValueAsProbabilityProperty">
            <summary>
            Identifies ShowValueAsProbability attached dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingSpline100Type.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.OnShowValueAsProbabilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [show value as probability changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.GetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the show value as probability.
            </summary>
            <param name="area">The area value.</param>
            <returns>True is the value is to be displayed as probability</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.SetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the show value as probability.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSpline100Type.ToString">
            <summary>
            Converts ChartStackingSplineType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingSpline100Type.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type">
            <summary>
            Represents stacking 100% SplineArea type.
            </summary>
            <remarks>
            In the 100 % Stacked SplineArea Chart, the cumulative proportion of each stacked
            element always totals 100%. This type of chart is great to visualize the
            relative contribution of each series values to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType">
            <summary>
            Represents ChartStackingSplineAreaType class
            </summary>
            <remarks>
            Stacking SplineArea Charts are similar to regular splinearea charts except that the Y values
            stack on top of each other in the specified series order. This helps visualize
            the relationship of parts to the whole.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSplineAreaType">
            <summary>
            Represents ChartSplineAreaType
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineAreaSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineAreaType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineAreaType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.ToString">
            <summary>
            Converts ChartStackingSplineAreaType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingSplineAreaType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.ShowValueAsProbabilityProperty">
            <summary>
            Identifies ShowValueAsProbability attached dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.RequiresNegativeSeriesStackProperty">
            <summary>
            Identifies the RequiresNegativeSeriesStack dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.OnRequiresNegativeSeriesStackChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [requires negative series stack changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.SetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Specifies that the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <param name="value">True to stack separately, false otherwise.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.GetRequiresNegativeSeriesStack(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Returns whether the positive and negative series should be separately stacked.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> where the stacking should happen.</param>
            <returns>True indicates the positive and negative series are stacked separately.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.OnShowValueAsProbabilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [show value as probability changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.GetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the show value as probability.
            </summary>
            <param name="area">The area value.</param>
            <returns>True is the value is to be displayed as probability</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.SetShowValueAsProbability(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the show value as probability.
            </summary>
            <param name="area">The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.ToString">
            <summary>
            Converts ChartStackingSplineAreaType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingSplineAreaType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingSplineArea100Type.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSurfaceType">
            <summary>
            Class implementation for ChartSurfaceType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSurfaceType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSurfaceType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSurfaceType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSurfaceSegment">
            <summary>
            Class implementation for ChartSurfaceSegment
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSurfaceSegment.#ctor(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Called when instance created for ChartSurfaceSegment
            </summary>
            <param name="points"></param>
            <param name="correspondingPoints"></param>
            <param name="series"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSurfaceSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSurfaceSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draw3s the D segment.
            </summary>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Points">
            <summary>
            Gets or Sets the Poits property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>The point1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>The point2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Point3">
            <summary>
            Gets or sets the point3.
            </summary>
            <value>The point3.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Point4">
            <summary>
            Gets or sets the point4.
            </summary>
            <value>The point4.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Points1">
            <summary>
            Get or Set Point1 Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Points2">
            <summary>
            Get or Set Point2 Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Points3">
            <summary>
            Get or Set Point3 Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.Points4">
            <summary>
            Get or Set Point4 Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSurfaceSegment.SegmentIndex">
            <summary>
            Get or Set SegmentIndex Property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationsPresenter">
            <summary>
            Represents annotations items control. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IChartSerializer">
            <summary>
            Interface of IChartSerializer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IChartSerializer.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IChartSerializer.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.m_templateSwitcher">
            <summary>
            The IMultiValueConverter TemplateSwitcher
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> routed event is raised on this element. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control. 
            </summary>
            <returns>
            The size of the control, up to the maximum specified by <paramref name="constraint"/>.
            </returns>
            <param name="constraint">The maximum size that the method can return.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called to arrange and size the content of a <see cref="T:System.Windows.Controls.Control"/> object. 
            </summary>
            <returns>
            The size of the control.
            </returns>
            <param name="arrangeBounds">The computed size that is used to arrange the content.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.ConnectAnnotation(Syncfusion.Windows.Chart.ChartAnnotationLabel,System.Windows.Controls.ContentPresenter)">
            <summary>
            Connects the annotation to its presenter.
            </summary>
            <param name="annotation">The annotation.</param>
            <param name="annotationPresenter">The annotation presenter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.ChartAnnoationDragged">
            <summary>
            Event for ChartAnnoationDragged
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.ChartAnnotationDragging">
            <summary>
            Event for ChartAnnotationDragging
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.ChartAnnotationDropped">
            <summary>
            Event for ChartAnnotationDropped
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAnnotationsPresenter.ChartAnnotationDropping">
            <summary>
            Event for ChartAnnotationDropping
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesCanvas">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesCanvas.SeriesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Series.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesCanvas.XAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesCanvas.YAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for YAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.Canvas"></see> element.
            </summary>
            <param name="arrangeSize">The size that this <see cref="T:System.Windows.Controls.Canvas"></see> element should use to arrange its child elements.</param>
            <returns>
            A <see cref="T:System.Windows.Size"></see> that represents the arranged size of this <see cref="T:System.Windows.Controls.Canvas"></see> element and its descendants.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.Canvas"></see> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Canvas.ArrangeOverride(System.Windows.Size)"></see> pass.
            </summary>
            <param name="constraint">An upper limit <see cref="T:System.Windows.Size"></see> that should not be exceeded.</param>
            <returns>
            A <see cref="T:System.Windows.Size"></see> that represents the size that is required to arrange child content.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCanvas.CreateTransformer(System.Windows.Rect)">
            <summary>
            Creates the transformer.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCanvas.OnVisibleRangeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when visible range is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCanvas.OnSeriesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when series is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCanvas.OnAxeschanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesCanvas.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesCanvas.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesCanvas.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartWatermarkElement">
            <summary>
            Renders the chart watermark.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartWatermarkElement.XAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartWatermarkElement.YAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for YAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartWatermarkElement.WatermarkProperty">
            <summary>
            Using a DependencyProperty as the backing store for watermark.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartWatermarkElement.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartWatermarkElement.OnAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartWatermarkElement.OnAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartWatermarkElement.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartWatermarkElement.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartWatermarkElement.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartWatermarkElement.Watermark">
            <summary>
            Gets or sets the watermark.
            </summary>
            <value>The Watermark.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartColumnDrawingValues">
            <summary>
            Class implementation for ChartColumnDrawingValues
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnDrawingValues.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnDrawingValues.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnDrawingValues.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnDrawingValues.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnDrawingValues.X">
            <summary>
            Gets or sets the X co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnDrawingValues.Y">
            <summary>
            Gets or sets the Y co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnDrawingValues.Width">
            <summary>
            Gets or sets the width of segment. This is a dependency property.
            </summary>
            <value>The width value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnDrawingValues.Height">
            <summary>
            Gets or sets the height of segment. This is a dependency property.
            </summary>
            <value>The height value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ColumnChartValuesCollection">
            <summary>
            Class implementation for ColumnChartValuesCollection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastHiLoOpenClosePresenter">
            <summary>
            Class implementation for ChartFastHiLoOpenClosePresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenClosePresenter.#ctor">
            <summary>
            Called when instance created for ChartFastHiLoOpenClosePresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenClosePresenter.OnDrawingPointsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Virtual method created for OnDrawingPointsChanged
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastHiLoOpenClosePresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues">
            <summary>
            Class implementation for HiLoOpenCloseDrawingValues
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.StartOpenPointProperty">
            <summary>
            Identifies the StartOpenPoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.EndOpenPointProperty">
            <summary>
            Identifies the EndOpenPoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.StartClosePointProperty">
            <summary>
            Identifies the StartClosePoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.EndClosePointProperty">
            <summary>
             Identifies the EndClosepoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.HighPointProperty">
            <summary>
            Identifies the HighPoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.LowPointProperty">
            <summary>
            Identifies the LowPoint dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.StartOpenPoint">
            <summary>
            Get or Sets the StartOpenPointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.EndOpenPoint">
            <summary>
            Gets or Sets the EndOpenPointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.StartClosePoint">
            <summary>
            Gets or Sets the StartClosePointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.EndClosePoint">
            <summary>
            Get or Set EndClosePointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.HighPoint">
            <summary>
            Gets or Sets the HighPointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HiLoOpenCloseDrawingValues.LowPoint">
            <summary>
            Gets or Sets the LowPointProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HiLoOpenCloseChartDrawingValuesCollection">
            <summary>
            Class implementation for HiLoOpenCloseChartDrawingValuesCollection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ScatterChartDrawingValues">
            <summary>
            Class implementation for ScatterChartDrawingValues
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ScatterChartDrawingValues.radiusXProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ScatterChartDrawingValues.radiusYProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ScatterChartDrawingValues.CenterPointProperty">
            <summary>
            Identifies the CenterPoint dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ScatterChartDrawingValues.CenterPoint">
            <summary>
            Gets or Sets CenterPointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ScatterChartDrawingValues.radiusX">
            <summary>
            Gets or sets the width of segment. This is a dependency property.
            </summary>
            <value>The width value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ScatterChartDrawingValues.radiusY">
            <summary>
            Gets or sets the height of segment. This is a dependency property.
            </summary>
            <value>The height value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ScatterChartDrawingValuesCollection">
            <summary>
            Class implementation for ScatterChartDrawingValuesCollection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastSegmnetProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastSegmnetProperties.StrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for StrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastSegmnetProperties.StrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Stroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastSegmnetProperties.InteriorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interior.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastSegmnetProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.FastSegmnetProperties"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastSegmnetProperties.Interior">
            <summary>
            Gets or sets the interior.
            </summary>
            <value>The interior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastSegmnetProperties.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastSegmnetProperties.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastSegmentsPropertiesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.FastSegmentsPropertiesConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastSegmentsPropertiesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.FastSegmentsPropertiesConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastStackingColumnPresenter">
            <summary>
            Class implementation for ChartFastStackingColumnPresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnPresenter.#ctor">
            <summary>
            Called when instance created for ChartFastStackingColumnPresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnPresenter.OnDrawingPointsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Virtual method created for OnDrawingPointsChanged
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastStackingColumnPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.StackingColumnChartValues">
            <summary>
            Class implementation for StackingColumnChartValues
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.StackingColumnChartValues.IsLowerProperty">
            <summary>
            Identifies the IsLower dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.StackingColumnChartValues.IsUpperProperty">
            <summary>
            Identifies the IsUpper dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.StackingColumnChartValues.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.StackingColumnChartValues.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.StackingColumnChartValues.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.StackingColumnChartValues.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.StackingColumnChartValues.IsLower">
            <summary>
            Gets or sets a value indicating whether this segment is lower part of stack.
            </summary>
            <value><c>true</c> if this instance is lower; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.StackingColumnChartValues.IsUpper">
            <summary>
            Gets or sets a value indicating whether this instance is upper part of stack.
            </summary>
            <value><c>true</c> if this instance is upper; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.StackingColumnChartValues.X">
            <summary>
            Gets or sets the X co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.StackingColumnChartValues.Y">
            <summary>
            Gets or sets the Y co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.StackingColumnChartValues.Width">
            <summary>
            Gets or sets the width of segment. This is a dependency property.
            </summary>
            <value>The width value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.StackingColumnChartValues.Height">
            <summary>
            Gets or sets the height of segment. This is a dependency property.
            </summary>
            <value>The height value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.StackingColumnChartValuesCollection">
            <summary>
            Class implementation for StackingColumnChartValuesCollection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.StackingColumnChartValuesCollection.#ctor">
            <summary>
            Empty constructor for StackingColumnChartValuesCollection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.InteractiveCursor">
            <summary>
            Represents InteractiveCursor class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Windows.Chart.InteractiveCursor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.#ctor">
            <summary>
            Called When instance created for InteractiveCursor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.IsBindWithSegmentProperty">
            <summary>
            Identifies the IsBindWithSegment, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.IsBindWithMouseMoveProperty">
            <summary>
            Identifies the IsBindWithMouseMove, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.CursorVisibilityProperty">
            <summary>
            Identifies the Cursor Visibility
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.CursorStrokeThicknessProperty">
            <summary>
            Sets the thickness for the Cursor Stroke
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorStrokeProperty">
            <summary>
            Identifies the HorizontalCursorStroke, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorStrokeProperty">
            <summary>
            Identifies the VerticalCursorStroke, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorVisibilityProperty">
            <summary>
            Identifies the HorizontalCursorVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.CursorSymbolWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurSorWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.CursorSymbolHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurSorHeight.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.CursorSymbolStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for CursorSymbolInterior.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerTicalCursorTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorTemplateProperty">
            <summary>
             Using a DependencyProperty as the backing store for HorizontalCursorTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorVisibilityProperty">
            <summary>
            Identifies the HorizontalCursorVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.PointCollectionProperty">
             <summary>
            Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc... 
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.DataPointProperty">
            <summary>
            Using a DependencyProperty as the backing store for DataPoint.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.LabelPositionProperty">
            <summary>
            Identifies the LabelPosition, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.IsInversedLabelProperty">
            <summary>
            Identifies the IsInversedLabel, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.EnableVerticalMoveProperty">
            <summary>
            Identifies the EnableVerticalMove, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.EnableHorizontalMoveProperty">
            <summary>
            Identifies the EnableHorizontalMove, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.XValueProperty">
            <summary>
            Identifies the XValue, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.YValueProperty">
            <summary>
            Identifies the YValue, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.OffsetYProperty">
            <summary>
            Identifies the OffsetY, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.OffsetXProperty">
            <summary>
            Identifies the OffsetX, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.BindWithMouseMoveOnSegmentProperty">
            <summary>
            Identifies the BindWithMoseMoveOnSegment, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.LabelBackgroundProperty">
            <summary>
            Identifies the LabelBackground, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.LabelForegroundProperty">
            <summary>
            Identifies the LabelForeground, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.LabelFontProperty">
            <summary>
            Identifies the LabelFont, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorLabelPositionProperty">
            <summary>
            Identifies the HorizontalCursorLabelPosition, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorLabelPositionProperty">
            <summary>
            Identifies the VerticalCursorLabelPosition, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorLabelContentProperty">
            <summary>
            Identifies the HorizontalCursorLabelContent, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorLabelContentProperty">
            <summary>
            Identifies the VerticalCursorLabelContent, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalLabelVisibilityProperty">
            <summary>
            Identifies the HorizontalLabelVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.InteractiveCursorSymbolVisibilityProperty">
            <summary>
            Identifies the HorizontalCursorVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.InteractiveCursorSymbolTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalCursorTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.VerticalLabelVisibilityProperty">
            <summary>
            Identifies the VerticalLabelVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.IsOpenProperty">
            <summary>
            Identifies the VerticalLabelVisibility, It is a Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.LeftPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for LeftPostion.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.TopPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for TopPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.InteractiveCursor.m_interactivecursor">
            <summary>
            Identifies the InteractiveCurosr Collections
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"></see>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.InteractiveCursor"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.FindYValue(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            To find the corresponding Y Value
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="valX"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.Serialize">
            <summary>
            Return XAML string from the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.InteractiveCursor.Deserialize(System.String)">
            <summary>
            Return the object from the XAML string
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.CollectionIndex">
            <summary>
            Gets or sets the index of the collection.
            </summary>
            <value>The index of the collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.Y1">
            <summary>
            Gets or sets the y1.
            </summary>
            <value>The y1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.IsBindWithSegment">
            <summary>
            Gets or sets a value indicating whether this instance is bind with segment.
            </summary>
            <value>
            	<c>true</c> if this instance is bind with segment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.IsBindWithMouseMove">
            <summary>
            Gets or sets a value indicating whether this instance is bind with segment.
            </summary>
            <value>
            	<c>true</c> if this instance is bind with segment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.CursorVisibility">
            <summary>
            Gets or Sets value fro the Cursor Visibility
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.CursorStrokeThickness">
            <summary>
            Gets or sets the cursor stroke thickness.
            </summary>
            <value>The cursor stroke thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorStroke">
            <summary>
            Gets or sets the horizontal cursor stroke.
            </summary>
            <value>The horizontal cursor stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorStroke">
            <summary>
            Gets or sets the vertical cursor stroke.
            </summary>
            <value>The vertical cursor stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorVisibility">
            <summary>
            Gets or sets the horizontal cursor visibility.
            </summary>
            <value>The horizontal cursor visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.CursorSymbolWidth">
            <summary>
            Gets or Sets the InteractiveCursorSymbol Width
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.CursorSymbolHeight">
            <summary>
            Gets or Sets the Interactive Cursor Symbol Height
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.CursorSymbolStroke">
            <summary>
            Gets or sets the Interactive Cursor Symbol Stroke
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorTemplate">
            <summary>
            Gets or Sets the InteractiveCursor Vertical Line Template
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorTemplate">
            <summary>
            Gets or Sets the InteractiveCursor Horizontal Line Template
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorVisibility">
            <summary>
            Gets or sets the horizontal cursor visibility.
            </summary>
            <value>The horizontal cursor visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.DataPoint">
            <summary>
            Get and Set DataPointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.PointCollection">
            <summary>
            Get and Set PointCollectionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.LabelPosition">
            <summary>
            Gets or sets the label position.
            </summary>
            <value>The label position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.IsInversedLabel">
            <summary>
            Gets or sets a value indicating whether this instance is inversed label.
            </summary>
            <value>
            	<c>true</c> if this instance is inversed label; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.EnableVerticalMove">
            <summary>
            Gets or sets a value indicating whether [enable vertical move].
            </summary>
            <value><c>true</c> if [enable vertical move]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.EnableHorizontalMove">
            <summary>
            Gets or sets a value indicating whether [enable horizontal move].
            </summary>
            <value>
            	<c>true</c> if [enable horizontal move]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.XValue">
            <summary>
            Gets or sets the X value.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.YValue">
            <summary>
            Gets or sets the Y value.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.OffsetY">
            <summary>
            Gets or sets the offset Y.
            </summary>
            <value>The offset Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.OffsetX">
            <summary>
            Gets or sets the offset X.
            </summary>
            <value>The offset X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.BindWithMouseMoveOnSegment">
            <summary>
            Gets or sets a value indicating whether [bind with mouse move on segment].
            </summary>
            <value>
            	<c>true</c> if [bind with mouse move on segment]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.LabelVisibility">
            <summary>
            Gets or sets the label visibility.
            </summary>
            <value>The label visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.LabelBackground">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>The label background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.LabelForeground">
            <summary>
            Gets or sets the label foreground.
            </summary>
            <value>The label foreground.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.LabelFont">
            <summary>
            Gets or sets the label font.
            </summary>
            <value>The label font.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorLabelPosition">
            <summary>
            Gets or sets the horizontal cursor label position.
            </summary>
            <value>The horizontal cursor label position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorLabelPosition">
            <summary>
            Gets or sets the vertical cursor label position.
            </summary>
            <value>The vertical cursor label position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalCursorLabelContent">
            <summary>
            Gets or sets the content of the horizontal cursor label.
            </summary>
            <value>The content of the horizontal cursor label.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalCursorLabelContent">
            <summary>
            Gets or sets the content of the vertical cursor label.
            </summary>
            <value>The content of the vertical cursor label.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalLabelVisibility">
            <summary>
            Gets or sets the horizontal label visibility.
            </summary>
            <value>The horizontal label visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.InteractiveCursorSymbolVisibility">
            <summary>
            Gets or sets the Interactive cursor Symbol visibility.
            </summary>
            <value>The Interactive cursor visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.InteractiveCursorSymbolTemplate">
            <summary>
            Gets or Sets the InteractiveCusorSymbol Template
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalLabelVisibility">
            <summary>
            Gets or sets the vertical label visibility.
            </summary>
            <value>The vertical label visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.IsOpen">
            <summary>
            Gets or sets the vertical label visibility.
            </summary>
            <value>The vertical label visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.HorizontalLine">
            <summary>
            Gets or sets the horizontal line.
            </summary>
            <value>The horizontal line.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.VerticalLine">
            <summary>
            Gets or sets the vertical line.
            </summary>
            <value>The vertical line.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.Selectedseries">
            <summary>
            Gets or sets the chartseries.
            </summary>
            <value>The chartseries.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.chartarea">
            <summary>
            Gets or sets the chartarea.
            </summary>
            <value>The chartarea.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.LeftPosition">
            <summary>
             Gets or Sets the Leftposition of the InteractiveCursorSymbol Canvas
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursor.TopPosition">
            <summary>
            Gets or Sets the Top position of the InteractiveCursorSymbol Canvas
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.InteractiveCursor.LocationChanged">
            <summary>
            Event for LocationChanged in InteractiveCursor
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.InteractiveCursor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.InteractiveCursorLabelContent">
            <summary>
            Represents the class for InteractiveCursorLabelContent
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursorLabelContent.DataPoint">
            <summary>
            Get and Set the DataPointProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursorLabelContent.X">
            <summary>
            Get and Set the X property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursorLabelContent.Y">
            <summary>
            Get and Set the Y property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.InteractiveCursorLabelContent.Series">
            <summary>
            Get and Set the Series Property
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.InteractiveCursorLabelContent.PropertyChanged">
            <summary>
            Event for PropertyChanged in InteractiveCursorLabelContent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SyncInteractiveCursor">
            <summary>
            Class represents Cursor in SyncInteractivecursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.BindWithMouseMoveOnSegmentProperty">
            <summary>
            Identifies the BindWithMoseMoveOnSegment, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.IsBindWithSegmentProperty">
            <summary>
             Identifies the IsBindWithSegment, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.CursorVisibilityProperty">
            <summary>
             Identifies the CursorVisibility, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.CursorStrokeThicknessProperty">
            <summary>
             Identifies the CursorStrokeThickness, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.VerticalCursorStrokeProperty">
            <summary>
             Identifies the VerticalCursorStroke, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.HorizontalCursorStrokeProperty">
            <summary>
             Identifies the HorizontalCursorStroke, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.LabelVisibilityProperty">
            <summary>
             Identifies the LabelVisibility, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.LabelBackgroundProperty">
            <summary>
             Identifies the LabelBackground, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.LabelForegroundProperty">
            <summary>
             Identifies the LabelForeground, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.VerticalCursorLabelContentProperty">
            <summary>
             Identifies the VerticalCursorLabelContent, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.OffsetYProperty">
            <summary>
             Identifies the OffsetY, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.OffsetXProperty">
            <summary>
             Identifies the OffsetX, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.XValueProperty">
            <summary>
             Identifies the XValue, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.YValueProperty">
            <summary>
             Identifies the YValue, It is a Dependency Property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.series">
            <summary>
             Identifies the ChartSeries.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.area">
            <summary>
             Identifies the ChartArea.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncInteractiveCursor.m_interactivecursor">
            <summary>
             Identifies the InteractiveCuraor Collections
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncInteractiveCursor.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncInteractiveCursor.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.BindWithMouseMoveOnSegment">
            <summary>
            Gets or sets a value indicating whether [bind with mose move on segment].
            </summary>
            <value>
            	<c>true</c> if [bind with mose move on segment]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.IsBindWithSegment">
            <summary>
            Gets or sets a value indicating whether this instance is bind with segment.
            </summary>
            <value>
            	<c>true</c> if this instance is bind with segment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.CursorVisibility">
            <summary>
            Gets or sets the cursor visibility.
            </summary>
            <value>The cursor visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.CursorStrokeThickness">
            <summary>
            Gets or sets the cursor stroke thickness.
            </summary>
            <value>The cursor stroke thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.VerticalCursorStroke">
            <summary>
            Gets or sets the vertical cursor stroke.
            </summary>
            <value>The vertical cursor stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.HorizontalCursorStroke">
            <summary>
            Gets or sets the horizontal cursor stroke.
            </summary>
            <value>The horizontal cursor stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.LabelVisibility">
            <summary>
            Gets or sets the label visibility.
            </summary>
            <value>The label visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.LabelBackground">
            <summary>
            Gets or sets the label background.
            </summary>
            <value>The label background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.LabelForeground">
            <summary>
            Gets or sets the label foreground.
            </summary>
            <value>The label foreground.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.VerticalCursorLabelContent">
            <summary>
            Gets or sets the content of the vertical cursor label.
            </summary>
            <value>The content of the vertical cursor label.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.OffsetY">
            <summary>
            Gets or sets the offset Y.
            </summary>
            <value>The offset Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.OffsetX">
            <summary>
            Gets or sets the offset X.
            </summary>
            <value>The offset X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.XValue">
            <summary>
            Gets or sets the X value.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.YValue">
            <summary>
            Gets or sets the Y value.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.chartseries">
            <summary>
            Gets or sets the chartseries.
            </summary>
            <value>The chartseries.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.chartarea">
            <summary>
            Gets or sets the chartarea.
            </summary>
            <value>The chartarea.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncInteractiveCursor.interactivecursor">
            <summary>
            Gets the interactivecursor.
            </summary>
            <value>The interactivecursor.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnimation">
            <summary>
            The instance for ChartAnimation class is created internally by WPF Chart Sereis to animate segment and Adornments
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnimation"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnimation.SeriesProperty">
            <summary>
            Idenfities Animated Chart Series
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.#ctor(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initialize new instance for Chart Animation class
            </summary>
            <param name="series">The series to animate</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.#ctor">
            <summary>
            Default initialization for Chart Animation class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.AnimateSeries">
            <summary>
            Generate the Opacity animation to hide all the segments first and animation based on the requirements.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.AnimateAdornment(System.Collections.Generic.List{System.Windows.UIElement})">
            <summary>
            Animate the Adornments based on the Animation options selected
            </summary>
            <param name="Elements"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.GenerateSeriesAnimation(System.Windows.Controls.ContentPresenter,System.Windows.Size,System.Windows.Media.Animation.Storyboard)">
            <summary>
            Generate the Animation for each segments and add to the Story board
            </summary>
            <param name="presenter">series presenter</param>
            <param name="avilableSize">total size</param>
            <param name="sb">story board</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.getDoubleAnimation(Syncfusion.Windows.Chart.ChartSegment,System.Windows.DependencyObject,System.Windows.PropertyPath,System.Double,System.Double)">
            <summary>
            Create Double Animation object based the Targment element, From and To
            </summary>
            <param name="segment">Segment to animate</param>
            <param name="targetElement">target element</param>
            <param name="propertypath">property path</param>
            <param name="from">from - double value</param>
            <param name="to">to double value</param>
            <returns>Double Animation</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnimation.getDoubleAnimation(Syncfusion.Windows.Chart.ChartSegment,System.Windows.DependencyObject,System.String,System.Double,System.Double)">
            <summary>
            Create Double Animation object based the Targment element, From and To
            </summary>
            <param name="segment">>Segment to animate</param>
            <param name="targetElement">target element</param>
            <param name="propertypath">property path as string</param>
            <param name="from">from - double value</param>
            <param name="to">to double value</param>
            <returns>Double Animation</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnimation.Storyboard">
            <summary>
            Gets or sets the storyboard contains all the double animation values.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnimation.AdornmentStoryboard">
            <summary>
            Gets or sets the Adorment storyboard animation
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnimation.Series">
            <summary>
            Gets or sets the ChartSeries.
            </summary>
            <value>The ChartSeries.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAccumulationDistribution">
            <summary>
            Class Definition for ChartAccumulationDistribution
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAccumulationDistribution.GetSignalLineColor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObjectobj.</param>
            <returns>The SignalLineInterior brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAccumulationDistribution.SetSignalLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAccumulationDistribution.SignalLineColorProperty">
            <summary>
            Indicates the SignalLineInterior Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAccumulationDistribution.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Contructor of ChartAccumulationDistribution class
            </summary>
            <param name="data"></param>
            <param name="indic"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAverageTrueRange">
            <summary>
            ChartAverageTrueRange class Implementation
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAverageTrueRange.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartAverageTrueRange
            </summary>
            <param name="data"></param>
            <param name="indic"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBollingerBand">
            <summary>
            Class implementation for ChartBollingerBand
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBollingerBand.UpperLineColorProperty">
            <summary>
             Identifies the UpperlineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.GetUpperLineColor(System.Windows.DependencyObject)">
            <summary>
            Return the Brush value from the Dependency object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.SetUpperLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set the UpperLineColor to the corresponding object from the given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBollingerBand.LowerLineColorProperty">
            <summary>
             Identifies the LowerLineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.GetLowerLineColor(System.Windows.DependencyObject)">
            <summary>
            Return the brush value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.SetLowerLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set the LowerLineColor to the corresponding DependencyObject from the given value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBollingerBand.SignalLineColorProperty">
            <summary>
             Identifies the PrimaryAxisStyle dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.GetSignalLineColor(System.Windows.DependencyObject)">
            <summary>
             Return the Brush Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.SetSignalLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set SignalLineColor to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBollingerBand.BollingerMovingAverageProperty">
            <summary>
             Identifies the BollingerMovingAverage dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.GetBollingerMovingAverage(System.Windows.DependencyObject)">
            <summary>
            return the int Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.SetBollingerMovingAverage(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set BollingerMovingAverage to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartBollingBand
            </summary>
            <param name="Points"></param>
            <param name="indicator"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBollingerBand.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data. 
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartExponentialAverage">
            <summary>
            Class implementation for ChartExponentialAverage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartExponentialAverage.GetSignalLineInterior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObjectobj.</param>
            <returns>The SignalLineInterior brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartExponentialAverage.SetSignalLineInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartExponentialAverage.SignalLineInteriorProperty">
            <summary>
            Indicates the SignalLineInterior Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartExponentialAverage.ExponentialAverageProperty">
            <summary>
            Indicates the ExponentialAverage Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartExponentialAverage.GetExponentialAverage(System.Windows.DependencyObject)">
            <summary>
            Return the int Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartExponentialAverage.SetExponentialAverage(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set ExponentialAverage to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartExponentialAverage.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            called when instance created for ChartExponentialAverage
            </summary>
            <param name="Points"></param>
            <param name="indicator"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMACD">
            <summary>
            class implementation for ChartMACD
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMACD.SignalLineInteriorProperty">
            <summary>
             Identifies the SignalLineInterior dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.GetSignalLineInterior(System.Windows.DependencyObject)">
            <summary>
            Return the Brush Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.SetSignalLineInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set SignalLineInterior to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMACD.DivergenceLineColorProperty">
            <summary>
            Identifies the drivergenceLineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.GetDivergenceLineColor(System.Windows.DependencyObject)">
            <summary>
            Return the Brush Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.SetDivergenceLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set drivergenceLineColor to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMACD.ConvergenceLineColorProperty">
            <summary>
            Identifies the ConvergenceLineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.GetConvergenceLineColor(System.Windows.DependencyObject)">
            <summary>
            Return the Brush Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.SetConvergenceLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set ConvergenceLineColor to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartMACD 
            </summary>
            <param name="points"></param>
            <param name="indic"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMACD.AddMACDPoints">
            <summary>
            Method implementation for add points to the collection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMomentum">
            <summary>
            Class implementation for Chartmomentum
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMomentum.MomentumTimeSpanProperty">
            <summary>
             Identifies the MomentumTimeSpan dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMomentum.GetMomentumTimeSpan(System.Windows.DependencyObject)">
            <summary>
            Return the int Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMomentum.SetMomentumTimeSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set MomentumTimeSpan to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMomentum.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartMomentum
            </summary>
            <param name="data"></param>
            <param name="indic"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRelativeStrengthIndex">
            <summary>
            Class implementation for ChartRelativeStrengthIndex
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRelativeStrengthIndex.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartRelativeStrengthIndex
            </summary>
            <param name="data"></param>
            <param name="indic"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSimpleAverage">
            <summary>
            Class implementation for ChartSimpleAverage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSimpleAverage.GetSignalLineInterior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObjectobj.</param>
            <returns>The SignalLineInterior brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSimpleAverage.SetSignalLineInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSimpleAverage.SignalLineInteriorProperty">
            <summary>
            Indicates the SignalLineInterior Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSimpleAverage.MovingAverageProperty">
            <summary>
            Indicates the MovingAverage Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSimpleAverage.GetMovingAverage(System.Windows.DependencyObject)">
            <summary>
            Return the int Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSimpleAverage.SetMovingAverage(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set MovingAverage to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSimpleAverage.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartSimpleAverage
            </summary>
            <param name="VisiblePoints"></param>
            <param name="indicator"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStochastics">
            <summary>
            Class implementation for ChartStochastics
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStochastics.UpperLineColorProperty">
            <summary>
             Identifies the UpperLineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.GetUpperLineColor(System.Windows.DependencyObject)">
            <summary>
            Return UpperLineColor value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.SetUpperLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set UpperLineColor value to the corresponding given DependencyObject from the given Brush value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStochastics.LowerLineColorProperty">
            <summary>
             Identifies the LowerLineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.GetLowerLineColor(System.Windows.DependencyObject)">
            <summary>
            return LowerLineColor value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.SetLowerLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set LowerLineColor value to the corresponding DependencyObject from the given Brush value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStochastics.SignalLineColorProperty">
            <summary>
             Identifies the SignalLineColor dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.GetSignalLineColor(System.Windows.DependencyObject)">
            <summary>
            Return SignalLineColor value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.SetSignalLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Set SignalLineColor value from the given DependencyObject from the given value.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStochastics.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when ChartStochastics class instance Created
            </summary>
            <param name="data"></param>
            <param name="indicator"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTechnicalIndicator">
            <summary>
            Class implementation for ChartTechnicalIndicator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.VisiblePointsProperty">
            <summary>
            Identifies the VisiblePoints dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.MACDAreaProperty">
            <summary>
            Identifies the MACDArea dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.SeriesProperty">
            <summary>
            Identifies the Series dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.IndicatorTypeProperty">
            <summary>
            Identifies the indicatorType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.stocasticsArea">
            <summary>
            Public variable stocasticsArea declaration for access outside of this class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.accumulationArea">
            <summary>
            Public variable accumulationArea declaration for access outside of this class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.rsiArea">
            <summary>
            Public variable rsiArea declaration for access outside of this class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.momentumArea">
            <summary>
            Public variable momentumArea declaration for access outside of this class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTechnicalIndicator.avtArea">
            <summary>
            Public variable avtArea declaration for access outside of this class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTechnicalIndicator.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTechnicalIndicator.#ctor">
            <summary>
            Empty constructor for ChartTechnicalIndicator
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTechnicalIndicator.#ctor(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.IChartData)">
            <summary>
            Called When instance created for ChartTechnicalIndicator
            </summary>
            <param name="series"></param>
            <param name="data"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTechnicalIndicator.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTechnicalIndicator.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTechnicalIndicator.VisiblePoints">
            <summary>
            Get and Set visiblePointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTechnicalIndicator.MACDArea">
            <summary>
            Get and Set MACDAreaProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTechnicalIndicator.Series">
            <summary>
            Get and Set SeriesProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTechnicalIndicator.IndicatorType">
            <summary>
            Get and Set IndicatorTypeProperty
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartTechnicalIndicator.PropertyChanged">
            <summary>
            Occurs when any property value changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTriangularAverage">
            <summary>
            Class implementation for ChartTriangularAverage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTriangularAverage.GetSignalLineColor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObjectobj.</param>
            <returns>The SignalLineInterior brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTriangularAverage.SetSignalLineColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the SignalLineInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTriangularAverage.SignalLineColorProperty">
            <summary>
            Indicates the SignalLineInterior Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTriangularAverage.TriangularAverageProperty">
            <summary>
             Identifies the TriangularAverage dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTriangularAverage.GetTriangularAverage(System.Windows.DependencyObject)">
            <summary>
            Return TriangularAverage value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTriangularAverage.SetTriangularAverage(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set the TriangularAverage value to the given corresponding DependencyObject from the given value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTriangularAverage.#ctor(Syncfusion.Windows.Chart.IChartData,Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for ChartTriangularAverage
            </summary>
            <param name="data"></param>
            <param name="indic"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDataModel">
            <summary>
            Class implementation for ChartDataModel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.#ctor">
            <summary>
            Empty constructor implementation for ChartDataModel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.#ctor(System.Collections.IEnumerable)">
            <summary>
            Called when instance created for ChartDataModel with single arguments.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.#ctor(System.Collections.IEnumerable,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when instance created for ChartDataModel with three arguments.
            </summary>
            <param name="source"></param>
            <param name="pathX"></param>
            <param name="pathsY"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.GetSourceList(System.Object)">
            <summary>
            Return IEnumerable value based on given object
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.BeginInit">
            <summary>
            Method implementation for BeginInit for performance
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.EndInit">
            <summary>
            Method implementation for EndInit for Performance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDataModel._pp">
            <summary>
            Static variable initialization for _pp
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.GetOtherData(System.Object,System.String)">
            <summary>
            Return the object based on given object and string values
            </summary>
            <param name="data"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.GetChartPointsData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return IchartData values based on the given values
            </summary>
            <param name="pathX"></param>
            <param name="pathsY"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.XValueType">
            <summary>
            Get or Set XValueType property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.Source">
            <summary>
            Get or Set Source property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.ChartPoints">
            <summary>
            Get or Set ChartPoints property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.IsIndexed">
            <summary>
            Get and Set IsIndexed Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.PathX">
            <summary>
            get and Set PathX property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.PathsY">
            <summary>
            Get and Set PathY property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.ContentPath">
            <summary>
            Get or Set ContentPath property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.PositionPath">
            <summary>
            Get and Set PositionPath property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDataModel.pp">
            <summary>
            Get or Set PP property
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartDataModel.PropertyChanged">
            <summary>
            Called when property changed in ChartDataModel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PropertyWindow">
            <summary>
            Interaction logic for Window1.xaml
            </summary>
            <summary>
            PropertyWindow
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyWindow.#ctor">
            <summary>
            Called when instance created ProeprtyWindow
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PropertyDialogHeaderConverter">
            <summary>
            Return String value from the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyDialogHeaderConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyDialogHeaderConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyDialogHeaderConverter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaPropertiesView">
            <summary>
            Interaction logic for ChartAreaPropertiesView.xaml
            </summary>
            <summary>
            ChartAreaPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPropertiesView.#ctor">
            <summary>
            Called when Instance created for ChartAreaPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LegendEnableConverter">
            <summary>
            Return bool value based on the given object is legend or not. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LegendEnableConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LegendEnableConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartControlsNameConverter">
            <summary>
            Return the modified  ChartAreasCollection 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartControlsNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartControlsNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisPropertiesView">
            <summary>
            Interaction logic for ChartAxisPropertiesView.xaml
            </summary>
            <summary>
            ChartAxisPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisPropertiesView.#ctor">
            <summary>
            Constructor implementation for ChartAxisPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisPropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisTypeToEnabledConverter">
            <summary>
            Returns bool value based on the valuetype
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisTypeToEnabledConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisTypeToEnabledConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisNameConverter">
            <summary>
            Return modified ChartAxisName in ChartAxesCollection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.BrushToPenConverter">
            <summary>
            Return pen value from the given Brush value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BrushToPenConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BrushToPenConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLegendPropertiesView">
            <summary>
            Interaction logic for ChartLegendPropertiesView.xaml
            </summary>
            <summary>
            ChartLegendPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendPropertiesView.#ctor">
            <summary>
            Called when instance created for ChartLegendPropertiesview class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendPropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLegendNameConverter">
            <summary>
            Return the modified ChartLegend collection from the given values
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertiesView">
            <summary>
            Interaction logic for ChartPropertiesView.xaml
            </summary>
            <summary>
            ChartPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertiesView.#ctor">
            <summary>
            Called when instance created for ChartPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesPropertiesView">
            <summary>
            Interaction logic for ChartSeriesPropertiesView.xaml
            </summary>
            <summary>
            ChartSeriesPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPropertiesView.#ctor">
            <summary>
            Called when instance created for ChartSeriesPropertiesView
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesNameConverter">
            <summary>
            Return the modified ChartSeriesCollection from the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.BasicStatisticalFormulas">
            <summary>
            Represents class for BasicStatisticalFormulas
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Mean(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates mean value of series X values. 
            </summary>
            <param name="series">The name of the Series object that stores the first group's data for which an average is required.</param>
            <returns>Returns a double value that represents the average of all the data points in the given series. </returns>
            <example>
            <p>The following code demonstrate how to get the average of the data points in a series.
            </p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Mean1=BasicStatisticalFormulas.Mean(series1);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Mean1 As Double
            Mean1=BasicStatisticalFormulas.Mean(series1)
            </code>
            </example>
            <remarks>
            <p>Use this method to calculate the mean (i.e. average) of the points stored in a series.</p>
            <p>If the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown. </p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Mean(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates mean value of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the first group's data for which an average is required.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            Returns a double value that represents the average of all the data points in the given series.
            </returns>
            <example>
               <p>The following code demonstrate how to get the average of the data points in a series.
            </p>
               <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Mean1=BasicStatisticalFormulas.Mean(series1, 0);
            </code>
             <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Mean1 As Double
            Mean1=BasicStatisticalFormulas.Mean(series1, 0)
            </code>
            </example>
            <remarks>
                <p>Use this method to calculate the mean (i.e. average) of the points stored in a series.</p>
                <p>If the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown. </p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.VarianceUnbiasedEstimator(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates variance of series X values. 
            </summary>
            <param name="series">The name of the Series object that stores the group of data. 
            </param>
            <returns>A double that represents the variance within the group of data.
            </returns>
            <example>
            <p>The following Code demonstrate how to gets the VarianceUnBasedEstimator of the data points in a series</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double VarianceUnBased1= Statistics.BasicStatisticalFormulas.VarianceUnBiasedEstimator(series);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim VarianceUnBased1 As Double
            VarianceUnBased1=BasicStatisticalFormulas.VarianceUnBiasedEstimator(series)
            </code>
            </example>
            <remarks>
            <p>This method estimates the variance for a sample.</p>
            <p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.VarianceUnbiasedEstimator(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            A double that represents the variance within the group of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the VarianceUnBasedEstimator of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double VarianceUnBased1= Statistics.BasicStatisticalFormulas.VarianceUnBiasedEstimator(series, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim VarianceUnBased1 As Double
            VarianceUnBased1=BasicStatisticalFormulas.VarianceUnBiasedEstimator(series, 0)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.VarianceBiasedEstimator(Syncfusion.Windows.Chart.ChartSeries)">
             <summary>
             Calculates variance of series X values. 
             </summary>
             <param name="series">The name of the Series object that stores the group of data. 
            </param>
             <returns>A double that represents the variance within the group of data.
            </returns>
             /// <example>
             <p>The following Code demonstrate how to gets the VarianceBasedEstimator of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double VarianceBased1= Statistics.BasicStatisticalFormulas.VarianceBiasedEstimator(series);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim VarianceBased1 As Double
            	VarianceBased1=BasicStatisticalFormulas.VarianceBiasedEstimator(series)
            	</code>
             </example>
             <remarks>
             <p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.VarianceBiasedEstimator(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            A double that represents the variance within the group of data.
            </returns>
            /// 
            <example>
            	<p>The following Code demonstrate how to gets the VarianceBasedEstimator of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double VarianceBased1= Statistics.BasicStatisticalFormulas.VarianceBiasedEstimator(series, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim VarianceBased1 As Double
            VarianceBased1=BasicStatisticalFormulas.VarianceBiasedEstimator(series, 0)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Variance(Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
             <summary>
             Calculates variance of series X values. 
             </summary>
             <param name="series">The name of the Series object that stores the group of data. 
            </param>
             <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population. </param>
             <returns>A double that represents the variance within the group of data.
            </returns>
             <example>
             <p>The following Code demonstrate how to gets the Variance of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Variance1= Statistics.BasicStatisticalFormulas.Variance(series,true);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Variance1 As Double
            	Variance1=BasicStatisticalFormulas.Variance(series,true)
            	</code>
             </example>
             <remarks>
             <p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Variance(Syncfusion.Windows.Chart.ChartSeries,System.Int32,System.Boolean)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population.</param>
            <returns>
            A double that represents the variance within the group of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Variance of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Variance1= Statistics.BasicStatisticalFormulas.Variance(series,true);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Variance1 As Double
            Variance1=BasicStatisticalFormulas.Variance(series,true)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the variance for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.StandardDeviation(Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
             <summary>
             Calculates variance of series X values. 
             </summary>
             <param name="series">The name of the Series object that stores the group of data. 
            </param>
             <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population. </param>
             <returns>A double that represents the Standard Deviation within the group of data.
             </returns>
             <example>
             <p>The following Code demonstrate how to gets the Standard Deviation of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Standard1= Statistics.BasicStatisticalFormulas.StandartDeviation(series,false);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Standard1 As Double
            	Standard1=BasicStatisticalFormulas.StandartDeviation(series,false)
            	</code>
             </example>
             <remarks>
             <p>This method estimates the Standard Deviation for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.StandardDeviation(Syncfusion.Windows.Chart.ChartSeries,System.Int32,System.Boolean)">
            <summary>
            Calculates variance of series Y values.
            </summary>
            <param name="series">The name of the Series object that stores the group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <param name="sampleVariance">True if the data is a sample of a population, false if it is the entire population.</param>
            <returns>
            A double that represents the Standard Deviation within the group of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Standard Deviation of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Standard1= Statistics.BasicStatisticalFormulas.StandardDeviation(series,0,false);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Standard1 As Double
            Standard1=BasicStatisticalFormulas.StandardDeviation(series,0,false)
            </code>
            </example>
            <remarks>
            	<p>This method estimates the Standard Deviation for a sample.</p>
            	<p>If the specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Covariance(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
             <summary>
             Calculates covariance of series X values. 
             </summary>
             <param name="series1">The name of the Series object that stores the first group's data. 
            </param>
             <param name="series2"> The name of the Series object that stores the second group's data.
             An exception will be raised if the input series do not have the same number of data points. </param>
             <returns>A double that represents the covariance value between the two groups of data.
            </returns>
             <example>
             <p>The following Code demonstrate how to gets the Covariance of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Covariance1= Statistics.BasicStatisticalFormulas.Covariance(series1,series2);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Covariance1 As Double
            	Covariance1=BasicStatisticalFormulas.Covariance(series1,series2)
            	</code>
             </example>
             <remarks>
             <p>This method returns the average of the product of deviations of the data points from their respective means.</p>
             <p>Covariance is a measure of the relationship between two ranges of data, and can be used to determine whether two ranges of data move together - that is, whether large values of one set are associated with large values of the other (positive covariance), whether small values of one set are associated with large values of the other (negative covariance), or whether values in both sets are unrelated (covariance near zero).</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Covariance(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates covariance of series Y values.
            </summary>
            <param name="series1">The name of the Series object that stores the first group's data.</param>
            <param name="series2">The name of the Series object that stores the second group's data.
            An exception will be raised if the input series do not have the same number of data points.</param>
            <param name="yIndex">Index of the Y index.</param>
            <returns>
            A double that represents the covariance value between the two groups of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Covariance of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Covariance1= Statistics.BasicStatisticalFormulas.Covariance(series1,series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Covariance1 As Double
            Covariance1=BasicStatisticalFormulas.Covariance(series1,series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method returns the average of the product of deviations of the data points from their respective means.</p>
            	<p>Covariance is a measure of the relationship between two ranges of data, and can be used to determine whether two ranges of data move together - that is, whether large values of one set are associated with large values of the other (positive covariance), whether small values of one set are associated with large values of the other (negative covariance), or whether values in both sets are unrelated (covariance near zero).</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Correlation(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
             <summary>
             Calculates correlation of series X values. 
             </summary>
             <param name="series1">The name of the Series object that stores the first group's data. 
            </param>
             <param name="series2"> The name of the Series object that stores the second group's data.
             An exception will be raised if the input series do not have the same number of data points. </param>
             <returns>A double that represents the Correlation value between the two groups of data.
             </returns>
             <example>
             <p>The following Code demonstrate how to gets the Correlation of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Correlation1= Statistics.BasicStatisticalFormulas.Correlation(series1,series2);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Correlation1 As Double
            	Correlation1=BasicStatisticalFormulas.Correlation(series1,series2)
            	</code>
             </example>
             <remarks>
             <p>Correlation measures the relationship between two data sets that are scaled to be independent of the unit of measurement. This correlation method returns the covariance of two data sets divided by the product of their standard deviations, and always ranges from -1 to 1.
             Use correlation to determine whether two ranges of data move together that is, whether large values of one set are associated with large values of the other (positive correlation), whether small values of one set are associated with large values of the other (negative correlation), or whether values in both sets are unrelated (correlation near zero).</p>
             <p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Correlation(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates correlation of series Y values.
            </summary>
            <param name="series1">The name of the Series object that stores the first group's data.</param>
            <param name="series2">The name of the Series object that stores the second group's data.
            An exception will be raised if the input series do not have the same number of data points.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            A double that represents the Correlation value between the two groups of data.
            </returns>
            <example>
            	<p>The following Code demonstrate how to gets the Correlation of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Correlation1= Statistics.BasicStatisticalFormulas.Correlation(series1,series2,0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Correlation1 As Double
            Correlation1=BasicStatisticalFormulas.Correlation(series1,series2,0)
            </code>
            </example>
            <remarks>
            	<p>Correlation measures the relationship between two data sets that are scaled to be independent of the unit of measurement. This correlation method returns the covariance of two data sets divided by the product of their standard deviations, and always ranges from -1 to 1.
            Use correlation to determine whether two ranges of data move together that is, whether large values of one set are associated with large values of the other (positive correlation), whether small values of one set are associated with large values of the other (negative correlation), or whether values in both sets are unrelated (correlation near zero).</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown. An exception will also be raised if the series do not have the same number of data points.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Median(Syncfusion.Windows.Chart.ChartSeries)">
             <summary>
             Calculates Median of series X values. 
             </summary>
             <param name="series">The input series</param>
             <example>
             <p>The following Code demonstrate how to gets the median of the data points in a series</p>
             <code lang="C#">
             using Syncfusion.Windows.Forms.Chart.Statistics;
            	............
            	double Median1= Statistics.BasicStatisticalFormulas.Median(series1);
             </code>
             <code lang="VB">
             Imports Syncfusion.Windows.Forms.Chart.Statistics
            	.............
            	Dim Median1 As Double
            	Median1=BasicStatisticalFormulas.Median(series1)
            	</code>
             </example>
             <remarks>
             <p>Use this method to calculate the median of the points stored in a series.
            	The median is the middle value of a sample set, where half of the members are greater in size and half the members are lesser in size.</p>
            <p>if the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown.</p>
             </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Median(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates Median of series Y values.
            </summary>
            <param name="series">The input series</param>
            <param name="yIndex">Index of the Y index.</param>
            <returns></returns>
            <example>
            	<p>The following Code demonstrate how to gets the median of the data points in a series</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ............
            double Median1= Statistics.BasicStatisticalFormulas.Median(series1, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            .............
            Dim Median1 As Double
            Median1=BasicStatisticalFormulas.Median(series1, 0)
            </code>
            </example>
            <remarks>
            	<p>Use this method to calculate the median of the points stored in a series.
            The median is the middle value of a sample set, where half of the members are greater in size and half the members are lesser in size.</p>
            	<p>if the specified input series does not exist in the SeriesCollection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Anova(System.Double,Syncfusion.Windows.Chart.ChartSeries[])">
            <summary>
            Performs Anova (Analysis of variance test) on input series. All series should have the same 
            number of points. The tests null hypothesis assumes that all series means are equal and 
            that all variances of series are also equal. The alternative to null hypothesis is that there 
            is one inequality between means of series. For better understanding of this test, we recommend to read:
            Dowdy, S. M.
            Statistics for research / Shirley Dowdy, Stanley Weardon, Daniel Chilko.
            p. cm. – (Wiley series in probability and statistics; 1345)
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="inputSeries">Series array</param>
            <returns> AnovaResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate AnovaTest</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            AnovaResult ar = BasicStatisticalFormulas.Anova(0.5,new ChartSeries[]{ series1, series2, series3} );
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ar As AnovaResult = BasicStatisticalFormulas.Anova(0.5, New ChartSeries(){ series1, series2, series3})
            </code> 
            </example> 
            <remarks>
            <p>An ANOVA test is used to test the difference between the means of two or more groups of data.</p>
            <p>Two or more groups of data (series) must be specified, and each series must have the same number of data points otherwise an exception will be raised.</p>
            <p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.Anova(System.Double,Syncfusion.Windows.Chart.ChartSeries[],System.Int32)">
            <summary>
            Performs Anova (Analysis of variance test) on input series. All series should have the same
            number of points. The tests null hypothesis assumes that all series means are equal and
            that all variances of series are also equal. The alternative to null hypothesis is that there
            is one inequality between means of series. For better understanding of this test, we recommend to read:
            Dowdy, S. M.
            Statistics for research / Shirley Dowdy, Stanley Weardon, Daniel Chilko.
            p. cm. – (Wiley series in probability and statistics; 1345)
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="inputSeries">Series array</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>AnovaResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate AnovaTest</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            AnovaResult ar = BasicStatisticalFormulas.Anova(0.5,new ChartSeries[]{ series1, series2, series3}, 0 );
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ar As AnovaResult = BasicStatisticalFormulas.Anova(0.5, New ChartSeries(){ series1, series2, series3}, 0)
            </code>
            </example>
            <remarks>
            	<p>An ANOVA test is used to test the difference between the means of two or more groups of data.</p>
            	<p>Two or more groups of data (series) must be specified, and each series must have the same number of data points otherwise an exception will be raised.</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.FTest(System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Performs F test on input series. This test looks whether first series variance is smaller than second series variance.
            If FValue in FTestResult is bigger than FCriticalValueOneTail than we can't deduce that it is truly smaller.
            The test tests ratio of two variances s1^2/s2^2 which is proved to be distributed 
            according F distribution. The null hypothesis is that variances are equal.
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> FTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate FTest.</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            FTestResult ftr = BasicStatisticalFormulas.FTest(0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ftr As FTestResult = BasicStatisticalFormulas.FTest(0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method returns the results of the F-test using an FTestResult object.</p>
            <p>FTest performs a two-sample F-test to compare two population variances. For example, it can be used to determine whether the time scores in a swimming meet have a difference in variance for samples from two teams.</p>
            <p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.FTest(System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs F test on input series. This test looks whether first series variance is smaller than second series variance.
            If FValue in FTestResult is bigger than FCriticalValueOneTail than we can't deduce that it is truly smaller.
            The test tests ratio of two variances s1^2/s2^2 which is proved to be distributed
            according F distribution. The null hypothesis is that variances are equal.
            </summary>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the y.</param>
            <returns>FTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate FTest.</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            FTestResult ftr = BasicStatisticalFormulas.FTest(0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ftr As FTestResult = BasicStatisticalFormulas.FTest(0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method returns the results of the F-test using an FTestResult object.</p>
            	<p>FTest performs a two-sample F-test to compare two population variances. For example, it can be used to determine whether the time scores in a swimming meet have a difference in variance for samples from two teams.</p>
            	<p>If a specified input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.TTestPaired(System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Performs T test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> TTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate TTestPaired</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestPaired(0.2, 0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestPaired (0.2, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a paired two-sample student's t-test to determine whether a sample's means are distinct. This form of the t-test does not assume that the variances of both populations are equal.</p>
            <p>Use a paired test when there is a natural pairing of observations in the samples, such as a sample group that is tested twice (e.g. before and after an experiment).</p>
            <p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.TTestPaired(System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs T test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>TTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate TTestPaired</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestPaired(0.2, 0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestPaired (0.2, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a paired two-sample student's t-test to determine whether a sample's means are distinct. This form of the t-test does not assume that the variances of both populations are equal.</p>
            	<p>Use a paired test when there is a natural pairing of observations in the samples, such as a sample group that is tested twice (e.g. before and after an experiment).</p>
            	<p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.TTestEqualVariances(System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Performs T test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be equal. This is a key feature of the test, because 
            there is no exact T test for two samples from populations with different variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> TTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate TTest Equal Variance</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a T test for two groups of data, and assumes equal variances between the two groups (i.e. series).</p>
            <p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.TTestEqualVariances(System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs T test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be equal. This is a key feature of the test, because
            there is no exact T test for two samples from populations with different variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y index.</param>
            <returns>TTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate TTest Equal Variance</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestEqualVariances (0.2, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a T test for two groups of data, and assumes equal variances between the two groups (i.e. series).</p>
            	<p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.TTestUnEqualVariances(System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Performs T test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <returns> TTestResult class </returns>
            <example>
            <p>The following code demonstrate how to calculate TTest UnEqual Variance</p>
            <code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2);
            </code>
            <code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a T test for two groups of data, and assumes unequal variances between the two groups (i.e. series).</p>
            <p>This analysis tool is referred to as a heteroscedastic t-test, and can be used when the groups under study are distinct. Use a paired test when there is one group before and after a treatment.</p>
            <p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.TTestUnEqualVariances(System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs T test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations.
            The population variances are assumed to be unequal. So this method is not statistically exact,
            but it works well, and sometimes is called robust T test.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data.</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>TTestResult class</returns>
            <example>
            	<p>The following code demonstrate how to calculate TTest UnEqual Variance</p>
            	<code lang="C#">
            using Syncfusion.Windows.Forms.Chart.Statistics;
            ........
            TTestResult ttr = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2, 0);
            </code>
            	<code lang="VB">
            Imports Syncfusion.Windows.Forms.Chart.Statistics
            ........
            Dim ttr As TTestResult = BasicStatisticalFormulas.TTestUnEqualVariances (0.2, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a T test for two groups of data, and assumes unequal variances between the two groups (i.e. series).</p>
            	<p>This analysis tool is referred to as a heteroscedastic t-test, and can be used when the groups under study are distinct. Use a paired test when there is one group before and after a treatment.</p>
            	<p>If either input series does not exist in the series collection at the time of the method call an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.ZTest(System.Double,System.Double,System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Performs Z test on input series. This test assumes that 
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations 
            with known variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="varianceFirstGroup">Variance of the first series population.</param>
            <param name="varianceSecondGroup">Variance of the second series population.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data..</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data..</param>
            <returns>ZTestResult Class</returns>
            <example>
            <p>The following code demonstrate how to calculate Ztest</p>
            <code lang="C#">
            ZTestResult ztr = BasicStatisticalFormulas.ZTest( Convert.ToDouble(TextBox6.Text.ToString()),sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries,sqrtVarianceOfSecondSeries* sqrtVarianceOfSecondSeries,0.05,series1,series2);
            </code>
            <code lang="VB">
            Dim ztr As ZTestResult = BasicStatisticalFormulas.ZTest(Convert.ToDouble(TextBox6.Text.ToString()), sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries, sqrtVarianceOfSecondSeries*sqrtVarianceOfSecondSeries, 0.05, series1, series2)
            </code> 
            </example>
            <remarks>
            <p>This method performs a Z test for two groups of data, and returns the results using a ZTestResult object.</p>
            <p>Two and only two groups of data must be specified. If either input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.ZTest(System.Double,System.Double,System.Double,System.Double,Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Performs Z test on input series. This test assumes that
            there is some difference between mean values of input series populations.
            Input series are regarded as samples from normally distributed populations
            with known variances.
            </summary>
            <param name="hypothesizedMeanDifference">Difference between populations means.</param>
            <param name="varianceFirstGroup">Variance of the first series population.</param>
            <param name="varianceSecondGroup">Variance of the second series population.</param>
            <param name="probability">Probability that gives confidence level. (Typically 0.05)</param>
            <param name="firstInputSeries">The name of the series that stores the first group of data..</param>
            <param name="secondInputSeries">The name of the series that stores the second group of data..</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>ZTestResult Class</returns>
            <example>
            	<p>The following code demonstrate how to calculate Ztest</p>
            	<code lang="C#">
            ZTestResult ztr = BasicStatisticalFormulas.ZTest( Convert.ToDouble(TextBox6.Text.ToString()),sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries,sqrtVarianceOfSecondSeries* sqrtVarianceOfSecondSeries,0.05,series1,series2, 0);
            </code>
            	<code lang="VB">
            Dim ztr As ZTestResult = BasicStatisticalFormulas.ZTest(Convert.ToDouble(TextBox6.Text.ToString()), sqrtVarianceOfFirstSeries*sqrtVarianceOfFirstSeries, sqrtVarianceOfSecondSeries*sqrtVarianceOfSecondSeries, 0.05, series1, series2, 0)
            </code>
            </example>
            <remarks>
            	<p>This method performs a Z test for two groups of data, and returns the results using a ZTestResult object.</p>
            	<p>Two and only two groups of data must be specified. If either input series does not exist in the series collection at the time of the method call than an exception will be thrown.</p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.DifferenceX(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates new series by substracting corresponding values of second series from firs series. 
            </summary>
            <param name="series1">The name of the series that stores the first group of data.</param>
            <param name="series2">The name of the series that stores the second group of data.</param>
            <returns>Return difference between the two series points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BasicStatisticalFormulas.DifferenceY(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Calculates new series by substracting corresponding values of second series from firs series.
            </summary>
            <param name="series1">The name of the series that stores the first group of data.</param>
            <param name="series2">The name of the series that stores the second group of data.</param>
            <param name="yIndex">Index of the Y value.</param>
            <returns>
            Return difference between the two series points
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ZTestResult">
            <summary>
            The result of statistical Z test is stored in this class.
            If the Z value is closer to 0.0 than ZCriticalValueTwoTail or 
            even ZCriticalValueOneTail, then we can't deduce that D(hypothesized difference) is not 
            good mean value difference. In other case ( ZCriticalValueTwoTail is closer to 0.0
            than ZValue), there is a huge probability that  hypothesized difference D hadn't been 
            chosen correctly.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ZTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ZTestResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.FirstSeriesMean">
            <summary>
            Gets first series mean value. Series represents sample from studied population.
            </summary>
            <value>The first series mean.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.FirstSeriesVariance">
            <summary>
            Gets first series variance. Series represents sample from studied population.
            </summary>
            <value>The first series variance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.ProbabilityZOneTail">
            <summary>
            Gets the probability that the random variable has values at the tail, assuming that null hypothesis is true.
            </summary>
            <value>The probability Z one tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.ProbabilityZTwoTail">
            <summary>
            Gets the probability that the random variable has values at the tails, assuming that null hypothesis is true.
            </summary>
            <value>The probability Z two tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.SecondSeriesMean">
            <summary>
            Gets second series mean value. Series represents sample from studied population.
            </summary>
            <value>The second series mean.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.SecondSeriesVariance">
            <summary>
            Gets second series variance. Series represents sample from studied population.
            </summary>
            <value>The second series variance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.ZCriticalValueOneTail">
            <summary>
            Gets critical value of Z which corresponds to Alpha probability.
            The area under normal probability density curve of tail is equal to alpha probability.
            </summary>
            <value>The Z critical value one tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.ZCriticalValueTwoTail">
            <summary>
            Gets critical value of Z which corresponds to Alpha probability.
            The area under normal probability density curve of two symmetrical tails is equal to alpha probability.
            </summary>
            <value>The Z critical value two tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ZTestResult.ZValue">
            <summary>
            Gets calculated z value. ( Value of normally distributed random variable with mean=0, and variance=1 ).
            </summary>
            <value>The Z value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TTestResult">
            <summary>
            The result of statistical T test is stored in this class.
            If the T value is closer to 0.0 than TCriticalValueTwoTail or 
            even TCriticalValueOneTail, then we can't deduce that D(hypothesized difference) is not 
            good mean value difference. In other case ( TCriticalValueTwoTail is closer to 0.0 
            than TValue), there is a huge probability that  hypothesized difference D hadn't been 
            chosen correctly.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.TTestResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.DegreeOfFreedom">
            <summary>
            Gets number of degrees of freedom of T variable student's distribution.
            </summary>
            <value>The degree of freedom.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.FirstSeriesMean">
            <summary>
            Gets first series mean value. Series represents sample from studied population.
            </summary>
            <value>The first series mean.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.FirstSeriesVariance">
            <summary>
            Gets first series variance. Series represents sample from studied population.
            </summary>
            <value>The first series variance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.ProbabilityTOneTail">
            <summary>
            Gets the probability that the random variable has values at the tail, assuming that null hypothesis is true.
            </summary>
            <value>The probability T one tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.ProbabilityTTwoTail">
            <summary>
            Gets the probability that the random variable has values at the tails, assuming that null hypothesis is true.
            </summary>
            <value>The probability T two tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.SecondSeriesMean">
            <summary>
            Gets second series mean value. Series represents sample from studied population.
            </summary>
            <value>The second series mean.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.SecondSeriesVariance">
            <summary>
            Gets second series variance. Series represents sample from studied population.
            </summary>
            <value>The second series variance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.TCriticalValueOneTail">
            <summary>
            Gets critical value of T which corresponds to Alpha probability.
            The area under normal probability density curve of tail is equal to alpha probability.
            </summary>
            <value>The T critical value one tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.TCriticalValueTwoTail">
            <summary>
            Gets critical value of T which corresponds to Alpha probability.
            The area under normal probability density curve of two symmetrical tails is equal to alpha probability.
            </summary>
            <value>The T critical value two tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TTestResult.TValue">
            <summary>
            Gets calculated T value. ( Value of normally distributed random variable with mean=0, and variance=1 ).
            </summary>
            <value>The T value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FTestResult">
            <summary>
            The result of statistical F test is stored in this class.
            If the F value is closer to 1.0 than FCriticalValueOneTail, then we can't deduce that first variance 
            is smaller than second. But if F value is bigger than 1.0, then replace the series and run the 
            test again. Maybe second series variance is smaller than first.
            Note: That if the second test also fails, this doesn't automatically prove that your variances
            are equal.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.FTestResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.FirstSeriesMean">
            <summary>
            Gets first series mean value. Series represents sample from studied population.
            </summary>
            <value>The first series mean.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.FirstSeriesVariance">
            <summary>
            Gets first series variance. Series represents sample from studied population.
            </summary>
            <value>The first series variance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.ProbabilityFOneTail">
            <summary>
            Gets the probability that the random variable has values at the tail, assuming that null hypothesis is true.
            </summary>
            <value>The probability F one tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.SecondSeriesMean">
            <summary>
            Gets second series mean value. Series represents sample from studied population.
            </summary>
            <value>The second series mean.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.SecondSeriesVariance">
            <summary>
            Gets second series variance. Series represents sample from studied population.
            </summary>
            <value>The second series variance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.FCriticalValueOneTail">
            <summary>
            Gets critical value of F which corresponds to Alpha probability.
            The area under normal probability density curve of tail is equal to alpha probability.
            </summary>
            <value>The F critical value one tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FTestResult.FValue">
            <summary>
            Gets calculated F value. ( Value of normally distributed random variable with mean=0, and variance=1 ).
            </summary>
            <value>The F value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnovaResult">
            <summary>
            Result of Anova test is stored in this class.
            If AnovaResult.FRatio is farther from unity than FCritical value, then the null hypothesis
            (that all means are equal) fails.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnovaResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.AnovaResult"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.DegreeOfFreedomBetweenGroups">
            <summary>
            Gets degrees of freedom between groups. This is simply a - 1, where a is number of series in anova test.
            </summary>
            <value>The degree of freedom between groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.DegreeOfFreedomTotal">
            <summary>
            Gets total degrees of freedom. This is simply n*a - 1, where a is number of series in anova test, and n is number of points in series.
            </summary>
            <value>The degree of freedom total.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.DegreeOfFreedomWithinGroups">
            <summary>
            Gets degrees of freedom within groups ( returns a*(n - 1) ).
            </summary>
            <value>The degree of freedom within groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.FCriticalValue">
            <summary>
            Gets critical value of FRatio which corresponds to specified confidence probability.
            </summary>
            <value>The F critical value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.FRatio">
            <summary>
            Gets FRatio ( ratio of between group variance and within group variance). This ratio should be
            compared with FCritical value, and if it is farther from unity than FCritical value, then the null hypothesis
            (that all means are equal) fails.
            </summary>
            <value>The F ratio.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.MeanSquareVarianceBetweenGroups">
            <summary>
            Gets mean square variance between groups.
            </summary>
            <value>The mean square variance between groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.MeanSquareVarianceWithinGroups">
            <summary>
            Gets mean square variance within groups.
            </summary>
            <value>The mean square variance within groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.SumOfSquaresBetweenGroups">
            <summary>
            Gets sum of squares between groups.
            </summary>
            <value>The sum of squares between groups.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.SumOfSquaresTotal">
            <summary>
            Gets total sum of squares.
            </summary>
            <value>The sum of squares total.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnovaResult.SumOfSquaresWithinGroups">
            <summary>
            Gets sum of squares within groups.
            </summary>
            <value>The sum of squares within groups.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.UtilityFunctions">
            <summary>
            Represents UtilityFunctions class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.GammaLn(System.Double)">
            <summary>
            Natural logarithm of gamma function ( for y > 0 ).
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.Gamma(System.Double)">
            <summary>
            Gamma function ( for y > 0 ).
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.Factorial(System.Int32)">
            <summary>
            Factorial n! ( for n >= 0 ).
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.FactorialLn(System.Int32)">
            <summary>
            Logarithm of factorial n! ( for n >= 0 ).
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Binomial coefficient n!/(k!(n-k)!) ( for n >= k >= 0 ).
            </summary>
            <param name="n"></param>
            <param name="k"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Logarithm of Beta function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.Beta(System.Double,System.Double)">
            <summary>
            Beta function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.NormalDistributionDensity(System.Double,System.Double,System.Double)">
            <summary>
            Returns Normal Distribution density function.
            </summary>
            <param name="x">Value at which the distribution density is evaluated.</param>
            <param name="m">Expected value of distribution (Mean value)</param>
            <param name="sigma">Variance of distribution</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.NormalDistributionDensityLn(System.Double,System.Double,System.Double)">
            <summary>
            Returns Logarithm of Normal Distribution density function.
            </summary>
            <param name="x">Value at which the distribution density is evaluated.</param>
            <param name="m">Expected value of distribution (Mean value)</param>
            <param name="sigma">Variance of distribution</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.Erf(System.Double)">
            <summary>
            Error function.
            </summary>
            <param name="x">.</param>
            <returns>Returns error function.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.InverseNormalDistribution(System.Double)">
            <summary>
            Inverse Normal Distribution function.
            This is rational approximation of Normal Distribution function.
            The absolute value of the relative error is less than 1.15·10-9 in the entire region.
            Lower tail quantile for standard normal distribution function.
            This function returns an approximation of the inverse cumulative
            standard normal distribution function.  I.e., given P, it returns
            an approximation to the X satisfying P = Pr{Z is smaller than X} where Z is a
            random variable from the standard normal distribution.
            </summary>
            <param name="p">Probability at which function is evaluated. p must be in ( 0,1 ) range. </param>
            <returns> Returns Inverse cumulative distribution.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.NormalDistribution(System.Double)">
            <summary>
            Normal Distribution function.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <returns> Returns cumulative distribution. ( Returns probability that normally distributed random variable (X - mean)/sigma is smaller than x.).</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.InverseErf(System.Double)">
            <summary>
            Inverse Error function.
            This is rational approximation of erf function.
            The absolute value of the relative error is less than 1.15·10-9 in the entire region.
            </summary>
            <param name="x">value x is in (-1 , 1) range. </param>
            <returns>Returns Value that corresponds to given x. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.GammaCumulativeDistribution(System.Double,System.Double)">
            <summary>
            Returns cumulative gamma distribution. http://en.wikipedia.org/wiki/Gamma_distribution
            ( for x >= 0, a > 0 )
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns>Returns cumulative gamma distribution. (http://en.wikipedia.org/wiki/Gamma_distribution) ( for x >= 0, a > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.BetaCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns cumulative beta distribution. 
            ( for x >= 0, a > 0, b > 0 )
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Returns cumulative beta distribution. http://en.wikipedia.org/wiki/Beta_distribution) ( for x >= 0, a > 0, b > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.InverseBetaCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns inverse cumulative beta distribution. 
            ( for 1 >= p >= 0 , a > 0, b > 0 )
            </summary>
            <param name="a">Beta function parameter </param>
            <param name="b">Beta function parameter</param>
            <param name="p">Probability</param>
            <returns>Returns inverse cumulative beta distribution. http://en.wikipedia.org/wiki/Beta_distribution) ( for p in [0,1], a > 0, b > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.TCumulativeDistribution(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns cumulative T distribution. 
            ( for degreeOfFreedom > 0 )
            </summary>
            <param name="tValue"></param>
            <param name="degreeOfFreedom"></param>
            <param name="oneTail"></param>
            <returns>Returns T cumulative distribution. http://en.wikipedia.org/wiki/T_distribution) ( for degreeOfFreedom > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.InverseTCumulativeDistribution(System.Double,System.Double,System.Boolean)">
            <summary>
            Inverse cumulative T distribution. 
            ( for degreeOfFreedom > 0 )
            </summary>
            <param name="p">Probability (must be in range [0, 1]. )</param>
            <param name="degreeOfFreedom"></param>
            <param name="oneTail"></param>
            <returns>Inverse T cumulative distribution. http://en.wikipedia.org/wiki/T_distribution) ( for degreeOfFreedom > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.FCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns cumulative F distribution. 
            ( for firstDegreeOfFreedom >= 1 and firstDegreeOfFreedom >= 1 )
            </summary>
            <param name="fValue"></param>
            <param name="firstDegreeOfFreedom"></param>
            <param name="secondDegreeOfFreedom"></param>
            <returns>Returns T cumulative distribution. http://en.wikipedia.org/wiki/F_distribution) ( for degreeOfFreedom > 0 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.InverseFCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Inverse cumulative F distribution. 
            ( for firstDegreeOfFreedom >= 1 and firstDegreeOfFreedom >= 1 )
            </summary>
            <param name="p">Probability (must be in range [0, 1]. )</param>
            <param name="firstDegreeOfFreedom"></param>
            <param name="secondDegreeOfFreedom"></param>
            <returns>Inverse F cumulative distribution. http://en.wikipedia.org/wiki/F_distribution) ( for firstDegreeOfFreedom >= 1 and firstDegreeOfFreedom >= 1 )</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.GammaCumulativeS(System.Double,System.Double)">
            <summary>
            Gammas the cumulative S.
            </summary>
            <param name="a">A.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.GammaCumulativeCF(System.Double,System.Double)">
            <summary>
            Gammas the cumulative CF.
            </summary>
            <param name="a">A.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.BtaCumulativeCF(System.Double,System.Double,System.Double)">
            <summary>
            Btas the cumulative CF.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UtilityFunctions.InverseBtaCumulativeBrent(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inverses the bta cumulative brent.
            </summary>
            <param name="aa">The aa.</param>
            <param name="bb">The bb.</param>
            <param name="prblty">The prblty.</param>
            <param name="x1">The x1.</param>
            <param name="x2">The x2.</param>
            <param name="tol">The tol.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SyncChartAreas">
            <summary>
            Represents the Synchronization of more then one ChartArea
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartArea">
            <summary>
            Class represents chart area.
            </summary>
            <remarks>
            As per WPF Chart logic, area is a child of chart control and it's the part where
            series are drawn. <para> Single chart control instance may contain multiple
            chart areas assigned to its <see cref="P:Syncfusion.Windows.Chart.Chart.Areas"/> collection. </para>
            <para> Layout of areas on chart control provides <see cref="T:Syncfusion.Windows.Chart.ChartPanel"/>
            panel. </para>
            </remarks>
            <example>
            Example demonstrates creation of area on chart control. <para> C#: </para> <code language="C#">
            //Creating new chart control instance.
            Chart chart = new Chart();
            //Creating chart area instance.
            ChartArea chartArea = new ChartArea();
            //Creating chart series instance.
            ChartSeries series = new ChartSeries();
            //Creating chart list data instance.
            ChartListData data = new ChartListData();
            //Filling data with points.
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Assigning data points collection.
            series.Data = data;
            //Adding series to area.
            chartArea.Series.Add(series);
            //Adding area to chart.
            chart.Areas.Add(chartArea);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;!--Adding char area to chart areas collection--&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;!--Adding chart series to area--&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart">Chart class specification</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea class specification</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPoint">ChartPoint class specification</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTypes">ChartTypes enumeration</seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.C_colorPaletteSize">
            <summary>
            Declares c_colorPaletteSize
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCreateAutomationPeer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_interactivecursor">
            <summary>
            Identifies the InteractiveCursor collections
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SyncChartAreaProperty">
            <summary>
            Identifies the SyncChartArea
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSegmentDragging(Syncfusion.Windows.Chart.SegmentDragEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea._mDockPanel">
            <summary>
            Initializes m_dockPanel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_visibleSeriesSegmentsRecountRequired">
            <summary>
            Initializes m_visibleSeriesSegmentsRecountRequired
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_segmentsResetRequired">
            <summary>
            Initializes m_segmentsResetRequired
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_isMouseDragZooming">
            <summary>
            Identify the Zoom operation is performed using Mouse drag.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_areaPresenter">
            <summary>
            Initializes m_areaPresenter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_colorModel">
            <summary>
            Initializes m_colorModel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_series">
            <summary>
            Initializes m_series
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_axes">
            <summary>
            Initializes m_axes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_visibleSeries">
            <summary>
            Initializes m_visibleSeries
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_highlightedSegment">
            <summary>
            Initializes m_highlightedSegment
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_minPointsDelta">
            <summary>
            Initializes m_minPointsDelta
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_exMinPointsDelta">
            <summary>
            Initializes m_exMinPointsDelta
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_mouseCaptureLocation">
            <summary>
            Initializes m_mouseCaptureLocation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_capturedCursor">
            <summary>
            Initializes m_capturedCursor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_chartTargetCameraController">
            <summary>
            Initializes m_ChartTargetCameraController
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_axes3DShiftLeftOrientation">
            <summary>
            Initializes m_3DAxesShiftLeftOrientation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_axes3DShiftRightOrientation">
            <summary>
            Initializes m_3DAxesShiftRightOrientation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.WatermarkProperty">
            <summary>
            Identifies the Watermark dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.IsRetainAxisPositionProperty">
            <summary>
            Identifies the OriginLineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.PanningRange_XProperty">
            <summary>
            Identifies the X-Range on Panning.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.PanningRange_YProperty">
            <summary>
            Identifies the Y-Range on Panning.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.IsPanningProperty">
            <summary>
            Set the Panning property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.PrimaryChartAreaProperty">
            <summary>
            Set the PrimaryChartArea
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SideBySideSeriesPlacementProperty">
            <summary>
            Identifies the SideBySideSeriesPlacement dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.OriginLineStrokeProperty">
            <summary>
            Identifies the OriginLineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ShowOriginLineProperty">
            <summary>
            Identifies the ShowOriginLine dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.GridLineStrokeProperty">
            <summary>
            Identifies the GridLineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SmallGridLineStrokeProperty">
            <summary>
            Identifies the SmallGridLineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ShowGridLinesProperty">
            <summary>
            Identifies the ShowGridLines dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ShowMajorGridLinesProperty">
            <summary>
             Identifies the ShowMajorGridLines dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ElementMarginProperty">
            <summary>
            Identifies the ElementMargin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.GridBackgroundProperty">
            <summary>
            Identifies the GridBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.HoldUpdateProperty">
            <summary>
            Identifies the HoldUpdateProperty dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.FooterProperty">
            <summary>
            Identifies the Footer dependency property.
            </summary>"
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.DepthAxisProperty">
            <summary>
            Identifies the SecondaryAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SecondaryAxisProperty">
            <summary>
            Identifies the SecondaryAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.PrimaryAxisProperty">
            <summary>
            Identifies the PrimaryAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AxesThicknessProperty">
            <summary>
            Identifies the AxesThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AreaTypeProperty">
            <summary>
            Identifies the AreaType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.HorizontalScrollingAxisProperty">
            <summary>
            Identifies the HorizontalScrollingAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.VerticalScrollingAxisProperty">
            <summary>
            Identifies the VerticalScrollingAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ZoomAllAxesProperty">
            <summary>
            Identifies the ZoomAllAxes dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.LegendProperty">
            <summary>
            Identifies the Legend dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AlternatingGridBackgroundProperty">
            <summary>
            Identifies the AlternatingGridBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AlternatingFillModeProperty">
            <summary>
            Identifies the AlternatingFillMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AlternatingFillDirectionProperty">
            <summary>
            Identifies the AlternatingFillDirection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ZoomSwitchedProperty">
            <summary>
            Identifies the ZoomSwitched dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.View3DModeProperty">
            <summary>
            Identifies the View3DMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.EnableDepthAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for EnableDepthAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AxisContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for AxiseContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.Labels3DContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for AxiseContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.Content3DProperty">
            <summary>
            Using a DependencyProperty as the backing store for Content3D.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.Camera3DProperty">
            <summary>
            Using a DependencyProperty as the backing store for Camera3D.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.LightContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for LightContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.GridContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for LightContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.Chart3DSettingsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Chart3DSettings.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.IsContextMenuEnabledProperty">
            <summary>
            Identifies the IsContextMenuEnabled dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ZoomedXRangeProperty">
            <summary>
            Identifies the ZoomedXRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ZoomedYRangeProperty">
            <summary>
            Identifies the ZoomedYRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ChartAreaParentProperty">
            <summary>
            Identifies the ChartAreaParent dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ChartAreaIndexProperty">
            <summary>
            Identifies the ChartAreaIndex dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ChartAreaCountProperty">
            <summary>
            Identifies the ChartAreaCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SplitterDeltaProperty">
            <summary>
            Identifies the SplitterDelta dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SplitterVisiblityProperty">
            <summary>
            Identifies the SplitterVisiblity dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SplitterWidthProperty">
            <summary>
            Identifies the SplitterWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SplitterColorProperty">
            <summary>
            Identifies the SplitterColor dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SplitterStrokeProperty">
            <summary>
            Identifies the SplitterStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.EnableZoomOnScrollProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.EnableMouseDragZoomingProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.LegendStyleProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.PrimaryAxisStyleProperty">
            <summary>
             Identifies the PrimaryAxisStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SecondaryAxisStyleProperty">
            <summary>
             Identifies the SecondaryAxisStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SeriesStyleProperty">
            <summary>
             Identifies the SeriesStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.EnableRangeSelectionProperty">
            <summary>
             Identifies the EnableRangeSelection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.LowerRangeLabelProperty">
            <summary>
             Identifies the LowerRangeLabel dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.UpperRangeLabelProperty">
            <summary>
             Identifies the UpperRangeLabel dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.RangeSelectionOrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for InteractiveCursorMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.LineStrokeProperty">
            <summary>
             Identifies the LineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SelectionStrokeProperty">
            <summary>
             Identifies the SelectionStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.StartValueProperty">
            <summary>
             Identifies the StartValue dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.EndValueProperty">
            <summary>
             Identifies the EndValue dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ContextMenuTypeProperty">
            <summary>
            Select the Proeprty for ContextMenuType as Default,Custom or Default With custom
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ShowLegendProperty">
             <summary>
            Using a DependencyProperty as the backing store for ShowLegend.  This enables animation, styling, binding, etc... 
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.PaletteProperty">
            <summary>
            Using a DependencyProperty as the backing store for Palette.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.StrokePaletteProperty">
            <summary>
             Using a DependencyProperty as the backing store for StrokePalette.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.SplitterPositionProperty">
            <summary>
             Identifies the SplitterPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.AllowSegmentDragDropProperty">
            <summary>
            Property for AllowSegmentDragDrop
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.Allow3DRotateProperty">
            <summary>
            Proeprty for Allow to Rotate the Chart in 3D Mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.IsClusteredProperty">
            <summary>
            Identifies the IsClustered dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnIsClusterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsCluster property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_ZoomInCoefficient">
            <summary>
            Declares m_ZoomInCoefficient
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.m_ZoomOutCoefficient">
            <summary>
            Declares m_ZoomOutCoefficient
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.ColorModelProperty">
            <summary>
             Using a DependencyProperty as the backing store for ColorModel.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.GridHeaderProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridHeader.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.GridHeaderAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for GridHeaderAlignmentProperty.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> class.
            </summary>
            <remarks>
            Primary and secondary axes are being created automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> class for designer.
            </summary>
            <param name="withDefaultSeries">if set to <c>true</c> [with default series].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.BeginInit">
            <summary>
            Starts the initialization process for this element.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.EndInit">
            <summary>
            Indicates that the initialization process for the element is complete.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:System.Windows.FrameworkElement.EndInit"/> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit"/> having previously been called on the element.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.BoundsToDataSource(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Get the collection of underlying objects which exist inside given Rect region
            </summary>
            <param name="rect">Bounds Region</param>
            <param name="series">Chart Series</param>
            <returns>Collection of underlying objects</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.BoundsToPoints(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Get the collection of ChartPoints objects which exist inside given Rect region
            </summary>
            <param name="rect">Rect</param>
            <param name="series">Chart Series</param>
            <returns>Collection of ChartPoints</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetChart(System.Windows.DependencyObject)">
            <summary>
            Get the Parent chart of correspoinding Chart Area
            </summary>
            <param name="obj">Dependency object</param>
            <returns>Chart</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.ConvertBoundsToAxesRangeValues(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis,System.Windows.Rect)">
            <summary>
            Convert the Mouse co-oridianate points to ChartAxis range values.
            </summary>
            <param name="xAxis">Chart Series X-Axis</param>
            <param name="yAxis">Chart Series Y-Axis</param>
            <param name="actualRect">Acutal Mouse rect Points</param>
            <returns>Range Rect value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnView3DModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnView3DModeChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CoerceChart3DSettingsProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the chart3D settings property.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The base value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnView3DModeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises View3DModeChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Clone(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Method for hooking the Chartscrolling event
            </summary>
            <param name="axis"></param>
            <param name="parentAxis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CreateAxisContent">
            <summary>
            Creates the content of the axis.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetGridLineStroke(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the grid line stroke attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <returns>Grid line stroke.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetGridLineStroke(Syncfusion.Windows.Chart.ChartAxis,System.Windows.Media.Pen)">
            <summary>
            Sets the grid line stroke attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <param name="stroke">The grid line stroke.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetSmallGridLineStroke(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Method for GetSmallGridLineStroke
            </summary>
            <param name="axis"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetSmallGridLineStroke(Syncfusion.Windows.Chart.ChartAxis,System.Windows.Media.Pen)">
            <summary>
            Sets the grid line stroke attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <param name="stroke">The grid line stroke.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetShowGridLines(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the value of show grid lines attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <returns>The grid line stroke.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetShowMajorGridLines(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            return bool value for check MajorGridlines showing or not
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetShowGridLines(Syncfusion.Windows.Chart.ChartAxis,System.Boolean)">
            <summary>
            Sets the show grid lines attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <param name="show">if set to <c>true</c>grid lines will be shown for axis.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetShowMajorGridLines(Syncfusion.Windows.Chart.ChartAxis,System.Boolean)">
            <summary>
            Method for SetShowMajorGridLines
            </summary>
            <param name="axis"></param>
            <param name="show"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetOriginLineStroke(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the origin line stroke attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <returns>The OriginLineStroke pen</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetOriginLineStroke(Syncfusion.Windows.Chart.ChartAxis,System.Windows.Media.Pen)">
            <summary>
            Sets the origin line stroke attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <param name="stroke">The stroke <see cref="T:System.Windows.Media.Pen"/>.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetShowOriginLine(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the show origin line attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <returns>Bool value to show grid lines</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetShowOriginLine(Syncfusion.Windows.Chart.ChartAxis,System.Boolean)">
            <summary>
            Sets the show origin line attached property.
            </summary>
            <param name="axis">The <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.</param>
            <param name="show">if set to <c>true</c> Origin should be shown on axis.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.ValueToPoint(Syncfusion.Windows.Chart.ChartAxis,System.Double)">
            <summary>
            Converts Value to point.
            </summary>
            <param name="axis">The Chart axis .</param>
            <param name="value">The value.</param>
            <returns>The double value to point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.ValueToPoint(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis,System.Double)">
            <summary>
            Method for return double value from series,axis values
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.PointToValue(Syncfusion.Windows.Chart.ChartAxis,System.Windows.Point)">
            <summary>
            Converts point to value.
            </summary>
            <param name="axis">The axis value.</param>
            <param name="point">The point.</param>
            <returns>The double point to value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetStackInfo(Syncfusion.Windows.Chart.ChartSeries,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            This method is used when series are rendered stacked. 
            </summary>
            <param name="series">The series.</param>
            <param name="position">The position.</param>
            <param name="forPositive">Specify null to stack all series in one stack. True to return the stack info for just
            the positive series. False to return the stack info for just the negative series.</param>
            <returns>
            The value returned is a cumulative value of
            Y from all series that are below the series passed in the contained <see cref="P:Syncfusion.Windows.Chart.ChartArea.Series">series collection</see>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetStackingArea100Info(Syncfusion.Windows.Chart.ChartSeries,System.Double,System.Nullable{System.Boolean},System.Int32)">
            <summary>
            This method is used when series are rendered stacked.
            </summary>
            <param name="series">The series.</param>
            <param name="position">The position.</param>
            <param name="forPositive">Specify null to stack all series in one stack. True to return the stack info for just
            the positive series. False to return the stack info for just the negative series.</param>
            <param name="value">The series.</param>
            <returns>The value returned is a cumulative value of
            Y from all series that are below the series passed in the contained <see cref="P:Syncfusion.Windows.Chart.ChartArea.Series"/>.</returns>
            
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetStackInfo(Syncfusion.Windows.Chart.ChartSeries,System.Double,System.Nullable{System.Boolean})">
            <summary>
            Return double value Based on given series collection
            </summary>
            <param name="series"></param>
            <param name="position"></param>
            <param name="forPositive"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetStackInfo(Syncfusion.Windows.Chart.ChartSeries,System.Double,System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Return double value Based on given series collection
            </summary>
            <param name="series"></param>
            <param name="position"></param>
            <param name="forPositive"></param>
            <param name="stackInfoCurrentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetPercentageStackInfo(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint)">
            <summary>
            Gets the percentage stack info.
            </summary>
            <remarks>
            Used to calculate <see cref="T:Syncfusion.Windows.Chart.ChartStackingColumnSegment"/> column shift.
            </remarks>
            <param name="series">The series.</param>
            <param name="point">The point.</param>
            <returns>The double Percentage Stack Info</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetSideBySideInfo(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Returns the value of side by side displacement.
            </summary>
            <param name="series">The series.</param>
            <returns>The Doublerange Side by side Info</returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.EnableLazyLoadingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartArea.IsBeginInitIsActiveProperty">
            <summary>
             Identifies the IsBeginInitIsActive dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnEnableLazyLoadingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [enable lazy loading changed].
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnVerticalScrollingAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when Vertical Scrolling axis gets changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnHorizontalScrollingAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when Horizontal Scrolling axis gets changed.
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The Event Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.GetChartSegmentForVisuals(Syncfusion.Windows.Chart.ChartSegment,System.Int32)">
            <summary>
            Gets the chart segment for visuals.
            </summary>
            <param name="segment">The segment.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"></see>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse was left and the handled state.</param>
            
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event. 
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/>�routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/>�routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/>�routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp"/>�routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the right mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/>�routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetAreaPresenter(Syncfusion.Windows.Chart.ChartAreaPresenter)">
            <summary>
            Set area presenter
            </summary>
            <param name="areaPresenter">The ChartAreaPresenter</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raised on SeriesCollectionChanged
            </summary>
            <param name="sender">The Object sender</param>
            <param name="args">The NotifyCollectionChangedEventArguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSeriesAppearanceChanged(System.Object,System.EventArgs)">
            <summary>
            Raised on SeriesAppearanceChanged
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The EventArguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raised on AxesCollectionChanged
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The NotifyCollectionChangedEventArguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Called when axis gets changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSeriesDataChanged(System.Object,System.EventArgs)">
            <summary>
            Raised on SeriesDataChanged
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The EventArguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CheckCompatibility(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Verifies whether chart type is either Pie, Doughnut, Funnel or Pyramid.
            </summary>
            <param name="chartType">The <see cref="T:Syncfusion.Windows.Chart.ChartType"/></param>
            <returns>
            True if chart type is either Pie, Doughnut, Funnel or Pyramid.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Redraw">
            <summary>
            Redraws this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.UpdateChartArea">
            <summary>
            Updates the chart area.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.UpdateArea">
            <summary>
            Updates the area.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.UpdateGridLines">
            <summary>
            Updates the grid lines.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CreateCamera">
            <summary>
            Creates the camera.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.UpdateLight">
            <summary>
            Updetes the light.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Update3DContent">
            <summary>
            Updates the content of the 3D.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Update3DAxis">
            <summary>
            Updates the 3D axis.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.DrawAxis(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Drawes the axis.
            </summary>
            <param name="axis">The axis value.</param>
            <returns>The geometry</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CalculateAxisRange(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Computes range of axis by series.
            </summary>
            <param name="axis">The axis value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CalculateVisibleDataRange(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the Range based on datavalue if IsSetDataValue=true and IsAutoSetRange=true
            </summary>
            <param name="axis"></param>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCoerceAxis(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when axis need coerce.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="value">The value.</param>
            <returns>The Axis value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCoerceShowGridLines(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce show grid lines].
            </summary>
            <param name="dObj">The DependencyObject d.</param>
            <param name="value">The value.</param>
            <returns>The Grid lines value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCoerceShowOriginLines(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce show origin lines].
            </summary>
            <param name="dObj">The DependencyObject d.</param>
            <param name="value">The value.</param>
            <returns>The Origin lines value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnZoomInCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Zooms in sector regarding IsZooming property on series. IsZooming is ignored if ZoomAllAxes is true.
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnZoomOutCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Raised on ZoomOutCommand
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnZoomResetCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Raised on ZoomResetCommand
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnZoomSectorCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Zooms area sector regarding IsZooming property on series. IsZooming is ignored if ZoomAllAxes is true.
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSwitchZoomingCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Turns on zooming on area.
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCancelZoomingCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Cacnels currently running switch zooming command.
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnChangePaletteCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Raised on ChangePaletteCommand
            </summary>
            <param name="target">The object target</param>
            <param name="args">The ExecutedRoutedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.CanExecuteZoomingCommands(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether this instance can execute zooming commands the specified sender.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnAxesTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raised on AxesTypeChanged
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="args">The DependencyPropertyChangedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnChart3DSettingsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [chart3D settings changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetCameraBindings(Syncfusion.Windows.Chart.ChartTargetCameraController,Syncfusion.Windows.Chart.Chart3D)">
            <summary>
            Sets the camera bindings.
            </summary>
            <param name="nativeCameraController">The native camera controller.</param>
            <param name="viewSettings">The view settings.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnPrimaryAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [primary axis changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSecondaryAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [secondary axis changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnDepthAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [depth axis changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnScrollingAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [scrolling axis changed].
            </summary>
            <param name="dpObj">The DependencyObject dpobj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnZoomAllAxesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [zoom all axes changed].
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSplitterPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when SplitterPosition property changed.
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnEndRangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when EndValue property changed.
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnLineStrokeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LineStroke property changed.
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSelectionStrokeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when SelectionStroke property changed.
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnStartRangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when StartValue property changed.
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnEnabelSeriesInterativeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when EnableRangeSelection property changed.
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnvalueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnLegendPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when legend property was changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCoerceVerticalScrollingAxis(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce vertical scrolling axis].
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="value">The value.</param>
            <returns>The vertical scrolling axis</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCoerceHorizontalScrollingAxis(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce horizontal scrolling axis].
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="value">The value.</param>
            <returns>the Horizontal Scrolling Axis</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnCoerceContextMenu(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called to coerce context menu.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="value">The value.</param>
            <returns>The contextmenu</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnIsContextMenuEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsContextMenuEnabled changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnVisibleSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles visibles the series collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.OnSideBySideSeriesPlacementPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when SideBySideSeriesPlacement property changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.RequestForSegmentsReset">
            <summary>
            Requests for segments reset.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.UpdateLegend(Syncfusion.Windows.Chart.ChartLegend,Syncfusion.Windows.Chart.ChartLegend)">
            <summary>
            Updates the legend.
            </summary>
            <param name="oldLegend">The old legend</param>
            <param name="newLegend">The new legend</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.SetLegendItemSource(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Sets the legend item source.
            </summary>
            <param name="chartSeries">The chart series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.VisibileRangeForZoomAllAxis(Syncfusion.Windows.Chart.ChartArea,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Visibiles the range for zoom all axis.
            </summary>
            <param name="chartArea">The chart area.</param>
            <param name="chartAxis">The chart axis.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.ResetVerticalSelectedRange">
            <summary>
            Method to reset the RangeSelection cursor and Labels, when Orientation is Vertical
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.ResetHorizontalSelectedRange">
            <summary>
            Method to reset the RangeSelection cursor and Labels, when Orientation is Horizontal
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Serialize">
            <summary>
            Converts ChartArea into xaml String
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartArea.Deserialize(System.String)">
            <summary>
            Converts propert xaml string into ChartArea
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SplitRatio">
            <summary>
            Gets or sets the sync chart area.
            </summary>
            <value>The sync chart area.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.InteractiveCursors">
            <summary>
            Gets or sets the interactive cursors.
            </summary>
            <value>The interactive cursors.</value>
            System.StackOverflowException was unhandled
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SyncChartArea">
            <summary>
            Gets or sets the sync chart area.
            </summary>
            <value>The sync chart area.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.CustomContextMenuItems">
            <summary>
            
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.SegmentDragging">
            <summary>
            
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.SegmentDragged">
            <summary>
            Event for ChartArea segmentDragged
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.SegmentDropping">
            <summary>
            Event for Chartarea segmentDropping
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.SegmentDropped">
            <summary>
            Event for ChartArea segmentDropped
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.DisableIsIndexedForOLAP">
            <summary>
            Identifies the DisableIsIndexedForOLAP
            </summary>
            <value>
            	<c>true</c> if [disable is indexed for OLAP]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Watermark">
            <summary>
            Gets or sets the watermark for chart.
            </summary>
            <value>The Watermark.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.EnableZoomOnScroll">
            <summary>
            Gets or sets the EnableZoomOnScroll value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.HoldUpdate">
            <summary>
            Get and Set HoldUpdateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.EnableMouseDragZooming">
            <summary>
            Gets or sets the EnableZoomOnScroll value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.LegendStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.PrimaryAxisStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SecondaryAxisStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SeriesStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.EnableRangeSelection">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.LowerRangeLabel">
            <summary>
            Get and Set LowerRangeLabelProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.UpperRangeLabel">
            <summary>
            Get and Set UpperRangelabel
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.RangeSelectionOrientation">
            <summary>
            Get and Set RangeSelectionOrientationProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.LineStroke">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SelectionStroke">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.StartValue">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.EndValue">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ContextMenuType">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ShowLegend">
            <summary>
            Get and Set ShowLegendProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Palette">
            <summary>
            Get and Set PaletteProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.StrokePalette">
            <summary>
            Get and Set StrokePaletteProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SplitterPosition">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AllowSegmentDragDrop">
            <summary>
            get and set AllowSegmentDragDrop property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Allow3DRotate">
            <summary>
            Get and set the Allow3DRotate 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.IsClustered">
            <summary>
            Gets or sets the IsClustered value.
            </summary>
            <value>The IsClustered.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ZoomInCoefficient">
            <summary>
            Get and Set ZoomInCoefficient
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ZoomOutCoefficient">
            <summary>
            Get and Set ZoomOutCoefficient
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SplitterStroke">
            <summary>
            Gets or sets the splitter stroke.
            </summary>
            <value>The splitter stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SplitterColor">
            <summary>
            Gets or sets the color of the splitter.
            </summary>
            <value>The color of the splitter.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.PanningRange_X">
            <summary>
            Gets or sets the panning range_ X.
            </summary>
            <value>The panning range_ X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.PanningRange_Y">
            <summary>
            Gets or sets the panning range_ Y.
            </summary>
            <value>The panning range_ Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.IsPanning">
            <summary>
            Gets or sets a value indicating whether this instance is panning.
            </summary>
            <value>
            	<c>true</c> if this instance is panning; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.PrimaryChartArea">
            <summary>
            Gets or sets the primary chart area.
            </summary>
            <value>The primary chart area.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ElementMargin">
            <summary>
            Gets or sets the element margin. This is a dependency property.
            </summary>
            <value>The element margin.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.IsIndexedCompatible">
            <summary>
            Gets or sets a value indicating whether area could be represented with indexed series..
            </summary>
            <value>
             <c>true</c> if this visible series are compatible to be indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AxisContent">
            <summary>
            Gets or sets the content of the axis.
            </summary>
            <value>The content of the axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Labels3DContent">
            <summary>
            Gets or sets the content of the labels3D.
            </summary>
            <value>The content of the labels3D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Content3D">
            <summary>
            Gets or sets the content3D.
            </summary>
            <value>The content3D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.PrimarySeries">
            <summary>
            Gets the primary series.
            </summary>
            <value>The primary series.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.MousePressedSeries">
            <summary>
            Gets or sets a value indicating series that currently got a mouse pressed upon it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.MouseEnteredSegment">
            <summary>
            Gets or sets a value indicating series that currently got a mouse pointer above it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ZoomSwitched">
            <summary>
            Gets a value indicating whether chart area is currently zooming.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AxesThickness">
            <summary>
            Gets or sets the axes thickness.
            </summary>
            <value>The axes thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AreaType">
            <summary>
            Gets or sets type of area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.IsContextMenuEnabled">
            <summary>
            Gets or sets a value indicating whether default context menu should be added to <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.
            </summary>
            <value>
             <c>true</c> if <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> has  a default context menu enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SideBySideSeriesPlacement">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> added to area should be plotted side-by-side. 
            </summary>
            <remarks>
            Gets or sets the SideBySideSeriesPlacement. This is a dependency property. Property affects side-by-side chart types only.
            </remarks>
            <value>The SideBySideSeriesPlacement.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.IsRetainAxisPosition">
            <summary>
            Gets or sets a value indicating whether this instance is retain axis position.
            </summary>
            <value>
            	<c>true</c> if this instance is retain axis position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ChartAreaAdornerLayer">
            <summary>
            Gets the chart area adorner layer.
            </summary>
            <value>The chart area adorner layer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Camera3D">
            <summary>
            Gets or sets the camera3 D.
            </summary>
            <value>The camera3 D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Chart3DSettings">
            <summary>
            Gets or sets the chart3D settings.
            </summary>
            <value>The chart3D settings.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.LightContent">
            <summary>
            Gets or sets the content of the light.
            </summary>
            <value>The content of the light.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.GridContent">
            <summary>
            Gets or sets the content of the grid.
            </summary>
            <value>The content of the grid.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AlternatingFillDirection">
            <summary>
            Gets or sets alternating grid lines direction.
            </summary>
            <remarks>
            In some cases it is required to fill charts area's background with repeating
            lines. This property allows to set alternating lines direction.
            </remarks>
            <value>
            The alternating fill mode can be set from one of values from <see cref="T:System.Windows.Controls.Orientation"/> enumeration.
            </value>
            <example>
            C#: <code language="C#">
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            //Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            //Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Setting alternating grid background brush.
            chart.Areas[0].AlternatingGridBackground = Brushes.White;
            //Setting alternating grid background direction mode.
            chart.Areas[0].AlternatingFillDirection = Orientation.Vertical;
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea AlternatingGridBackground="White"
            AlternatingFillDirection="Vertical"&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AlternatingFillMode">
            <summary>
            Gets or sets fill mode for alternating grid lines.
            </summary>
            <remarks>
            In some cases it is required to fill charts area's background with repeating
            lines. This property allows to set alternating lines fill mode.
            </remarks>
            <value>
            The alternating fill mode can be set from one of values from <see cref="P:Syncfusion.Windows.Chart.ChartArea.AlternatingFillMode"/> enumeration.
            </value>
            <example>
            C#: <code language="C#">
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            //Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            //Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Setting alternating grid background brush.
            chart.Areas[0].AlternatingGridBackground = Brushes.White;
            //Setting alternating grid background fill mode.
            chart.Areas[0].AlternatingFillMode = AlternatingFillMode.Odd;
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea AlternatingGridBackground="White"
            AlternatingFillMode="Odd"&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.AlternatingGridBackground">
            <summary>
            Gets or sets alternating grid lines brush.
            </summary>
            <remarks>
            In some cases it is required to fill charts area's background with repeating
            lines. This property allows to set alternating lines brush.
            </remarks>
            <value>
            Alternating grid background.
            </value>
            <example>
            C#: <code language="C#">
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            //Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            //Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Setting alternating grid background brush.
            chart.Areas[0].AlternatingGridBackground = Brushes.White;
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;!--Creates new chart area and assigns its AlternatingGridBackground
            property--&gt;
            &lt;syncfusion:ChartArea AlternatingGridBackground="White"&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Legend">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> for ChartArea. This is a dependency
            property.
            </summary>
            <remarks>
            Chart legend is used to give user more idea about what he sees on the chart.
            <para> <see cref="T:Syncfusion.Windows.Chart.ChartLegend">Chart Legend's</see> values are displaying
            series' labels except of <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Pie"/>, <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Doughnut"/>, <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Funnel"/> and <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Pyramid"/> chart types. For such specific types legend is
            displaying segments of series. </para>
            </remarks>
            <value>
            Instance of <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> should be assigned.
            </value>
            <example>
            C#: <code language="C#">
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            //Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            //Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Assigning legend to area.
            chart.Areas[0].Legend = new ChartLegend();
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;syncfusion:ChartArea.Legend&gt;
            &lt;syncfusion:ChartLegend/&gt;
            &lt;/syncfusion:ChartArea.Legend&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.View3DMode">
            <summary>
            Gets or sets a value indicating whether [view3 D mode].
            </summary>
            <value><c>true</c> if [view3 D mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.EnableDepthAxis">
            <summary>
            Get and set EnableDepthAxis property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.HorizontalScrollingAxis">
            <summary>
            Gets or sets horizontal scrolling axis. This is a dependency property.
            </summary>
            <remarks>
            When chart area gets zoomed, horizontal scrollbar is shown. This property determines which axis should be scrolled.
            <para>
            HorizontalScrollingAxis is generally used for multiple axes scenarios.
            </para>
            </remarks>
            <value>
            <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> should be a member of chart area <see cref="P:Syncfusion.Windows.Chart.ChartArea.Axes"/> collection in order to work properly.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.VerticalScrollingAxis">
            <summary>
            Gets or sets vertical scrolling axis. This is a dependency property.
            </summary>
            <remarks>
            When chart area gets zoomed, vertical scrollbar is shown. This property determines which axis should be scrolled.
            <para>
            VerticalScrollingAxis is generally used for multiple axes scenarios.
            </para>
            </remarks>
            <value>
            <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> should be a member of chart area <see cref="P:Syncfusion.Windows.Chart.ChartArea.Axes"/> collection in order to work properly.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ZoomAllAxes">
            <summary>
            Gets or sets a value indicating whether all axes should be zoomed in zooming mode. This is a dependency property.
            </summary>
            <remarks>
            This property is being changed automatically by WPF Chart zooming system.
            </remarks>
            <value><c>true</c> if all area's axes should be zoomed. All <see cref="P:Syncfusion.Windows.Chart.ChartSeries.IsZoomable"/> properties are ignored.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.GridBackground">
            <summary>
            Gets or sets the grid background. This is a dependency property.
            </summary>
            <remarks>
            Represents the brush that fills area's grid background.
            </remarks>
            <value>
            The grid <see cref="T:System.Windows.Media.Brush">background</see>.
            </value>
            <example>
            C#: <code>
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            //Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            //Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Assigning a new background brush.
            chart.Areas[0].GridBackground = new LinearGradientBrush(Colors.White, Colors.Red, new Point(0, 0), new Point(1, 1));
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Resources&gt;
            &lt;LinearGradientBrush x:Key="backgroundBrush"&gt;
            &lt;GradientStop Color="White" Offset="0"/&gt;
            &lt;GradientStop Color="LightCoral" Offset="0.6"/&gt;
            &lt;GradientStop Color="White" Offset="1"/&gt;
            &lt;/LinearGradientBrush&gt;
            &lt;/syncfusion:Chart.Resources&gt;
            &lt;syncfusion:ChartArea GridBackground="{StaticResource backgroundBrush}"&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.PrimaryAxis">
            <summary>
            Gets or sets the primary axis. This is a dependency property.
            </summary>
            <remarks>
            By default, chart area has two axes: Primary (X-axis with <see cref="F:System.Windows.Controls.Orientation.Horizontal"/> orientation) and Secondary (Y-Axis with <see cref="F:System.Windows.Controls.Orientation.Vertical"/> orientation) axes.
            </remarks>
            <value>The primary axis.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartArea.Axes">Chart area axes collection</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SecondaryAxis">
            <summary>
            Gets or sets the secondary axis.This is a dependency property.
            </summary>
            <remarks>
            By default, chart area has two axes: Primary (X-axis with <see cref="F:System.Windows.Controls.Orientation.Horizontal"/> orientation) and Secondary (Y-Axis with <see cref="F:System.Windows.Controls.Orientation.Vertical"/> orientation) axes.
            </remarks>
            <value>The secondary axis.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartArea.Axes">Chart area axes collection</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.DepthAxis">
            <summary>
            Gets or sets the Depth(Z) axis.This is a dependency property.
            </summary>
            <remarks>
            For 3D Chart, chart area has three axes: Primary (X-axis with <see cref="F:System.Windows.Controls.Orientation.Horizontal"/> orientation) , Secondary (Y-Axis with <see cref="F:System.Windows.Controls.Orientation.Vertical"/> orientation) and Depth (Z-Axis) axes.
            </remarks>
            <value>The depth axis.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartArea.Axes">Chart area axes collection</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.CornerRadius">
            <summary>
            Gets or sets corner radius of area's border. This is a dependency property.
            </summary>
            <example>
            C#: <code language="C#">
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            //Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            //Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Setting corner radius of area.
            chart.Areas[0].CornerRadius = new CornerRadius(10, 5, 10, 5);
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea CornerRadius="10,5,10,5"&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Series">
            <summary>
            Gets or sets the collection of <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.
            </summary>
            <example>
            XAML:
            <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               Width="300" Height="300"&gt;
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
               &lt;syncfusion:ChartArea&gt;
                   &lt;syncfusion:ChartArea.Series&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5"/&gt;
                   &lt;/syncfusion:ChartArea.Series&gt;
               &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ColorModel">
            <summary>
            Gets the color model of area.
            </summary>
            <value>The color model.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStyleModel"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Header">
            <summary>
            Gets or sets header of chart. This is a dependency property.
            </summary>
            <remarks>
            Header is used to mark area.
            </remarks>
            <example>
            C#: <code language="C#">
            //Creating new chart instance.
            chart chart = new chart();
            //Adding new area.
            chart.areas.add(new chartarea());
            //Creating chart data points.
            chartlistdata data = new chartlistdata();
            data.add(new chartpoint(1, 1));
            data.add(new chartpoint(2, 2));
            data.add(new chartpoint(3, 3));
            data.add(new chartpoint(4, 4));
            data.add(new chartpoint(5, 5));
            //Adding new series.
            chart.areas[0].series.add(new chartseries());
            //Assigning data to series.
            chart.areas[0].series[0].data = data;
            //Setting corner radius of area.
            chart.areas[0].Header = "Main area";
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea Header="Main Area"&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 "/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.GridHeader">
            <summary>
            Get and set GridHeaderProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.GridHeaderAlignment">
            <summary>
            Get and Set GridHeaderAlignmentProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Footer">
            <summary>
            Gets or sets the footer of chart area. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.Axes">
            <summary>
            Gets the chart area axes collection.
            </summary>
            <remarks>
            This property should be used for multiple axes scenario.
            </remarks>
            <value>By default property contains 2 axes: <see cref="P:Syncfusion.Windows.Chart.ChartArea.PrimaryAxis">Primary</see> and <see cref="P:Syncfusion.Windows.Chart.ChartArea.SecondaryAxis">Secondary</see>.</value>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartSeries.XAxis">X Axis on Series</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartSeries.YAxis">Y Axis on Series</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.VisibleSeries">
            <summary>
            Gets visible series of chart area.
            </summary>
            <remarks>
            This property is intended to be used for custom <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> templates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.MinPointsDelta">
            <summary>
            Gets the minimal points delta.
            </summary>
            <value>The min points delta.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
            <value></value>
            <returns>An enumerator for logical child elements of this element.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ZoomedXRange">
            <summary>
            Get and Set ZoomedXRangeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.ZoomedYRange">
            <summary>
            Get  and Set ZoomedYRangeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SplitterVisiblity">
            <summary>
            Get and Set SplitterVisiblityProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.SplitterWidth">
            <summary>
            Get and Set SplitterWidthProperty
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.View3DModeChanged">
            <summary>
            Event that is raised when View3DMode property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.CameraController">
            <summary>
            Gets or sets the camera controller.
            </summary>
            <value>The camera controller.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.ChartScrolling">
            <summary>
            Event for ChartScrolling in ChartArea
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.ChartZoomed">
            <summary>
            event for Chartzoomed in ChartArea
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.ChartZoomSector">
            <summary>
            Event for ChartZoomSector in ChartArea
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.ChartZoomedOut">
            <summary>
            Event for ChartZoomedOut in ChartArea
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.ChartPanning">
            <summary>
            Event for ChartPanning in ChartArea
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartArea.ChartZoomReset">
            <summary>
            Event for ChartZoomedReset in ChartArea
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.EnableLazyLoading">
            <summary>
            Gets or sets a value indicating whether [enable lazy loading].
            </summary>
            <value><c>true</c> if [enable lazy loading]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartArea.IsBeginInitIsActive">
            <summary>
            Get and set IsBeginInitIsActiveProperty
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse was left and the handled state.</param>
            
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event. 
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.splitter">
            <summary>
            Intializes the splitter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Windows.Chart.SyncChartAreas"/> class.
            </summary>
            <remarks>
            Primary and secondary axes are being created automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.SyncChartAreas"/> class.
            </summary>
            <remarks>
            Primary and secondary axes are being created automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.SyncChartAreas"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.PanningRange_SyncProperty">
            <summary>
            Identifies the Panning range, It is a dependencyProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.IsPanning_SyncProperty">
            <summary>
            Identifies the Panning is set or not, It is a dependencyProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.MarginProperty">
            <summary>
            Identifies the Margin, It is a dependencyProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.AreasProperty">
            <summary>
            Identifies the Area, It is a dependencyProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.AreasPanelProperty">
            <summary>
            Identifies the AreasPanel, It is a dependencyProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SyncChartAreas.IsSyncChartAreaProperty">
            <summary>
            Identifies the SyncChartArea, It is a dependencyProperty
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.SetAreaProperties">
            <summary>
            Sets the area properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.Clone(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Clones the specified axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="parentAxis">The parent axis.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.Serialize">
            <summary>
            Initialize the Serialize string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncChartAreas.Deserialize(System.String)">
            <summary>
            Initialize Deserialize new object
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.CursorSeries">
            <summary>
            Gets or Sets value fro the Cursor Visibility
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.PanningRange_Sync">
            <summary>
            Gets or sets the panning range_ sync.
            </summary>
            <value>The panning range_ sync.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.IsPanning_Sync">
            <summary>
            Gets or sets a value indicating whether this instance is panning_ sync.
            </summary>
            <value>
            	<c>true</c> if this instance is panning_ sync; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.Areas">
            <summary>
            Gets or sets the areas.
            </summary>
            <value>The areas.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.Margin">
            <summary>
            Gets or sets the outer margin of an element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>
            Provides margin values for the element. The default value is a <see cref="T:System.Windows.Thickness"/> with all properties equal to 0 (zero).
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.AreasPanel">
            <summary>
            Gets or sets the areas panel.
            </summary>
            <value>The areas panel.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SyncChartAreas.IsSyncChartArea">
            <summary>
            Gets or sets a value indicating whether this instance is sync chart area.
            </summary>
            <value>
            	<c>true</c> if this instance is sync chart area; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SyncAreasPanel">
            <summary>
            Class represents Panel for SyncChartAreas
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncAreasPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.StackPanel"/> element.
            </summary>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the arranged size of this <see cref="T:System.Windows.Controls.StackPanel"/> element and its child elements.
            </returns>
            <param name="arrangeSize">The <see cref="T:System.Windows.Size"/> that this element should use to arrange its child elements.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncAreasPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.StackPanel"/> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.StackPanel.ArrangeOverride(System.Windows.Size)"/> pass.
            </summary>
            <param name="constraint1">An upper limit <see cref="T:System.Windows.Size"/> that should not be exceeded.</param>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SyncAreasPanel.UpdateSplitRatio(System.Windows.Size,System.Double,System.Double)">
            <summary>
            Update the split ratio value At the time of initialize alone.
            </summary>
            <param name="totalSize"></param>
            <param name="totalheight"></param>
            <param name="totalcount"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LeftConverter">
            <summary>
            Return double value based on the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LeftConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LeftConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TopConverter">
            <summary>
            Return double value based on the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TopConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TopConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SetCanvasLeftConverter">
            <summary>
            Return double value based on the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SetCanvasLeftConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SetCanvasLeftConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IndicatorVisibilityConverter">
            <summary>
            Class implementation for IndicatorVisibilityConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IndicatorVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IndicatorVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PathVisibilityConverter">
            <summary>
            Return visibility value for the given chart
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PathVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PathVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TimeLineControl">
            <summary>
            Represents the TimelineControl Class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.VisualStyleProperty">
            <summary>
            Represents VisualStyle for Timelinecontrol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarInteriorProperty">
            <summary>
            Represents ScrollBarInterior in timelinecontrol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollThumbTemplateProperty">
            <summary>
            Represents ScrollThumbTemplate in TimelineControl ScrollBar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarBorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for ScrollBarBorderBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarBorderThicknessProperty">
            <summary>
             Using a DependencyProperty as the backing store for ScrollBarBorderThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarSmallIncreaseTemplateProperty">
            <summary>
             Using a DependencyProperty as the backing store for ScrollBarSmallIncreaseTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarSmallDecreaseTemplateProperty">
            <summary>
             Using a DependencyProperty as the backing store for ScrollBarSmallDecreaseTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.DataSourceProperty">
            <summary>
            Identifies the DataSource dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.SelectedDataProperty">
            <summary>
            Identifies the SelectedData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.SelectedRangeProperty">
            <summary>
            Using a DependencyProperty as the backing store for SelectedRange.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.UnSelectedRegionInteriorProperty">
            <summary>
             Identifies the UnSelectedRegionInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.BindingPathXProperty">
            <summary>
            Identifies the BindingPathX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.EdgePointSelectionProperty">
            <summary>
             Identifies the EdgePointSelection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.BindingPathsYProperty">
            <summary>
            Identifies the BindingPathsY dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.GetStartValue(System.Windows.DependencyObject)">
            <summary>
            Return double value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.SetStartValue(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the StartValue dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.StartValueProperty">
            <summary>
            Indicates the StartValue Dependency Property
            </summary>.
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.GetEndValue(System.Windows.DependencyObject)">
            <summary>
            Return double value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.SetEndValue(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the EndValue dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.EndValueProperty">
            <summary>
            Indicates the EndValue Dependency Property
            </summary>.
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.GetStartDate(System.Windows.DependencyObject)">
            <summary>
            Return DateTime value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.SetStartDate(System.Windows.DependencyObject,System.DateTime)">
            <summary>
            Sets the value of the StartDate dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.StartDateProperty">
            <summary>
            Indicates the StartDate Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.GetEndDate(System.Windows.DependencyObject)">
            <summary>
            Return DateTime value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.SetEndDate(System.Windows.DependencyObject,System.DateTime)">
            <summary>
            Sets the value of the EndDate dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.EndDateProperty">
            <summary>
            Indicates the EndDate Dependency Property
            </summary>.
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ViewPortInteriorProperty">
            <summary>
             Identifies the ViewPortInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.MouseOverInteriorProperty">
            <summary>
             Identifies the MouseOverInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarVisibilityProperty">
            <summary>
             Identifies the ScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.ViewLineInteriorProperty">
            <summary>
            Identifies the ViewLineInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.TimeLineInteriorProperty">
            <summary>
             Identifies the TimeLineInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.TimeLineThicknessProperty">
            <summary>
            Identifies the TimeLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.LeftIndicatorTemplateProperty">
            <summary>
            Dependency property for Define the LeftIndicator in TimelineControl
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.RightIndicatorTemplateProperty">
            <summary>
            Dependency property for define RightIndicator in TimelineControl
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineControl.MinimumTimeLineIntervalProperty">
            <summary>
            Dependency proeprty for MinimumTimelineInteval
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.#ctor">
            <summary>
            Constructor for TimelineControl
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.OnmimiumtimeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method represents MinimunTimelineInterval changes
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.OnEndDateValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method Represents EndValue changes in TimelineControl
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.OnStartDateValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method represents StartValueChanges
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.OnTimeLineChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method represents TimelinecontrolInterior Changes
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.OnEnableRangeIndicatorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method Represents timelineControl Datasource Changes
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TimeLineControl.OnVisualStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method Represents TimelineControl visualStyle Changes
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.VisualStyle">
            <summary>
            Gets or sets the VisualStyle value.
            </summary>
            <value>The VisualStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarInterior">
            <summary>
            Gets or sets the ScrollBarInterior value.
            </summary>
            <value>The ScrollBarInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarBorderBrush">
            <summary>
            Get and Set ScrollBarBorderBrushProeprty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarBorderThickness">
            <summary>
            Get and Set ScrollBarBorderThickness property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarSmallIncreaseTemplate">
            <summary>
            Get and Set ScrollBarSmallIncreaseTemplate Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarSmallDecreaseTemplate">
            <summary>
            Get and Set ScrollBarSmallDecreaseTemplate property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollThumbTemplate">
            <summary>
            Gets or sets the ScrollBarInterior value.
            </summary>
            <value>The ScrollBarInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.DataSource">
            <summary>
            Gets or sets the DataSource value.
            </summary>
            <value>The DataSource.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SelectedData">
            <summary>
            Gets or sets the SelectedData value.
            </summary>
            <value>The SelectedData.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SelectedRange">
            <summary>
            Get and Set the SelectedRangeProeprty 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.UnSelectedRegionInterior">
            <summary>
            Gets or sets the UnSelectedRegionInterior value.
            </summary>
            <value>The UnSelectedRegionInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.BindingPathX">
            <summary>
            Gets or sets the BindingPathX value.
            </summary>
            <value>The BindingPathX.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.EdgePointSelection">
            <summary>
            Gets or sets the EdgePointSelection value.
            </summary>
            <value>The EdgePointSelection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.BindingPathsY">
            <summary>
            Gets or sets the BindingPathsY value.
            </summary>
            <value>The BindingPathsY.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ViewPortInterior">
            <summary>
            Gets or sets the ViewPortInterior value.
            </summary>
            <value>The ViewPortInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.MouseOverInterior">
            <summary>
            Gets or sets the MouseOverInterior value.
            </summary>
            <value>The MouseOverInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ScrollBarVisibility">
            <summary>
            Gets or sets the ScrollBarVisibility value.
            </summary>
            <value>The ScrollBarVisibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.ViewLineInterior">
            <summary>
            Gets or sets the ViewLineInterior value.
            </summary>
            <value>The ViewLineInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.TimeLineInterior">
            <summary>
            Gets or sets the TimeLineInterior value.
            </summary>
            <value>The TimeLineInterior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.TimeLineThickness">
            <summary>
            Gets or sets the TimeLineThickness value.
            </summary>
            <value>The TimeLineThickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.LeftIndicatorTemplate">
            <summary>
            Gets or sets the TimeLineThickness value.
            </summary>
            <value>The TimeLineThickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.RightIndicatorTemplate">
            <summary>
            Gets or sets the TimeLineThickness value.
            </summary>
            <value>The TimeLineThickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.LeftOffsetX">
            <summary>
            Gets or sets the LeftOffsetX value.
            </summary>
            <value>The LeftOffsetX.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.RightOffsetX">
            <summary>
            Gets or sets the RightOffsetX value.
            </summary>
            <value>The RightOffsetX.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.CanvasLeft">
            <summary>
            Gets or sets the CanvasLeft value.
            </summary>
            <value>The CanvasLeft.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.PathLeft">
            <summary>
            Gets or sets the CanvasLeft value.
            </summary>
            <value>The CanvasLeft.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.CanvasRight">
            <summary>
            Gets or sets the CanvasRight value.
            </summary>
            <value>The CanvasRight.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SelectedRegionWidth">
            <summary>
            Gets or sets the SelectedRegionWidth value.
            </summary>
            <value>The SelectedRegionWidth.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.RightUnSelectedWidth">
            <summary>
            Gets or sets the RightUnSelectedWidth value.
            </summary>
            <value>The RightUnSelectedWidth.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.GridHeight">
            <summary>
            Gets or sets the GridHeight value.
            </summary>
            <value>The GridHeight.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.MinimumTimeLineInterval">
            <summary>
            Get ans Set MinimumTimeLineInterval
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.Allow3DRotate">
            <summary>
            Unaccessed  Allow3DRotateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SecondaryAxis">
            <summary>
            Unaccessed  SecondaryAxisProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.Series">
            <summary>
            Unaccessed SeriesProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitRatio">
            <summary>
            Unaccessed SplitRatioProperty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterBottomSpace">
            <summary>
            Unaccessed  SplitterBottomSpaceProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterColor">
            <summary>
            Unaccessed  SplitterColorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterDelta">
            <summary>
            Unaccessed SplitterDeltaProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterPosition">
            <summary>
            Unaccessed SplitterPositionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterStroke">
            <summary>
            Unaccessed SplittedStrokeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterVisiblity">
            <summary>
            Unaccessed SplitterVisibilityProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TimeLineControl.SplitterWidth">
            <summary>
            Unaccessed SplitterWidthProperty
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.TimeLineControl.ViewPortChanged">
            <summary>
            Event for ViewPortChanged
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ViewPortChangedEventHandler">
            <summary>
            Delegate for ViewPortChangedEventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ViewPortChangedEventArgs">
            <summary>
            class represents ViewPortChangedEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ViewPortChangedEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Contructor for ViewPortChangedEventArgs
            </summary>
            <param name="argsStart"></param>
            <param name="argsEnd"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ViewPortChangedEventArgs.StartValue">
            <summary>
            Get and Set the StartValue
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ViewPortChangedEventArgs.EndValue">
            <summary>
            Get and Set EndValue
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationLabel">
            <summary>
            Represents ChartLabel class used to set custom labels on Chart
            </summary>
            <remarks>
            Chart for WPF also lets you add some annotations to the chart at specific
            control co-ordinates. By default, these annotations appear as simple text
            labels. But, their look and feel can be fully customized using custom templates.
            </remarks>
            <example>
            XAML:
            <code language="XAML">
            &lt;syncfusion:Chart Name="chart1"&gt;
                &lt;!-- Template defining the custom look and feel of the annotations --&gt;
                &lt;syncfusion:Chart.AnnotationLabelTemplate&gt;
                    &lt;DataTemplate&gt;
                        &lt;Border Background="MintCream" BorderBrush="Black"
            BorderThickness="1"&gt;
                            &lt;TextBlock Text="{Binding}" Foreground="Black"
            FontFamily="Tahoma" FontSize="12" Margin="5"/&gt;
                        &lt;/Border&gt;
                    &lt;/DataTemplate&gt;
                &lt;/syncfusion:Chart.AnnotationLabelTemplate&gt;
                &lt;syncfusion:Chart.AnnotationLabels&gt;
                        &lt;!-- ChartAnnotationLabel instance representing the location and
            content of the annotation. --&gt;
                        &lt;syncfusion:ChartAnnotationLabel x:Name="label1" Content="Top 6
            Products" OffsetX="50" OffsetY="60"&gt;
                        &lt;/syncfusion:ChartAnnotationLabel&gt;
                &lt;/syncfusion:Chart.AnnotationLabels&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.AnnotationsCollection"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabelsCollection"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.OffsetXProperty">
            <summary>
            Identifies the OffsetX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.OffsetYProperty">
            <summary>
            Identifies the OffsetY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.TemplateProperty">
            <summary>
            Identifies the Template dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.AnnotationShapeProperty">
            <summary>
            Identifies the AnnotationShape dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.FillProperty">
            <summary>
            Identifies the Fill dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationLabel.IsAnnotationDragDropProperty">
            <summary>
            Dependency property for check AnnotationDragDrop or not
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationLabel.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabel"/> class.
            </summary>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationLabel.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data. 
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationLabel.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationLabel.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.AnnotationShape">
            <summary>
            Gets or sets the annotation shape.
            </summary>
            <value>The annotation shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.IsAnnotationDragDrop">
            <summary>
            Gets or sets the IsAnnotationDragDrop.
            </summary>
            <value>The IsAnnotationDragDrop.</value>        
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.ContentMargin">
            <summary>
            Gets or sets the Margin
            </summary>
            <value>The ContentMargin.</value>        
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.OffsetX">
            <summary>
            Gets or sets the OffsetX. This is a dependency property.
            </summary>
            <value>The OffsetX.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.OffsetY">
            <summary>
            Gets or sets the OffsetY. This is a dependency property.
            </summary>
            <value>The OffsetY.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationLabel.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesAnnotation">
            <summary>
            Represents chart series annotation class.
            </summary>
            <remarks>
            Annotations at specific X-Y coordinates can be added to the chart
            programmatically.
            </remarks>
            <example>
            XAML:
            <code language="XAML">
             &lt;sfchart:ChartSeries Name="series1" Label="Series1" Type="Area"
            Interior="LightSkyBlue"&gt;
            &lt;sfchart:ChartSeries.Annotations&gt;
            &lt;sfchart:AnnotationsCollection LineColor="White" x:Uid="Annot"&gt;
                        &lt;!-- Here we define the look and feel of the annotation. --&gt;
                         &lt;sfchart:AnnotationsCollection.AnnotationsTemplate&gt;
                             &lt;DataTemplate&gt;
                                 &lt;Button Content="{Binding Y}" ToolTip="{Binding
            Description}" Background="LightGray" Name="Button1" Click="Button_Click" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/sfchart:AnnotationsCollection.AnnotationsTemplate&gt;
                     &lt;/sfchart:AnnotationsCollection&gt;
                    &lt;!-- The annotations are added to this collection in code-behind --&gt;
                 &lt;/sfchart:ChartSeries.Annotations&gt;
             &lt;/sfchart:ChartSeries&gt;
            </code>
            C#:
            <code language="C#">
            // Series1 annotations
            ChartSeriesAnnotation ser1LowPoint = new ChartSeriesAnnotation() { X = 1, Y =
            20, Description = "Series 1 Low Point" }; 
            ChartSeriesAnnotation ser1HighPoint = new ChartSeriesAnnotation() { X = 7, Y =
            56, Description = "Series 1 High Point" }; 
            this.Chart1.Areas[0].Series[0].Annotations.Items.Add(ser1LowPoint); 
            this.Chart1.Areas[0].Series[0].Annotations.Items.Add(ser1HighPoint);
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabel"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.DescriptionProperty">
            <summary>
            Identifies the Description dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.TemplateProperty">
            <summary>
            Identifies the Template dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.OffsetXProperty">
            <summary>
            Identifies the OffsetX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.OffsetYProperty">
            <summary>
            Identifies the OffsetY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.AnnotationShapeProperty">
            <summary>
            Identifies the Annotation shapes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.FillProperty">
            <summary>
            Identifies the Fill dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.StrokeProperty">
            <summary>
            Identifies the Stroke Dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesAnnotation.IsAnnotationDragDropProperty">
            <summary>
            Identifies the IsAnnotationDragDrop dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesAnnotation.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesAnnotation.#ctor">
            <summary>
            Empty constructor for ChartSeriesAnnotation
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.AnnotationShape">
            <summary>
            Gets or sets the annotation shape.
            </summary>
            <value>The annotation shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.IsAnnotationDragDrop">
            <summary>
            Gets or sets the IsAnnotationDragDrop.
            </summary>
            <value>The IsAnnotationDragDrop.</value>        
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.X">
            <summary>
            Gets or sets the X. This is a dependency property.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Y">
            <summary>
            Gets or sets the Y. This is a dependency property.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Description">
            <summary>
            Gets or sets the Description. This is a dependency property.
            </summary>
            <value>The Description.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.Template">
            <summary>
            Gets or sets the Annotation Template. This is a dependency property.
            </summary>
            <value>The Template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.OffsetX">
            <summary>
            Gets or sets the OffsetX. This is a dependency property.
            </summary>
            <value>The OffsetX.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesAnnotation.OffsetY">
            <summary>
            Gets or sets the OffsetY. This is a dependency property.
            </summary>
            <value>The OffsetY.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeriesAnnotation.PropertyChanged">
            <summary>
            Occurs when any property value changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxis">
            <summary>
            The ChartAxis class represents an axis of the <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.
            </summary>
            <remarks>
            A ChartArea contains a minimum of two axes namely primary axis and secondary
            axis in a Chart control. Values / data in the chart are plotted against these
            axes. Chart WPF also supports adding multiple axes to the chart area and the
            series can be drawn on any axis in the collection. 
            </remarks>
            <example>
            XAML:
            <code language="XAML">
            &lt;syncfusion:ChartArea Name="area"&gt;
                      &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                          &lt;syncfusion:ChartAxis Header="X-Axis"  /&gt;
                       &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
                       &lt;syncfusion:ChartArea.SecondaryAxis&gt;
                           &lt;syncfusion:ChartAxis Header="Y-Axis" /&gt;                      
                       &lt;/syncfusion:ChartArea.SecondaryAxis&gt;
                       &lt;syncfusion:ChartSeries Name="series" Data=" 1 35 2 45 3 30 4 25 5
            40" /&gt;                                     &lt;/syncfusion:ChartArea&gt; 
            </code>
            XAML:
            <code language="C#">
             ChartAxis axis = new ChartAxis();
                        axis.Header = "X-Axis";
                        chartArea.PrimaryAxis = axis;
             ChartAxis yaxis = new ChartAxis();
                        yaxis.Header = "Y-Axis";
                        chartArea.SecondaryAxis = yaxis;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxesCollection"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.C_roundDecimals">
            <summary>
            Initializes c_roundDecimals
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EdgeLabelsVisibilityModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for EdgeLabelsVisibilityMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.BaseIntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.InternalRangeProperty">
            <summary>
            Identifies the Range dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EnableSmartAxisLabelProperty">
            <summary>
            Enables the SmartAxisLabel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.HideRepeatedLabelsProperty">
            <summary>
            Hide the RepeatedLabels
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.DoubleDisplayUnitProperty">
            <summary>
            Enables the DoubleDisplayUnit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelTimeSpanFormatProperty">
            <summary>
            Identifies the LabelTimeSpanFormat
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.AxisLabelsPositionProperty">
            <summary>
            Represents AxisLabelPosition
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ShowAllLabelsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAllLabels.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.SegmentPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SegmentPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ForceZeroProperty">
            <summary>
             Using a DependencyProperty as the backing store for ForceZero.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LogarithmicIntervalTypeProperty">
             <summary>
            Using a DependencyProperty as the backing store for LogarithmicIntervalType.  This enables animation, styling, binding, etc... 
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LogarithmicIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for LogarithmicInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelLogarithmicFormatProperty">
            <summary>
             Using a DependencyProperty as the backing store for LabelLogarithmicFormat.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.AliasedModeRenderingProperty">
            <summary>
            AliasedModeRenderingProperty initialize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IsSetDataValueRangeProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSetDataValueRange.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.TickLinesPositionProperty">
            <summary>
             Identifies the TickLinesPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.TickLinesRangeProperty">
            <summary>
             Identifies the TickLinesRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.SmallTickLinesRangeProperty">
            <summary>
             Identifies the SmallTickLinesRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelPositionProperty">
            <summary>
             Identifies the LabelPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelContentProperty">
            <summary>
             Using a DependencyProperty as the backing store for InteractiveCursorLabelContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelVisibilityProperty">
             <summary>
            Using a DependencyProperty as the backing store for InteractiveCursorLabelContent.  This enables animation, styling, binding, etc... 
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelLeftPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for InteractiveCursorLabelLeftPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelTopPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for InteractiveCursorLabelTopPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.MarginProperty">
            <summary>
             Identifies the Margin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.AdditionalPaddingProperty">
            <summary>
            AdditionalPaddingProperty initialization
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.AutoScrollingDeltaProperty">
            <summary>
            Identifies the AutoScrollingDelta dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EnableAutoScrollingProperty">
            <summary>
            Identifies the EnableAutoScrolling dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.BreakRangeProperty">
            <summary>
            Identifies the BreakRange dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.Clone(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Method for hooking RangeChanged event
            </summary>
            <param name="axis"></param>
            <param name="parentAxis"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.c_intervalDivs">
            <summary>
            Initializes c_intervalDivs
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_previousRange">
            <summary>
            Initializes m_cachedRangeValue
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_isUpdating">
            <summary>
            Initializes m_isUpdating
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_tempDateTimeInterval">
            <summary>
            Initializes tempDateTimeInterval
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_customLables">
            <summary>
            Initializes m_customLables
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_visibleLables">
            <summary>
            Initializes m_visibleLables
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_logarihmicVisibleRange">
            <summary>
            Initializes m_logarihmicVisibleRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_visibleRange">
            <summary>
            Initializes m_visibleRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_visibleIntervalOffset">
            <summary>
            Initializes m_visibleIntervalOffset
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_visibleInterval">
            <summary>
            Initializes m_visibleInterval
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_ticksCount">
            <summary>
            Initializes m_ticksCount
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_niceRange">
            <summary>
            Initializes m_niceRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_niceIntervalOffset">
            <summary>
            Initializes m_niceIntervalOffset
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_niceInterval">
            <summary>
            Initializes m_niceInterval
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_requestedRange">
            <summary>
            Initializes m_requestedRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_owner">
            <summary>
            Initializes m_owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_AxisDataModel">
            <summary>
            Initialize the axis Label Source data
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.m_ticksPoint">
            <summary>
            Initializes m_ticksPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.isIndexedOfPrimary">
            <summary>
            to set the isIndexed property of series.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.arranged">
            <summary>
            to set the arranged property of series.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.axisHeight">
            <summary>
            hold the axis height
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LogarithmicRangeProperty">
            <summary>
            Identifies the Logarithmic Range dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IgnoreRangePaddingsOnZoomProperty">
            <summary>
            Identifies the DateTimeInterval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EnableLogLabelsProperty">
            <summary>
            Identifies the EnableLogLabels dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.DateTimeIntervalProperty">
            <summary>
            Identifies the DateTimeInterval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.MinimumDateTimeIntervalProperty">
            <summary>
            Identifies the MinimumDateTimeInterval dependency property.
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.DateTimeRangeProperty">
            <summary>
            Identifies the DatTimeRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.RangeProperty">
            <summary>
            Identifies the Range dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.OriginProperty">
            <summary>
            Identifies the Origin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ZoomPositionProperty">
            <summary>
            Identifies the ZoomPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ZoomFactorProperty">
            <summary>
            Identifies the ZoomFactor dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IsInversedProperty">
            <summary>
            Identifies the IsInversed dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IsAutoSetRangeProperty">
            <summary>
            Identifies the IsAutoSetRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EnableAutoIntervalOnZoomingProperty">
            <summary>
            Identifies the EnableAutoIntervalOnZooming dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EnableZoomingProperty">
            <summary>
            Identifies the EnableZooming dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LogarithmicBaseProperty">
            <summary>
            Identifies the LogarithmicBase dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.RangePaddingProperty">
            <summary>
            Identifies the RangePadding dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LineStrokeProperty">
            <summary>
            Identifies the LineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IsOriginCenteredProperty">
            <summary>
            Identifies the LineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.TickLineStrokeProperty">
            <summary>
            Identifies the TickLineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.SmallTickLineStrokeProperty">
            <summary>
             Identifies the SmallTickLineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.AxisVisibilityProperty">
            <summary>
            Identifies the AxisVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.MaxNumberOfLabelsProperty">
            <summary>
            Identifies the MaxNumberOfLabels dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.OpposedPositionProperty">
            <summary>
            Identifies the OpposedPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.TickSizeProperty">
            <summary>
            Identifies the TickSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.SmallTickSizeProperty">
            <summary>
            Identifies the SmallTickSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.SmallTicksPerIntervalProperty">
            <summary>
            Identifies the SmallTicksPerInterval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelRotateAngleProperty">
            <summary>
            Identifies the LabelRotateAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelHorizontalAlignmentProperty">
            <summary>
            Identifies the LabelHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelVerticalAlignmentProperty">
            <summary>
            Identifies the LabelVerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelHeightProperty">
            <summary>
            Identifies the LabelHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelWidthProperty">
            <summary>
            Identifies the LabelWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelBackgroundProperty">
            <summary>
            Identifies the LabelBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelForegroundProperty">
            <summary>
            Identifies the LabelForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelFontFamilyProperty">
            <summary>
            Identifies the LabelFontFamily dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelFontWeightProperty">
            <summary>
            Identifies the LabelFontWeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelFontSizeProperty">
            <summary>
            Identifies the LabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelBorderThicknessProperty">
            <summary>
            Identifies the LabelBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelBorderBrushProperty">
            <summary>
            Identifies the LabelBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelCornerRadiusProperty">
            <summary>
            Identifies the LabelCornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.DesiredIntervalsCountProperty">
            <summary>
            Identifies the DesiredIntervalCOunt dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ValueTypeProperty">
            <summary>
            Identifies the ValueType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IsLogarithmicLabelsProperty">
            <summary>
            Identifies the IsInversed dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IntersectActionProperty">
            <summary>
            Identifies the IntersectAction dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.HeaderAlignmentProperty">
            <summary>
            Identifies the Headeralignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.DoubleDisplayUnitAlignmentProperty">
            <summary>
            Identifies the DoubleDisplayUnitAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.DoubleDisplayUnitVisibilityProperty">
            <summary>
            Using a DependencyProperty as the backing store for DoubleDisplayUnitVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.HeaderPositionProperty">
            <summary>
            Identifies the HeaderPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelTemplateProperty">
            <summary>
            Identifies the LabelTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.MinimumIntervalProperty">
            <summary>
            Identifies the MinimumInterval dependency property.
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IntervalOffsetProperty">
            <summary>
            Identifies the IntervalOffset dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelFormatProperty">
            <summary>
            Identifies the LabelFormat dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelDateTimeFormatProperty">
            <summary>
            Identifies the LabelDateTimeFormat dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelsSourceProperty">
            <summary>
            Identifies the LabelsSource dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.PositionPathProperty">
            <summary>
            Identifies the PositionPath dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ContentPathProperty">
            <summary>
            Identifies the ContentPath dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IndexedProperty">
            <summary>
            Identifies the Indexed dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelsModeProperty">
            <summary>
            Identifies the LabelsMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelsPrefixProperty">
            <summary>
            Identifies the LabelsPrefix dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.LabelsPostfixProperty">
            <summary>
            Identifies the LabelsPostfix dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.VisibleRangePropertyKey">
            <summary>
            Identifies the VisibleRange dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.VisibleRangeProperty">
            <summary>
            Identifies the VisibleRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.VisibleIntervalPropertyKey">
            <summary>
            Identifies the VisibleInterval dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.VisibleIntervalProperty">
            <summary>
            Identifies the VisibleInterval dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.VisibleIntervalOffsetPropertyKey">
            <summary>
            Identifies the VisibleIntervalOffset dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.VisibleIntervalOffsetProperty">
            <summary>
            Identifies the VisibleIntervalOffset dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.IsFractionEnabledOnZoomProperty">
            <summary>
            Identifies the IsFractionEnabledOnZoom dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.HidePartialLabelProperty">
            <summary>
            Identifies the HidePartialLabel dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EdgeLabelsDrawingModeProperty">
            <summary>
            Identifies the EdgeLabelsDrawingMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.RangeCalculationModeProperty">
            <summary>
            Identifies the RangeCalculationMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.EnableBreaksProperty">
            <summary>
             Identifies the EnableBreaks dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorContentVisibilityProperty">
            <summary>
             Identifies the InteractiveCursorContentVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.StripLinesProperty">
            <summary>
            Using a DependencyProperty as the backing store for StripLines.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.TimeSpanIntervalProperty">
            <summary>
            Using a DependencyProperty as the backing store for TimeSpanInterval.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.ActualRangeProperty">
            <summary>
            Identifies the ActualRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxis.MinimalZoomFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinimalZoomFactor.  This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.SetNiceRange(Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            This method compute and set nice range.
            </summary>
            <param name="range">Base range.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.ZoomRange(System.Nullable{Syncfusion.Windows.Chart.DoubleRange})">
            <summary>
            Zooms the range.
            </summary>
            <param name="zoomRange">The zoom range.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.ZoomCenter(System.Double)">
            <summary>
            Zooms by center.
            </summary>
            <param name="factor">The factor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.MulZoomCenter(System.Double)">
            <summary>
            Multiplies the zoom factor by center.
            </summary>
            <param name="mulFactor">The mul factor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.ZoomReset">
            <summary>
            Resets the zoom.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.ValueToCoefficient(System.Double)">
            <summary>
            Converts value of passed point co-ordinate to control related co-ordinate.
            </summary>
            <param name="value">The value of point on axis.</param>
            <returns>Co-ordinate of point related to chart control.</returns>
            <seealso cref="M:Syncfusion.Windows.Chart.ChartAxis.CoefficientToValue(System.Double)"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CoefficientToValue(System.Double)">
            <summary>
            Converts co-ordinate of point related to chart control to axis units.
            </summary>
            <param name="value">The absolute point value.</param>
            <returns>The value of point on axis.</returns>
            <seealso cref="M:Syncfusion.Windows.Chart.ChartAxis.ValueToCoefficient(System.Double)"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CheckForUpdate(System.Windows.DependencyProperty)">
            <summary>
            Chaeck whether need for update or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateVisibleRange">
            <summary>
            Calculates the visible range.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateVisibleLables">
            <summary>
            Calculates the visible lables.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.GetLabelContent(System.Double)">
            <summary>
            Gets the content of the label.
            </summary>
            <param name="pos">The position.</param>
            <returns>The LAbel content</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.Invalidate">
            <summary>
            Recalculates visible range and visible labels.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.GetNiceInterval(Syncfusion.Windows.Chart.DoubleRange,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the nice interval.
            </summary>
            <param name="range">The range.</param>
            <param name="desiredIntervalCount">The desired interval count.</param>
            <param name="isLogarithmicLabels">if set to <c>true</c> [is logarithmic labels].</param>
            <param name="isIndexed">if set to <c>true</c> [is indexed].</param>
            <returns>The NiceInterval</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.GetNiceIntervalOffset(Syncfusion.Windows.Chart.DoubleRange,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets the nice interval offset.
            </summary>
            <param name="range">The range.</param>
            <param name="interval">The interval.</param>
            <param name="isLogarithmicLabels">if set to <c>true</c> [is logarithmic labels].</param>
            <param name="isIndexed">if set to <c>true</c> [is indexed].</param>
            <returns>The NiceIntervalOffset</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateLogarithmicPadding(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.ChartRangePaddingType,System.Double@,System.Double@)">
            <summary>
            Calculates the logarithmic padding.
            </summary>
            <param name="range">The range.</param>
            <param name="rangePadding">The range padding.</param>
            <param name="tickInterval">The tick interval.</param>
            <param name="tickOffset">The tick offset.</param>
            <returns>The Logarithmic Padding</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculatePadding(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.ChartRangePaddingType,System.Double@,System.Double@)">
            <summary>
            Calculates the padding.
            </summary>
            <param name="range">The range.</param>
            <param name="rangePadding">The range padding.</param>
            <param name="tickInterval">The tick interval.</param>
            <param name="tickOffset">The tick offset.</param>
            <returns>the padding</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIntervalOld(Syncfusion.Windows.Chart.DoubleRange,System.Int32,System.Double@,System.Double@)">
            <summary>
            Calculates the nice interval.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="desiredIntervalCount">The desired interval count.</param>
            <param name="interval">The interval.</param>
            <param name="intervalStart">The interval start.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIndexedInterval(Syncfusion.Windows.Chart.DoubleRange,System.Int32)">
            <summary>
            Calculates the nice indexed interval.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="desiredIntervalCount">The desired interval count.</param>
            <returns>The NiceIndexedInterval</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIndexedIntervalOffset(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Calculates the nice indexed interval.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="interval">The interval.</param>
            <returns>the NiceIndexedIntervalOffset</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIndexedIntervalForLogAxis(Syncfusion.Windows.Chart.DoubleRange,System.Int32)">
            <summary>
            Calculates the nice indexed interval for log axis.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="desiredIntervalCount">The desired interval count.</param>
            <returns>The NiceIndexedIntervalForLogAxis</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIndexedIntervalOffsetForLogAxis(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Calculates the nice indexed interval for log axis.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="intervalMult">The interval mult.</param>
            <returns>The NiceIndexedIntervalOffsetForLogAxis</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceInterval(Syncfusion.Windows.Chart.DoubleRange,System.Int32)">
            <summary>
            Calculates the nice interval.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="desiredIntervalCount">The desired interval count.</param>
            <returns>The NiceInterval</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIntervalOffset(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Calculates the nice interval offset.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="interval">The interval.</param>
            <returns>The NiceIntervalOffset</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIntervalForLogAxis(Syncfusion.Windows.Chart.DoubleRange,System.Int32)">
            <summary>
            Calculates the nice interval for log axis.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="desiredIntervalCount">The desired interval count.</param>
            <returns>The NiceIntervalForLogAxis</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CalculateNiceIntervalOffsetForLogAxis(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Calculates the nice interval for log axis.
            </summary>
            <param name="dr">The DoubleRange dr.</param>
            <param name="intervalMultiplier">The interval multiplier.</param>
            <returns>The NiceIntervalOffsetForLogAxis</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.RaiseChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Chart.ChartAxis.Changed"/> event.
            </summary>
            <param name="sender">Sender of event.</param>
            <param name="args">The EventAgrument args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"></see> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnBreakRangeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when break range is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnStripLinesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when strip lines collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCustomLablesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when custom lables collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceZoomFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the zoom factor.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>the ZoomFactor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceMinimalZoomFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the minimal zoom factor.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>the MinimalZoomFactor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceDateTimeRange(System.Windows.DependencyObject,System.Object)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceRange(System.Windows.DependencyObject,System.Object)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceActualRange(System.Windows.DependencyObject,System.Object)">
            <summary>d
            Coerces the actual range.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The ActualRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceZoomPosition(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the zoom position.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The ZoomPosition</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceInterval(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce interval].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The Interval</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnLabelAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LabelHorizontalAlignment and LabelVerticalAlignment properties are changed.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnLabelSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LabelWidth and LabelHeight properties are changed.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnSmallTicksPerIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when SmallTicksPerInterval property changed.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.RaiseMouseEvent(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Raises corresponding mouse event on ChartAxis.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnDateTimeRangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when date time range changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnDateTimeIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DateTimeInterval property was changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnMinimalZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Triggers when MinimalZoomFactor changed.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnAutoSetRangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnEnableAutoScrollingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the EnableAutoScrolling value is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnShowAllLablesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ShowAllLables value is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnAutoScrollingDeltaChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the AutoScrollingDelta value is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnMinimumIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when MinimumInterval property changed.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnMinimumDateTimeIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when MinimumDateTimeInterval property changed.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnRangeCalcultaionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the RangeCalculationMode is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.RangeCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Corces Range property.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The Range value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [interval property changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnBaseIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [BaseInterval property changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnDesiredIntervalsCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DesiredIntervalsCount property was changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnLogarithmicBasePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LogarithmicBase property changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CoerceOriginProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the origin property.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The OriginProperty</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnCoerceAutoSetRange(System.Windows.DependencyObject,System.Object)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.CoerceDesiredIntervalsCountProperty(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the desired intervals count property.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The DesiredIntervalsCount</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnVisibleRangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when visible range gets changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnRangePaddingPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when RangePadding property was changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.OnOriginPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when origin property was changed. 
            </summary> 
            <param name="d">The DependencyObject d.</param> 
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param> 
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxis.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EdgeLabelsVisibilityMode">
            <summary>
            Get or Set EdgeLabelsVisibilityMode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.BaseInterval">
            <summary>
            Gets or sets the tick interval.
            </summary>
            <value>The tick interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.HideRepeatedLabels">
            <summary>
            Gets or Sets the HideRepeatedLabels 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EnableSmartAxisLabel">
            <summary>
            Gets or Sets the SmartAxisLabel 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.DoubleDisplayUnit">
            <summary>
            Gets or Sets the SmartAxisLabel 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelTimeSpanFormat">
            <summary>
            Gets or Sets the LabelTimeSpanFormat 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.AxisLabelsPosition">
            <summary>
            Gets or Sets the AxisLabels 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ShowAllLabels">
            <summary>
            Gets or Sets the ShowAllLabels, used to show the labels for all segments not depends on interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ForceZero">
            <summary>
            Get and Set ForceZeroProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.AliasedModeRendering">
            <summary>
            Handles the Axisline Rendering behavior
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LogarithmicInterval">
            <summary>
            Get and Set LogarithmicIntervalProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelLogarithmicFormat">
            <summary>
            Get and Set LabelLogarithmicFormatProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsSetDataValueRange">
            <summary>
            property for Check DataValueRange is set or not
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.TickLinesPosition">
            <summary>
            Gets or Sets the TickLinesPosition 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.TickLinesRange">
            <summary>
            Gets or Sets the ChartTickLinesPosition 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.SmallTickLinesRange">
            <summary>
            Gets or Sets the ChartTickLinesPosition 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelPosition">
            <summary>
            Gets or Sets the LabelPosition
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelContent">
            <summary>
            Get and Set InteractiveCursorLabelContentProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelLeftPosition">
            <summary>
            Get and Set InteractiveCursorLabelLeftPositionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelTopPosition">
            <summary>
            Get and Set the InteractiveCursorLabelTopPosition property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorTemplate">
            <summary>
            Get and Set InteractiveCursorTemplateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelForeground">
            <summary>
            Gets or Sets the Interactive cursor LabelForeground color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorLabelBackground">
            <summary>
            Gets or Sets the Interactive cursor LabelBackground color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsOpen">
            <summary>
            Property to set the IsOpen property of the Interactive cursor label popup
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Margin">
            <summary>
            Gets or sets the ChartAxisPanel Margin Value 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.AdditionalPadding">
            <summary>
            Property for Move ChartSegmnets 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.AutoScrollingDelta">
            <summary>
            Gets or sets the delta value which determines the range of value to be visible during autoscrolling
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EnableAutoScrolling">
            <summary>
            Gets or sets the EnableAutoScrolling value to enable the auto scrolling
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.BreakRange">
            <summary>
            Gets or sets the BreakRange value to add the break ranges
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAxis.Changed">
            <summary>
            Occurs when axis was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAxis.RangeChanged">
            <summary>
            Occurs when axis range is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.DoubleDisplayUnitVisibility">
            <summary>
            Get and Set DoubleDisplayUnitVisibilityProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.InteractiveCursorContentVisibility">
            <summary>
            Gets or sets the User defined template for Vertical Label.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EnableBreaks">
            <summary>
            Get and Set EnableBreaksProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EdgeLabelsDrawingMode">
            <summary>
            Gets or sets a value indicating mode that controls partially visible labels behaviour.
            </summary>
            <value><c>true</c> if partial labels should be hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.HidePartialLabel">
            <summary>
            Gets or sets a value indicating whether labels that appear partially should be hidden.
            </summary>
            <value><c>true</c> if partial labels should be hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.RangeCalculationMode">
            <summary>
            This property only for Indexed axis.
            RangeCalculationMode is AdjustAcrossChartTypes - Segment position between ticks by default.
            RangeCalculationMode is ConsistentAcrossChartTypes - Segment position on ticks by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsFractionEnabledOnZoom">
            <summary>
            Gets or sets a value indicating whether fractional axis values are shown. This
            is a dependency property.
            </summary>
            <value>
            <c>true</c> if fractional labels are enabled on zoom; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Disabling fraction labels on axis.
            chart.Areas[0].PrimaryAxis.IsFractionEnabledOnZoom = False;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
             &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
               &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
               &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                   &lt;!--Disabling fraction labels on axis.--&gt;
                   &lt;syncfusion:ChartAxis IsFractionEnabledOnZoom="False"/&gt;
               &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
             &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Header">
            <summary>
            Gets or sets the title of the axis. This is a dependency property.
            </summary>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            ChartAxis chartXAxis = new ChartAxis();
            chartXAxis.Header = "X - Axis";
            chart.Areas[0].PrimaryAxis = chartXAxis;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
               &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
               &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                   &lt;!--Setting header for primary axis--&gt;
                   &lt;syncfusion:ChartAxis Header="X - Axis"/&gt;
               &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.HeaderPosition">
            <summary>
            Gets or sets the axis header position.
            </summary>
            <value>
            The header position is one of the <see cref="T:Syncfusion.Windows.Chart.ChartAlignment"/> enumeration
            values.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
                InitializeComponent();
                //Creating new chart instance.
                Chart chart = new Chart();
                //Adding a new area.
                chart.Areas.Add(new ChartArea());
                //Creating datapoints collection.
                ChartListData data = new ChartListData();
                data.Add(new ChartPoint(1, 1));
                data.Add(new ChartPoint(2, 2));
                data.Add(new ChartPoint(3, 3));
                data.Add(new ChartPoint(4, 4));
                //Creating series.
                ChartSeries series = new ChartSeries();
                //Assigning points.
                series.Data = data;
                chart.Areas[0].Series.Add(series);
                ChartAxis chartXAxis = new ChartAxis();
                chartXAxis.Header = "X - Axis";
                // Setting Header Position.
                chartXAxis.HeaderPosition = AxisHeaderPosition.Far;
                chart.Areas[0].PrimaryAxis = chartXAxis;
                //Assigning window's content property.
                this.Content = chart;
            }
            </code>
            XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
               &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
                &lt;!--Setting Header position for primary axis labels--&gt;
               &lt;syncfusion:ChartArea.PrimaryAxis HeaderPosition="Far" &gt;
               &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.HeaderAlignment">
            <summary>
            Gets or sets the header alignment. This is a dependency property.
            </summary>
            <value>
            The header alignment is one of the <see cref="T:Syncfusion.Windows.Chart.ChartAlignment"/> enumeration
            values.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            ChartAxis chartXAxis = new ChartAxis();
            chartXAxis.Header = "X - Axis";
            //Setting header's alignment.
            chartXAxis.HeaderAlignment = ChartAlignment.Near;
            chart.Areas[0].PrimaryAxis = chartXAxis;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
               &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
               &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                   &lt;!--Setting header alignment for primary axis--&gt;
                   &lt;syncfusion:ChartAxis Header="X - Axis" HeaderAlignment="Near"/&gt;
               &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.DoubleDisplayUnitAlignment">
            <summary>
            Get and Set DoubleDisplayUnitAlignmentProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.TickSize">
            <summary>
            Gets or sets the length of the axis' tick. This is a dependency property.
            </summary>
            <value>
            The length of the axis' tick.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
                InitializeComponent();
                //Creating new chart instance.
                Chart chart = new Chart();
                //Adding a new area.
                chart.Areas.Add(new ChartArea());
                //Creating datapoints collection.
                ChartListData data = new ChartListData();
                data.Add(new ChartPoint(1, 1));
                data.Add(new ChartPoint(2, 2));
                data.Add(new ChartPoint(3, 3));
                data.Add(new ChartPoint(4, 4));
                //Creating series.
                ChartSeries series = new ChartSeries();
                //Assigning points.
                series.Data = data;
                chart.Areas[0].Series.Add(series);
                ChartAxis chartXAxis = new ChartAxis();
                chartXAxis.Header = "X - Axis";
                //Setting axis' tick size.
                chartXAxis.TickSize = 20;
                chart.Areas[0].PrimaryAxis = chartXAxis;
                //Assigning window's content property.
                this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
               &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
               &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                   &lt;!--Setting tick size for primary axis--&gt;
                   &lt;syncfusion:ChartAxis TickSize="20"/&gt;
               &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LineStroke">
            <summary>
            Gets or sets the pen that used to draw the axis line. This is a dependency
            property.
            </summary>
            <value>
            The line stroke.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
                InitializeComponent();
                //Creating new chart instance.
                Chart chart = new Chart();
                //Adding a new area.
                chart.Areas.Add(new ChartArea());
                //Creating datapoints collection.
                ChartListData data = new ChartListData();
                data.Add(new ChartPoint(1, 1));
                data.Add(new ChartPoint(2, 2));
                data.Add(new ChartPoint(3, 3));
                data.Add(new ChartPoint(4, 4));
                //Creating series.
                ChartSeries series = new ChartSeries();
                //Assigning points.
                series.Data = data;
                chart.Areas[0].Series.Add(series);
                //Creating a new pen.
                Pen axisPen = new Pen();
                axisPen.Brush = Brushes.Red;
                axisPen.DashCap = PenLineCap.Round;
                axisPen.Thickness = 4;
                axisPen.DashStyle = new DashStyle(new [] {1d, 0d, 1d}, 0d);
                //Assigning new pen to primary axis' LineStroke property.
                chart.Areas[0].PrimaryAxis.LineStroke = axisPen;
                //Assigning window's content property.
                this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
               &lt;!--Setting axis pen for primary axis--&gt;
               &lt;syncfusion:ChartAxis&gt;
                   &lt;syncfusion:ChartAxis.LineStroke&gt;
                       &lt;Pen Brush="Red" DashCap="Round" Thickness="4"&gt;
                           &lt;Pen.DashStyle&gt;
                               &lt;DashStyle Dashes="1 0 1"/&gt;
                           &lt;/Pen.DashStyle&gt;
                       &lt;/Pen&gt;
                   &lt;/syncfusion:ChartAxis.LineStroke&gt;
               &lt;/syncfusion:ChartAxis&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsOriginCentered">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.TickLineStroke">
            <summary>
            Gets or sets the pen that used to draw the axis tick lines. This is a dependency
            property.
            </summary>
            <value>
            The tick line stroke.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
                InitializeComponent();
                //Creating new chart instance.
                Chart chart = new Chart();
                //Adding a new area.
                chart.Areas.Add(new ChartArea());
                //Creating datapoints collection.
                ChartListData data = new ChartListData();
                data.Add(new ChartPoint(1, 1));
                data.Add(new ChartPoint(2, 2));
                data.Add(new ChartPoint(3, 3));
                data.Add(new ChartPoint(4, 4));
                //Creating series.
                ChartSeries series = new ChartSeries();
                //Assigning points.
                series.Data = data;
                chart.Areas[0].Series.Add(series);
                //Creating a new pen.
                Pen axisPen = new Pen();
                axisPen.Brush = Brushes.Red;
                axisPen.DashCap = PenLineCap.Round;
                axisPen.Thickness = 4;
                axisPen.DashStyle = new DashStyle(new [] {1d, 0d, 1d}, 0d);
                //Assigning new pen to primary axis' TickLineStroke property.
                chart.Areas[0].PrimaryAxis.TickLineStroke = axisPen;
                //Assigning window's content property.
                this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting axis ticks pen for primary axis--&gt;
            &lt;syncfusion:ChartAxis&gt;
            &lt;syncfusion:ChartAxis.TickLineStroke&gt;
            &lt;Pen Brush="Red" DashCap="Round" Thickness="4"&gt;
            &lt;Pen.DashStyle&gt;
            &lt;DashStyle Dashes="1 0 1"/&gt;
            &lt;/Pen.DashStyle&gt;
            &lt;/Pen&gt;
            &lt;/syncfusion:ChartAxis.TickLineStroke&gt;
            &lt;/syncfusion:ChartAxis&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.SmallTickLineStroke">
            <summary>
            Get and Set SmallTickLineStrokeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.SmallTickSize">
            <summary>
            Gets or sets the size of the small tick. This is a dependency property.
            </summary>
            <remarks>
            Small tick cannot be longer than label tick.
            </remarks>
            <value>
            The size of the small tick.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting small tick size.
            chart.Areas[0].PrimaryAxis.SmallTickSize = 15;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting small tick size--&gt;
            &lt;syncfusion:ChartAxis SmallTickSize="15"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.SmallTicksPerInterval">
            <summary>
            Gets or sets the small ticks per interval. This is a dependency property.
            </summary>
            <value>
            The small ticks per interval.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting small ticks per interval value.
            chart.Areas[0].PrimaryAxis.SmallTicksPerInterval = 2;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting small ticks per interval value.--&gt;
            &lt;syncfusion:ChartAxis SmallTicksPerInterval="2"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelRotateAngle">
            <summary>
            Gets or sets the label rotate angle. This is a dependency property.
            </summary>
            <remarks>
            Property represents the angle that axis' labels should be rotated.
            </remarks>
            <value>
            The label rotate angle in degrees.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting label rotate angle value.
            chart.Areas[0].PrimaryAxis.LabelRotateAngle = 45;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Angle to rotate axis' labels.--&gt;
            &lt;syncfusion:ChartAxis LabelRotateAngle="45"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelHorizontalAlignment">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> label horizontal alignment. 
            This is a dependency property.
            </summary>
            <value>
            The label's horizontal alignment.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelVerticalAlignment">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> label vertical alignment. 
            This is a dependency property.
            </summary>
            <value>
            The label's vertical alignment.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelHeight">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> label height. 
            This is a dependency property.
            </summary>
            <value>
            The label's height.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelWidth">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> label width. 
            This is a dependency property.
            </summary>
            <value>
            The label's width.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelFontFamily">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> label font family. This is a dependency
            property.
            </summary>
            <value>
            The label's font family.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Creating font family converter.
            FontFamilyConverter fontConverter = new FontFamilyConverter();
            //Assigning new font for axis labels.
            chart.Areas[0].PrimaryAxis.LabelFontFamily =
            (FontFamily)fontConverter.ConvertFromString("Times New Roman");
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' font family--&gt;
            &lt;syncfusion:ChartAxis LabelFontFamily="Times New Roman"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelBackground">
            <summary>
            Gets or sets Axis labels Background. This is a dependency property.
            </summary>
            <remarks>
            Property represents label's border background.
            </remarks>
            <value>
            The label's background brush.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning new brush for axis labels background.
            chart.Areas[0].PrimaryAxis.LabelBackground = Brushes.Red;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' background brush--&gt;
            &lt;syncfusion:ChartAxis LabelBackground="Red"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelFontSize">
            <summary>
            Gets or sets a value indicating the axis labels font size. This is a dependency
            property.
            </summary>
            <value>
            The size of the label font.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning size of label's font.
            chart.Areas[0].PrimaryAxis.LabelFontSize = 20;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' font size--&gt;
            &lt;syncfusion:ChartAxis LabelFontSize="20"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelForeground">
            <summary>
            Gets or sets axis labels foreground brush. This is a dependency property.
            </summary>
            <value>
            The label foreground color.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning new brush for axis labels foreground.
            chart.Areas[0].PrimaryAxis.LabelBackground = Brushes.Green;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' foreground brush--&gt;
            &lt;syncfusion:ChartAxis LabelBackground="Blue"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelFontWeight">
            <summary>
            Gets or sets a value indicating the axis labels font weight. This is a
            dependency property.
            </summary>
            <value>
            The label font weight.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning new brush for axis labels font weight.
            chart.Areas[0].PrimaryAxis.LabelFontWeight = FontWeights.Bold;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' background brush--&gt;
            &lt;syncfusion:ChartAxis LabelFontWeight="Bold"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelBorderThickness">
            <summary>
            Gets or sets axis labels border thickness. This is a dependency property.
            </summary>
            <value>
            The thickness of label's border .
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning new brush for axis label's border thickness.
            chart.Areas[0].PrimaryAxis.LabelBorderThickness = 3;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' border thickness--&gt;
            &lt;syncfusion:ChartAxis LabelBorderThickness="3"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelBorderBrush">
            <summary>
            Gets or sets axis labels border brush. This is a dependency property.
            </summary>
            <value>
            The label's border brush.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning new brush for axis label's border brush.
            chart.Areas[0].PrimaryAxis.LabelBorderBrush = Brushes.Red;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' border brush--&gt;
            &lt;syncfusion:ChartAxis LabelBorderBrush="Red"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelCornerRadius">
            <summary>
            Gets or sets axis labels corner radius. This is a dependency property.
            </summary>
            <value>
            The label's border corner radius.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Assigning new brush for axis label's border corner radius.
            chart.Areas[0].PrimaryAxis.LabelCornerRadius = new CornerRadius(10,3,10,2);
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting labels' border radius--&gt;
            &lt;syncfusion:ChartAxis LabelCornerRadius="10,3,10,2"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LogarithmicRange">
            <summary>
            Gets or sets the LogarithmicRange
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.AxisVisibility">
            <summary>
            Gets or sets the axis visibility.
            </summary>
            <value>The axis visibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IgnoreRangePaddingsOnZoom">
            <summary>
            Gets or sets a value indicating whether range paddings should be ignored when axis is zoomed.
            This is a dependency property.
            </summary>
            <value>
            <c>true</c> if range paddings are ignored on zoom; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EnableLogLabels">
            <summary>
            Gets or sets a value for EnabelLogLabels
            This is a dependency property.
            </summary>      
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsInversed">
            <summary>
            Gets or sets a value indicating whether the axis should be reversed. When
            reversed, the axis will render points from right to left if horizontal, top to
            bottom when vertical and clockwise if radial. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if this axis is inversed; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Making primary axis inversed.
            chart.Areas[0].PrimaryAxis.IsInversed = True;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting primary axis to inversed state.--&gt;
            &lt;syncfusion:ChartAxis IsInversed="true"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsLogarithmic">
            <summary>
            Gets the value indicating whether this axis is logarithmic. This is a
            dependency property.
            </summary>
            <remarks>
            Presentation of data on a logarithmic scale can be helpful when the data covers
            a large range of values � the logarithm reduces this to a more manageable range.
            </remarks>
            <value>
            <c>true</c> if this instance is logarithmic; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting primary axis to logarithmic state.
            chart.Areas[0].PrimaryAxis.IsLogarithmic = True;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            x:Class="WpfApplication2.Window1"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting primary axis to logarithmic state.--&gt;
            &lt;syncfusion:ChartAxis IsLogarithmic="true"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LogarithmicBase">
            <summary>
            Gets or sets the logarithmic base. This is a dependency property.
            </summary>
            <value>The logarithmic base.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsAutoSetRange">
            <summary>
            Gets or sets a value indicating whether range that axis should display is being
            set automatically.
            </summary>
            <remarks>
            Property should be used for custom range scenarios.
            </remarks>
            <value>
            <c>true</c> if range for axis should be set automatically; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Disabling automatic range setting.
            chart.Areas[0].PrimaryAxis.IsAutoSetRange = False;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Disabling automatic range setting.--&gt;
            &lt;syncfusion:ChartAxis IsAutoSetRange="false"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.VisibleRange">
            <summary>
            Gets the visible range.
            </summary>
            <value>The visible <see cref="T:Syncfusion.Windows.Chart.DoubleRange"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.VisibleInterval">
            <summary>
            Gets the visible interval.
            </summary>
            <value>The visible interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.VisibleIntervalOffset">
            <summary>
            Gets the visible interval.
            </summary>
            <value>The visible interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LogarithmicVisibleRange">
            <summary>
            Gets the logarithmic visible range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Range">
            <summary>
            Gets or sets a value indicating the range that axis should display. Note: The Range will be applicable only when the Axis.IsAutoSetRange is set as false.
            </summary>
            <remarks>
            Despite of what range series' data represents, only assigned range will be
            shown. <para />  Custom range can be helpful for custom scrolling axis scenarios.
            </remarks>
            <value>
            The range to show on axis.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting primary axis range from 1 to 3.
            chart.Areas[0].PrimaryAxis.Range = new DoubleRange(1, 3);
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting custom range for the axis.--&gt;
            &lt;syncfusion:ChartAxis Range="1,3"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.DateTimeRange">
            <summary>
            Gets or sets the DatTimeRange. This is a dependency property. Note: The DateTimeRange will be applicable only when the Axis.IsAutoSetRange is set as false.
            </summary>
            <value>The DatTimeRange.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Origin">
            <summary>
            Gets or sets the origin value. This is a dependency property.
            </summary>
            <remarks>
            Property gives ability to specify a custom origin for axis for <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Bar">Bar</see>, <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Column">Column</see>,
            <see cref="F:Syncfusion.Windows.Chart.ChartTypes.StackingColumn">StackingColumn</see> and <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Area">Area</see>. The origin can be any specific value in the
            axis range or it can also be a specific data point's value.
            </remarks>
            <value>
            The origin value.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            series.Type = ChartTypes.Column;
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Shifting series' Origin to 10 points.
            chart.Areas[0].PrimaryAxis.Origin = 10;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4" Type="Column"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Setting origin for the axis.--&gt;
            &lt;syncfusion:ChartAxis Origin="10"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EnableAutoIntervalOnZooming">
            <summary>
            Get and Set EnableAutoIntervalOnZoomingProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.EnableZooming">
            <summary>
            Gets or sets a value indicating whether the axis can be zoomed. This is a
            dependency property.
            </summary>
            <remarks>
            This property is intended to be used for specific zooming scenarios when axis'
            series zooming should be prevented.
            </remarks>
            <value>
            <c>true</c> if axis can be zoomed in zooming mode; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Shifting series' Origin to 10 points.
            chart.Areas[0].PrimaryAxis.EnableZooming = false;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;!--Disabling Zoomingfor the axis.--&gt;
            &lt;syncfusion:ChartAxis EnableZooming="false"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaCommands">ChartAreaCommands</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAreaCommands.SwitchZooming">ChartAreaCommands.SwitchZooming</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomIn">ChartAreaCommands.ZoomIn</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomOut">ChartAreaCommands.ZoomOut</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomReset">ChartAreaCommands.ZoomReset</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAreaCommands.CancelZooming">ChartAreaCommands.CancelZooming</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ZoomPosition">
            <summary>
            Gets or sets the zoom position.
            </summary>
            <value>The zoom position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ZoomFactor">
            <summary>
            Gets or sets the zoom factor.
            </summary>
            <value>The zoom factor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ValueType">
            <summary>
            Gets or sets the type of the value that chart axis displays. This is a dependency property.
            </summary>
            <value>The type of the value.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartValueType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.StripLines">
            <summary>
            Gets the strip lines collection.
            </summary>
            <remarks>
            Property represents <see cref="T:Syncfusion.Windows.Chart.ChartStripLine">ChartStripLines</see> that should
            be drawn for specified axis.
            </remarks>
            <value>
            The strip lines.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Creating a new chart stripline.
            ChartStripLine stripline = new ChartStripLine();
            //Setting additional properties.
            stripline.Interior = Brushes.Black;
            stripline.Period = 2;
            stripline.Length = 1;
            //Adding stripline to collection.
            chart.Areas[0].PrimaryAxis.Striplines.Add(stripline);
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis.StripLines&gt;
            &lt;syncfusion:ChartStripLine Interior="Black" Period="2" Length="1"/&gt;
            &lt;/syncfusion:ChartAxis.StripLines&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStripLine">ChartStripLine</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStripLinesCollection">ChartStripLinesCollection</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis">ChartAxis</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelFormat">
            <summary>
            Gets or sets the label format. This is a dependency property.
            </summary>
            <remarks>
            Represents pattern that describes how axis labels should be displayed.
            </remarks>
            <value>
            The strip lines.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting axis labels format.
            chart.Areas[0].PrimaryAxis.LabelFormat = "1.00";
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis LabelFormat="1.00"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis">ChartAxis</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelDateTimeFormat">
            <summary>
            Gets or sets the label date time format. This is a dependency property.
            </summary>
            <value>
            The strip lines.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting axis labels date time format.
            chart.Areas[0].PrimaryAxis.LabelDateTimeFormat = "dd/yy/mm";
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis LabelDateTimeFormat="dd/yy/mm"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis">ChartAxis</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IntersectAction">
            <summary>
            Gets or sets the intersecting layout behaviour for the labels of axis. This is a
            dependency property.
            </summary>
            <remarks>
            Sometimes it can happen that labels are too large and intersect. Axis supports
            several methods to prevent intersections. <para/> LabelIntersectAction is
            supported only by rectangular coordinate system. <see cref="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.Wrap"/> and <see cref="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.Rotate"/> modes are ignored by vertical axes
            simply because these modes are inefficient. It is recommended to set
            LabelTemplate property in Wrap mode via TextWraping property of the TextBlock.
            </remarks>
            <value>
            One of <see cref="T:Syncfusion.Windows.Chart.ChartLabelIntersectAction"/> enumeration values.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting intersect action for labels.
            chart.Areas[0].PrimaryAxis.IntersectAction = ChartLabelIntersectAction.Rotate;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis IntersectAction="Rotate"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Orientation">
            <summary>
            Gets or sets the orientation of axis. This is a dependency property.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Windows.Chart.ChartArea.PrimaryAxis"/> has always is horizontal orientation, <see cref="P:Syncfusion.Windows.Chart.ChartArea.SecondaryAxis"/> has vertical as well.
            <para/>
            Property should be used in multiple axes scenarios. 
            </remarks>
            <value>The axis orientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.OpposedPosition">
            <summary>
            Gets or sets a value indicating whether axis should be in opposed position.
            </summary>
            <value>
            <c>true</c> if axis should be at the bottom Horizontal orientation) of left (for the Vertical orientation) side of area; otherwise, <c>false</c> if axis should be at the top (for the Horizontal orientation) of right(for the Vertical orientation) side of area.
            </value>
            <example>
            C#: <code language="C#:">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Setting both axes to opposed positions.
            chart.Areas[0].PrimaryAxis.OpposedPosition = True;
            chart.Areas[0].SecondaryAxis.OpposedPosition = True;
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis OpposedPosition="True"/&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartArea.SecondaryAxis&gt;
            &lt;syncfusion:ChartAxis OpposedPosition="True"/&gt;
            &lt;/syncfusion:ChartArea.SecondaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisLabel">ChartAxisLabel</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IsLogarithmicLabels">
            <summary>
            Gets or sets a value indicating whether this axis has logarithmic labels.
            </summary>
            <value>
               <c>true</c> if this axis has logarithmic labels; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.RangePadding">
            <summary>
            Gets or sets the range padding for axis' range.
            This property works only for Non-Indexed axis.
            </summary>
            <value>The value should be set from one of <see cref="T:Syncfusion.Windows.Chart.ChartRangePaddingType"/> enumeration.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.DesiredIntervalsCount">
            <summary>
            Gets or sets the desired intervals count.
            </summary>
            <remarks>
            Property indicates quantity of intervals that axis range should be divided by.
            </remarks>
            <value>The desired intervals count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Interval">
            <summary>
            Gets or sets the tick interval.
            </summary>
            <value>The tick interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.MinimumInterval">
            <summary>
            Gets or sets the minimum interval.
            </summary>
            <value>The Minimum interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.DateTimeInterval">
            <summary>
            Gets or sets the DateTimeInterval. This is a dependency property.
            </summary>
            <value>The DateTimeInterval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.TimeSpanInterval">
            <summary>
            Get and Set TimeSpanIntervalProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.MinimumDateTimeInterval">
            <summary>
            Gets or sets the minimum DateTime interval.
            </summary>
            <value>The Minimum DateTime interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.IntervalOffset">
            <summary>
            Gets or sets the tick offset.
            </summary>
            <value>The tick offset.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Indexed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/> is indexed.
            </summary>
            <value><c>true</c> if indexed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelsMode">
            <summary>
            Gets or sets the labels mode. This is a dependency property.
            </summary>
            <remarks>
            Property indicates how labels should retrieve their values.
            </remarks>
            <value>The labels mode. One of <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabelsMode"/> enumeration values.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelsPrefix">
            Gets or sets the labels prefix template. This is a dependency property.
            
            <value>
            The labels prefix template.
            </value>
            <example>
            C#: <code>
            This property is not intended to be used from C#.
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="300" Width="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Chart;assembly=Syncfusion.Chart.Wpf"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Type="RangeColumn"
            Data="0 {7 4} 1 {8 3} 2 {9 7} 3 {3 6} 4 {1 2} 5 {8 11} 6 {3 2} 7 {8 4}"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis&gt;
            &lt;syncfusion:ChartAxis.LabelsPrefix&gt;
            &lt;DataTemplate&gt;
            &lt;TextBlock Text="$" &gt;
            &lt;/DataTemplate&gt;
            &lt;/syncfusion:ChartAxis.LabelsPrefix&gt;
            &lt;/syncfusion:ChartAxis&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelsPostfix">
            <summary>
            Gets or sets the labels postfix template. This is a dependency property.
            </summary>
            <value>
            The labels postfix template.
            </value>
            <example>
            C#: <code>
            This property is not intended to be used from C#.
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="300" Width="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Chart;assembly=Syncfusion.Chart.Wpf"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Type="RangeColumn"
            Data="0 {7 4} 1 {8 3} 2 {9 7} 3 {3 6} 4 {1 2} 5 {8 11} 6 {3 2} 7 {8 4}"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis&gt;
            &lt;syncfusion:ChartAxis.LabelsPostfix&gt;
            &lt;DataTemplate&gt;
            &lt;TextBlock Text="$" &gt;
            &lt;/DataTemplate&gt;
            &lt;/syncfusion:ChartAxis.LabelsPostfix&gt;
            &lt;/syncfusion:ChartAxis&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelTemplate">
            <summary>
            Gets or sets the labels template. This is a dependency property.
            </summary>
            <value>
            The labels template.
            </value>
            <example>
            C#: <code>
            This property is not intended to be used from C#.
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="300" Width="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Chart;assembly=Syncfusion.Chart.Wpf"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Type="RangeColumn"
            Data="0 {7 4} 1 {8 3} 2 {9 7} 3 {3 6} 4 {1 2} 5 {8 11} 6 {3 2} 7 {8 4}"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis&gt;
            &lt;syncfusion:ChartAxis.LabelTemplate&gt;
            &lt;DataTemplate&gt;
            &lt;Border&gt;
            &lt;Button Content="{Binding Content}"/&gt;
            &lt;/Border&gt;
            &lt;/DataTemplate&gt;
            &lt;/syncfusion:ChartAxis.LabelTemplate&gt;
            &lt;/syncfusion:ChartAxis&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.CustomLabels">
            <summary>
            Gets the custom labels for axis.
            </summary>
            <remarks>
            This property allows add custom <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabel">labels</see> to axis.
            Gridlines are being drawn for custom labels in the same way as for default
            labels.
            </remarks>
            <value>
            The custom labels <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabelsCollection">collection</see>.
            </value>
            <example>
            C#: <code>
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding a new area.
            chart.Areas.Add(new ChartArea());
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating series.
            ChartSeries series = new ChartSeries();
            //Assigning points.
            series.Data = data;
            chart.Areas[0].Series.Add(series);
            //Creating custom label.
            ChartAxisLabel customLabel = new ChartAxisLabel();
            customLabel.Content = "3.5";
            customLabel.Position = 3.5;
            //Adding custom label to labels collection.
            chart.Areas[0].PrimaryAxis.CustomLabels.Add(customLabel);
            //Assigning window's content property.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="300" Width="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Chart;assembly=Syncfusion.Chart.Wpf"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Type="RangeColumn"
            Data="0 {7 4} 1 {8 3} 2 {9 7} 3 {3 6} 4 {1 2} 5 {8 11} 6 {3 2} 7 {8 4}"/&gt;
            &lt;syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;syncfusion:ChartAxis&gt;
            &lt;syncfusion:ChartAxis.CustomLabels&gt;
            &lt;syncfusion:ChartAxisLabel Content="3.5" Position="3.5"/&gt;
            &lt;/syncfusion:ChartAxis.CustomLabels&gt;
            &lt;/syncfusion:ChartAxis&gt;
            &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.LabelsSource">
            <summary>
            Gets or sets the labels source. This is a dependency property.
            </summary>
            <remarks>
            Source for labels may be any source that supports <see cref="T:System.Collections.IEnumerable"/>.
            </remarks>
            <value>The labels source.</value>
            <example>
            <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            Height="300" Width="300"&gt;
            &lt;syncfusion:Chart xmlns:syncfusion="clr-namespace:Syncfusion.Windows.Chart;assembly=Syncfusion.Chart.Wpf"&gt;
               &lt;syncfusion:Chart.Resources&gt;
                   &lt;syncfusion:ChartAxisLabelsCollection x:Key="labelsSourse"&gt;
                       &lt;syncfusion:ChartAxisLabel Position="2.2" Content="2.2"/&gt;
                       &lt;syncfusion:ChartAxisLabel Position="4.6" Content="4.6"/&gt;
                   &lt;/syncfusion:ChartAxisLabelsCollection&gt;
               &lt;/syncfusion:Chart.Resources&gt;
                   &lt;syncfusion:ChartArea&gt;
               &lt;syncfusion:ChartSeries Type="RangeColumn"
                                Data="0 {7 4} 1 {8 3} 2 {9 7} 3 {3 6} 4 {1 2} 5 {8 11} 6 {3 2} 7 {8 4}"/&gt;
                 &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                           &lt;syncfusion:ChartAxis LabelsSource="{StaticResource labelsSourse}" PositionPath="Position"/&gt;
                 &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
             &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.PositionPath">
            <summary>
            Gets or sets the position path. This is a dependency property.
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Windows.Chart.ChartAxis.LabelsSource"/> property is set, position path used to determine value of label's position.
            </remarks>
            <value>The position path.</value>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAxis.LabelsSource"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ContentPath">
            <summary>
            Gets or sets the content path for label. This is a dependency property.
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Windows.Chart.ChartAxis.LabelsSource"/> property is set, content path used to determine content for label.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.VisibleLabels">
            <summary>
            Gets the visible labels. Internal property.
            </summary>
            <value>The visible labels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.ActualRange">
            <summary>
            Gets the Actual Range of the Axis
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.Area">
            <summary>
            Gets the parent area for axis.
            </summary>
            <remarks>
            This property is being set by Chart's system internally.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.TicksPoint">
            <summary>
            Gets the ticks point.
            </summary>
            <value>The ticks point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.MinimalZoomFactor">
            <summary>
            Gets the minimal zoom factor.
            </summary>
            <value>The minimal zoom factor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxis.NiceRange">
            <summary>
            Initializes m_niceRange
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisLabel">
            <summary>
            Represents label that is shown on axis ticks.
            </summary>
            <remarks>
            Axis labels could be set from various data sources.
            </remarks>
            <example>
            XAML:
            <code language="XAML">
             &lt;syncfusion:ChartAxis Header="Year" LabelsSource="{Binding
            Source={StaticResource productlist}}" PositionPath="ID" ContentPath="Year" 
            LabelFontSize="11"&gt;
            </code>
            C#:
            <code language="C#">
             Chart1.Areas[0].PrimaryAxis.LabelsSource = productlist;
                        Chart1.Areas[0].PrimaryAxis.PositionPath="ID";
                          Chart1.Areas[0].PrimaryAxis.ContentPath="Year"
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisLabelsMode"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabel.m_position">
            <summary>
            Initializes m_position
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabel.ContentProperty">
            <summary>
            Using a DependencyProperty as the backing store for Content.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabel.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabel"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabel.#ctor(System.Double,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabel"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabel.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current axis label.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisLabel.Position">
            <summary>
            Gets or sets the position of label on axis.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisLabel.Content">
            <summary>
            Gets or sets the content that label should display.
            </summary>
            <value>Label's content.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisLabel.Axis">
            <summary>
            Gets the ChartAxis that label resides.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBreakRange">
            <summary>
            Represents ChartBreakRange
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakRange.m_sumBreaks">
            <summary>
            Initializes m_sumBreaks
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakRange.m_ranges">
            <summary>
            Initializes m_ranges
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakRange.XAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAxis. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakRange.YAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for YAxis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakRange.BreaksModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for BreaksMode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakRange.AutoBreakThresholdCoefficientProperty">
            <summary>
            Using a DependencyProperty as the backing store for BreaksMode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartBreakRange"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.#ctor(Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Called when instance created for ChartBreakRange
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.AutoValueToCoeficient(System.Double)">
            <summary>
            Computes coefficient by the specified value for the automatic mode.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.AutoCoeficientToValue(System.Double)">
            <summary>
            Computes value by the specified coefficient for the automatic mode.
            </summary>
            <param name="coeficient">The coefficient.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.Union(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.ChartBreakRangeInfo)">
            <summary>
            Unions the specified range.
            </summary>
            <param name="range">The range.</param>
            <param name="breakInfo"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.Exclude(Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Excludes the specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.Subtract(System.Double)">
            <summary>
            Subtracts breakes from the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.Add(System.Double)">
            <summary>
            Adds breaks to the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The double value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBreakRange"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.IsInBreak(System.Double)">
            <summary>
            The IsInBreak method
            </summary>
            <param name="value">The double value</param>
            <returns>The bool result</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.CalculateSumBreakes">
            <summary>
            Computes the sum of breakes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.Compute(Syncfusion.Windows.Chart.ChartSeriesCollection)">
            <summary>
            Method implementation for Compute. It can compute the segments and values
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.RaiseChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRange.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartBreakRange.Changed">
            <summary>
            Occurs when range was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.BreaksMode">
            <summary>
            Gets or sets the breaks mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.AutoBreakThresholdCoefficient">
            <summary>
            Gets or sets the break amount.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.SumBreaks">
            <summary>
            Gets the sum breakes.
            </summary>
            <value>The sum breakes.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.Breaks">
            <summary>
            Get the CLR property from the internal variable
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.IsEmpty">
            <summary>
            Gets a value indicating whether this range is empty.
            </summary>
            <value><c>true</c> if this range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRange.Segments">
            <summary>
            Gets the segments.
            </summary>
            <value>The segments.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisSegment">
            <summary>
            Specifies the single range segment of axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisSegment.Range">
            <summary>
            Gets or sets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBreakLineTypes">
            <summary>
            Specifies types of break line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakLineTypes.StraightLine">
            <summary>
            The straight line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakLineTypes.Wave">
            <summary>
            The wave line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreakLineTypes.Randomize">
            <summary>
            The randomize line.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBreaksModes">
            <summary>
            Specifies modes of breaks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreaksModes.None">
            <summary>
            Breaks isn't used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreaksModes.Auto">
            <summary>
            Chart automatically calculate the breaks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBreaksModes.Manual">
            <summary>
            Breaks is set manually.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBreakRangeInfo">
            <summary>
            Class declaratiopn for ChartBreakRangeInfo
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.#ctor">
            <summary>
            Constructor for ChartBreakRangeInfo
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.#ctor(Syncfusion.Windows.Chart.ChartBreakRange)">
            <summary>
            Called when instance created for ChartBreakRangeInfo with single arguments
            </summary>
            <param name="brkRange"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.OnNeedRedraw(System.Object,System.EventArgs)">
            <summary>
            Handles visual properties changed events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.DrawBreakLine(System.Windows.Media.DrawingContext,System.Windows.Point,System.Windows.Point,Syncfusion.Windows.Chart.ChartBreakRangeInfo)">
            <summary>
            Draws the break line.
            </summary>
            <param name="dc">The <see cref="T:System.Drawing.Graphics"/>.</param>
            <param name="from">The start point of break line.</param>
            <param name="to">The end point of break line.</param>
            <param name="info"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.GetWaveBeziersPoints(System.Windows.Point,System.Windows.Point,System.Int32,System.Single)">
            <summary>
            Gets the wave beziers points.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="count">The count.</param>
            <param name="fault">The fault.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.GetRandomBeziersPoints(System.Windows.Point,System.Windows.Point,System.Int32,System.Single)">
            <summary>
            Gets the rendom beziers points.
            </summary>
            <param name="pt1">The PT1.</param>
            <param name="pt2">The PT2.</param>
            <param name="count">The count.</param>
            <param name="fault">The fault.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBreakRangeInfo.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:AppearanceChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRangeInfo.LineType">
            <summary>
            Gets or sets the type of the line.
            </summary>
            <value>The type of the line.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRangeInfo.LineColor">
            <summary>
            Gets or sets the color of the line.
            </summary>
            <value>The color of the line.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRangeInfo.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRangeInfo.LineWidth">
            <summary>
            Gets or sets the width of the line.
            </summary>
            <value>The width of the line.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRangeInfo.SpacingWidth">
            <summary>
            Gets or sets the line spacing .
            </summary>
            <value>The line spacing .</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBreakRangeInfo.SpacingColor">
            <summary>
            Gets or sets the color of the spacing.
            </summary>
            <value>The color of the spacing.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartBreakRangeInfo.Changed">
            <summary>
            Occurs when range was changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStripLine">
            <summary>
            Represents ChartStripLine class. Contains the information about strip line.
            </summary>
            <remarks>
            Chart WPF enables the user to highlight a specific area of the chart by adding
            StripLines to a ChartAxis. The strip lines length and width can be customized, a
            text label can be specified and the look and feel can be customized too.
            </remarks>
            <example>
            	<code language="C#">
            //Create a new Stripline
            ChartStripLine csX = new ChartStripLine();
            //Set whether this need to started from X Axis
            csX.StartFromAxis = true;
            //Set the offset from where this stripline should be placed
            csX.Offset = 2;
            //Set the width of the stripline
            csX.Width = 0.2;
            //Set the interior of the stripline
            csX.Interior = App.Current.Resources["imgBrush"] as ImageBrush;
            //Set the FormattedText of the Stripline
            csX.Text = new FormattedText("",
            CultureInfo.CurrentCulture,FlowDirection.LeftToRight, new Typeface("Arial"), 20,
            Brushes.Black);
            //Add the stripline to the Axis stripline collection
            chart1.Areas[0].PrimaryAxis.StripLines.Add(csX);
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStripLine"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.TextAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for Alignment.  This enables animation, styling, binding, etc...
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.StrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Stroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.TextProperty">
            <summary>
            Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.StartProperty">
            <summary>
            Using a DependencyProperty as the backing store for Start.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.RepeatUntilProperty">
            <summary>
            Using a DependencyProperty as the backing store for End.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.WidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for Width.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.RepeatEveryProperty">
            <summary>
            Using a DependencyProperty as the backing store for Period.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.InteriorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interior.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.TextBackgroundProperty">
            <summary>
            Using a DependencyProperty for the TextBackground
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.VerticalTextProperty">
            <summary>
            Using a DependencyProperty for the VerticalText
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.OffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for Offset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.StartFromAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for StartFromAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.AxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for Axis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.IsSegmentedProperty">
            <summary>
            Identifies the IsSegmented value for the StripLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.SegmentStartValueProperty">
            <summary>
             Identifies the Segmented Start value for the StripLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.SegmentEndValueProperty">
            <summary>
             Identifies the Segmented end value for the StripLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.TextOffsetXProperty">
            <summary>
             Identifies the Text OffsetX value for the StripLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.TextOffsetYProperty">
            <summary>
             Identifies the TextOffsetY value for the StripLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.IsPixelWidthProperty">
            <summary>
             Identifies the Pixel width for the StripLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.startFromAxis">
            <summary>
            Set the StartfromAxis Value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStripLine.TextRotationAngleProperty">
            <summary>
            Using a DependencyProperty as the backing store for TextRotationAngle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStripLine.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"></see> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStripLine.OnAppearencePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [appearence property changed].
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStripLine.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.IsPixelWidth">
            <summary>
            Gets or sets the IsPixelWidth.
            </summary>
            <value>The IsPixelWidth.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Interior">
            <summary>
            Gets or sets the interior.
            </summary>
            <value>The interior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.TextBackground">
            <summary>
            Gets or sets the Background of stripline text area.
            </summary>
            <value>The textBackground.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.VerticalText">
            <summary>
            Gets or sets a value indicating whether [vertical text].
            </summary>
            <value><c>true</c> if [vertical text]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.RepeatUntil">
            <summary>
            Gets or sets the repeat until.
            </summary>
            <value>The repeat until.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.RepeatEvery">
            <summary>
            Gets or sets the repeat every.
            </summary>
            <value>The repeat every.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>A double value in axis range metrics.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.StartFromAxis">
            <summary>
            Gets or sets a value indicating whether [start from axis].
            </summary>
            <value>True if the stripline should start from the beginning of the axis. False, otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.Axis">
            <summary>
            Gets the axis.
            </summary>
            <value>The axis value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.IsSegmented">
            <summary>
            gets or sets the IsSegmented value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.SegmentStartValue">
            <summary>
            gets or sets the Segment start value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.SegmentEndValue">
            <summary>
            gets or sets the Segment end value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.TextOffsetX">
            <summary>
            Gets or sets the text offset X.
            </summary>
            <value>The text offset X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.TextOffsetY">
            <summary>
            Gets or sets the text offset Y.
            </summary>
            <value>The text offset Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStripLine.TextRotationAngle">
            <summary>
            Gets or sets the Rotation Angle of the stripline text
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingColumn100Segment">
            <summary>
            Represents stacking 100% column segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumn100Type"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartColumnSegment">
            <summary>
            Represents column chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.LayerBrushProperty">
            <summary>
            Identifies the LayerBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.m_bottomLeftPoint">
            <summary>
            Initializes m_bottomLeftPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColumnSegment.m_topRightPoint">
            <summary>
            Initializes m_topRightPoint
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartColumnSegment"/> class.
            </summary>
            <remarks>
            Default segment template is assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartColumnSegment"/> class.
            </summary>
            <param name="bottomLeftPnt">The bottom left PNT.</param>
            <param name="topRightPnt">The top right PNT.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartColumnSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartColumnSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnSegment.X">
            <summary>
            Gets or sets the X co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnSegment.Y">
            <summary>
            Gets or sets the Y co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnSegment.Width">
            <summary>
            Gets or sets the width of segment. This is a dependency property.
            </summary>
            <value>The width value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnSegment.Height">
            <summary>
            Gets or sets the height of segment. This is a dependency property.
            </summary>
            <value>The height value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartColumnSegment.LayerBrush">
            <summary>
            Gets or sets the Layer brush. This is a dependency property.
            </summary>
            <value>The Brush value.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingColumn100Segment.PercentageProperty">
            <summary>
            Identifies the Percentage dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumn100Segment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartStackingColumn100Segment"/> class.
            </summary>
            <param name="bottomLeftPnt">The bottom left PNT.</param>
            <param name="topRightPnt">The top right PNT.</param>
            <param name="percentage">The percentage.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingColumn100Segment.Percentage">
            <summary>
            Gets or sets the Percentage. This is a dependency property.
            </summary>
            <value>The Percentage.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment">
            <summary>
            Represents Box and Whisker chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerY2Property">
            <summary>
            Identifies the TopWhiskerY2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerY1Property">
            <summary>
            Identifies the TopWhiskerY1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerX2Property">
            <summary>
            Identifies the TopWhiskerX2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerX1Property">
            <summary>
            Identifies the TopWhiskerX1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerY2Property">
            <summary>
            Identifies the BottomWhiskery1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerY1Property">
            <summary>
            Identifies the BottomWhiskerY1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerX2Property">
            <summary>
            Identifies the BottomWhiskerX2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerX1Property">
            <summary>
            Identifies the BottomWhiskerX1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerY2Property">
            <summary>
            Identifies the MedianWhiskerY2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerY1Property">
            <summary>
            Identifies the MedianWhiskerY1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerX2Property">
            <summary>
            Identifies the MedianWhiskerX2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerX1Property">
            <summary>
            Identifies the MedianWhiskerX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerX1Property">
            <summary>
            Identifies the MedianWhiskerX1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerX2Property">
            <summary>
            Identifies the MedianWhiskerX2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerY1Property">
            <summary>
            Identifies the MedianWhiskerY1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerY2Property">
            <summary>
            Identifies the MedianWhiskerY2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_mB">
            <summary>
            The median1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_mE">
            <summary>
            The median2
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_q1B">
            <summary>
            The quarter1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_q2E">
            <summary>
            The quarter2
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_w1B">
            <summary>
            The whisker1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_w1M">
            <summary>
            The whisker1 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_w1E">
            <summary>
            The whisker1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_w2B">
            <summary>
            The whisker2
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_w2M">
            <summary>
            The whisker2
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.m_w2E">
            <summary>
            The whisker2
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment"/> class.
            </summary>
            <remarks>
            Default segment template is being initialized automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment"/> class.
            </summary>
            <param name="mB">The IChartDataPoint m B.</param>
            <param name="mE">The IChartDataPoint m E.</param>
            <param name="q1B">The IChartDataPoint q1 B.</param>
            <param name="q2E">The IChartDataPoint q2 E.</param>
            <param name="w1B">The IChartDataPoint w1 B.</param>
            <param name="w1M">The IChartDataPoint w1 M.</param>
            <param name="w1E">The IChartDataPoint w1 E.</param>
            <param name="w2B">The IChartDataPoint w2 B.</param>
            <param name="w2M">The IChartDataPoint w2 M.</param>
            <param name="w2E">The IChartDataPoint w2 E.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The Chartseries.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">The transformer</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.X">
            <summary>
            Gets or sets the X co-ordinate. This is a dependency property.
            </summary>
            <value>The X co-ordinate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.Y">
            <summary>
            Gets or sets the Y co-ordinate. This is a dependency property.
            </summary>
            <value>The Y co-ordinate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.Width">
            <summary>
            Gets or sets the width. This is a dependency property.
            </summary>
            <value>The double value width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.Height">
            <summary>
            Gets or sets the height. This is a dependency property.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerX1">
            <summary>
            Gets or sets the top whisker x1. This is a dependency property.
            </summary>
            <value>The top whisker x1 co-ordinate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerX2">
            <summary>
            Gets or sets the top whisker x2 co-ordinate. This is a dependency property.
            </summary>
            <value>The top whisker x2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerY1">
            <summary>
            Gets or sets the top whisker y1 co-ordinate. This is a dependency property.
            </summary>
            <value>The top whisker y1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.TopWhiskerY2">
            <summary>
            Gets or sets the top whisker y2 co-ordinate. This is a dependency property.
            </summary>
            <value>The top whisker y2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerX1">
            <summary>
            Gets or sets the bottom whisker x1 co-ordinate. This is a dependency property.
            </summary>
            <value>The bottom whisker x1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerX2">
            <summary>
            Gets or sets the bottom whisker x2 co-ordinate. This is a dependency property.
            </summary>
            <value>The bottom whisker x2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerY1">
            <summary>
            Gets or sets the bottom whisker y1 co-ordinate. This is a dependency property.
            </summary>
            <value>The bottom whisker y1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.BottomWhiskerY2">
            <summary>
            Gets or sets the bottom whisker y2 co-ordinate. This is a dependency property.
            </summary>
            <value>The bottom whisker y2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerX1">
            <summary>
            Gets or sets the median whisker x1 co-ordinate. This is a dependency property.
            </summary>
            <value>The median whisker x1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerX2">
            <summary>
            Gets or sets the median whisker x2 co-ordinate. This is a dependency property.
            </summary>
            <value>The median whisker x2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerY1">
            <summary>
            Gets or sets the median whisker y1 co-ordinate. This is a dependency property.
            </summary>
            <value>The median whisker y1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.CenterLineWhiskerY2">
            <summary>
            Gets or sets the median whisker y2 co-ordinate. This is a dependency property.
            </summary>
            <value>The median whisker y2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerY2">
            <summary>
            Gets or sets the MedianWhiskerY2. This is a dependency property.
            </summary>
            <value>The MedianWhiskerY2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerY1">
            <summary>
            Gets or sets the MedianWhiskerY1. This is a dependency property.
            </summary>
            <value>The MedianWhiskerY1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerX2">
            <summary>
            Gets or sets the MedianWhiskerX2. This is a dependency property.
            </summary>
            <value>The MedianWhiskerX2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerSegment.MedianWhiskerX1">
            <summary>
            Gets or sets the MedianWhiskerX1. This is a dependency property.
            </summary>
            <value>The MedianWhiskerX1.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType">
            <summary>
            Initializes ChartBoxAndWhiskerType
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.DefaultOutlierVisibleProperty">
            <summary>
            DefaultOutlierVisible dependency property 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.OnVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DefaultOutlierVisible property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.GetDefaultOutlierVisible(System.Windows.DependencyObject)">
            <summary>
            Gets the default outlier visible.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>Returns bool value OutlierVisibility</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.SetDefaultOutlierVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the default outlier visible.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The ChartSeries</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.ToString">
            <summary>
            ChartBoxAndWhiskerType ToString method
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.GetStatisticalMedian(System.Double,System.Double[])">
            <summary>
            Gets the statistical median.
            </summary>
            <param name="x">The double value x.</param>
            <param name="dwi">The double value dwi.</param>
            <returns>The median value</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBoxAndWhiskerType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDoughnutSegment">
            <summary>
            Represents Doughnut chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPieSegment">
            <summary>
            Represents Pie chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.isSinglePoint">
            <summary>
            Declares isSinglePoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.m_startPoint">
            <summary>
            Represents the Start point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.m_endPoint">
            <summary>
            Represents the end point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.AngleOfSliceRotationPropertyKey">
            <summary>
            Identifies the AngleOfSliceRotation dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.ExternalPointsProperty">
            <summary>
            Identifies the External Layer Geometry points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.LayerBrushProperty">
            <summary>
            Identifies the Layer Brush color dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.IsExplodedProperty">
            <summary>
            Identifies the IsExploded dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.ExplodeRadiusProperty">
            <summary>
            Identifies the ExplodedRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.AngleOfSliceRotationProperty">
            <summary>
            Identifies the AngleOfSliceRotation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieSegment.PieCoefficientProperty">
            <summary>
            Identifies the PieCoefficient dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartPieSegment"/> class.
            </summary>
            <remarks>Default segment's template is being assigned automatically.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieSegment.#ctor(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPieSegment"/> class.
            </summary>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <remarks>Method is being called internally in order to update segment.</remarks>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>        
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.PieCoefficient">
            <summary>
            Gets or sets the Pie coefficient. This is a dependency property.
            </summary>
            <remarks>Represents pie coefficient that corresponds for interior hole radius.</remarks>
            <value>The Pie coefficient.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.AngleOfSliceRotation">
            <summary>
            Gets the value of the AngleOfSliceRotation. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.Geometry">
            <summary>
            Gets or sets the geometry. This is a dependency property.
            </summary>
            <remarks>Represents the geometry of the segment.</remarks>
            <value>The geometry.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.IsExploded">
            <summary>
            Gets or sets a value indicating whether this instance is exploded. This is a dependency property.
            </summary>
            <remarks>Exploded segment is used to visually point required segment as exploded.</remarks>
            <value>
            <c>true</c> if this instance is exploded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.ExplodeRadius">
            <summary>
            Gets or sets the explode radius. This is a dependency property.
            </summary>
            <remarks>Represents the radius of exploded segment.</remarks>
            <value>The explode radius.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.ExternalPoints">
            <summary>
            Gets or sets the External Layer Geometry points. This is a dependency property.
            </summary>
            <remarks>Represents the Geometry points.</remarks>
            <value>The Geometry points.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieSegment.LayerBrush">
            <summary>
            Gets or sets the External Layer Brush. This is a dependency property.
            </summary>
            <remarks>Represents the Brush color.</remarks>
            <value>The Layer Brush.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDoughnutSegment.DoughnutCoefficientProperty">
            <summary>
            Identifies the DoughnutCoefficient dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutSegment.#ctor(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartDoughnutSegment"/> class.
            </summary>
            <param name="startAngle">The start angle</param>
            <param name="endAngle">The end angle</param>
            <param name="correspondingPoint">The corresponding point</param>
            <param name="series">The chart series</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <remarks>Method is being called internally in order to update segment.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDoughnutSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDoughnutSegment.DoughnutCoefficient">
            <summary>
            Gets or sets the doughnut coefficient. This is a dependency property.
            </summary>
            <remarks>Represents doughnut coefficient that corresponds for interior hole radius.</remarks>
            <value>The doughnut coefficient.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDoughnutType">
            <summary>
            Represents ChartDoughnutType class
            </summary>
            <remarks>
            Doughnut charts are pie charts with a hole, whose value is specified as the
            doughnut coefficient. The Doughnut Chart is best suited for presenting data in
            proportions.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDoughnutSegment"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPieType">
            <summary>
            Represents Pie Chart Type class
            </summary>
            <remarks>
            A Pie Chart renders Y values as slices in a pie. These slices are rendered in
            proportion to the whole which is simply the sum of all the Y values in the
            series. Consequently, Pie Charts are used to visualize the proportional
            contribution (in terms of percentage or fraction) of categories of data to the
            whole data set. The X values in the data series will only be treated as nominal
            (categorical, qualitative) data. The Pie Chart can display only one DataSeries
            at a time.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPieSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieType.ExplodedIndexProperty">
            <summary>
            Identifies the ExplodedIndex dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieType.ExplodedAllProperty">
            <summary>
            Identifies the ExplodedAll dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieType.ExplodeRadiusProperty">
            <summary>
            Identifies the ExplodeRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieType.PieCoefficientProperty">
            <summary>
            Identifies the PieCoefficient dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.GetPieCoefficient(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Return the double Value from the given DependencyObject
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.SetPieCoefficient(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Set PieCoefficient to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="series"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.GetExplodedAll(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the exploded all.
            </summary>
            <param name="series">The series.</param>
            <returns>Bool value true to explode all</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.SetExplodedAll(Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
            <summary>
            Sets the exploded all.
            </summary>
            <param name="series">The series.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.GetExplodeRadius(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the exploded radius.
            </summary>
            <param name="series">The series.</param>
            <returns>double value explode radius</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.SetExplodeRadius(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the exploded radius.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.GetExplodedIndex(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the exploded indices.
            </summary>
            <param name="series">The series.</param>
            <returns>int exploded index value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.SetExplodedIndex(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Sets the exploded indices.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
            <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPieType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.CreateAdornments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[],System.Double,System.Double)">
            <summary>
            Calculates the adornments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <param name="sumValues">The summary values.</param>
            <param name="coef">The coefficient.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.CreateSegment(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Creates the segment.
            </summary>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
            <returns>Returns new ChartPieSegment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPieType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieType.AxesType">
            <summary>
            Gets axes type that are required for chart to be built.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDoughnutType.DoughnutCoefficientProperty">
            <summary>
            Identifies the DoughnutCoefficient dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutType.GetDoughnutCoefficient(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the doughnut coefficient.
            </summary>
            <param name="series">The series.</param>
            <returns>The Doughnut Coefficient</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutType.SetDoughnutCoefficient(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the doughnut coefficient.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoughnutType.CreateSegment(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Creates the segment.
            </summary>
            <param name="startAngle">The start angle</param>
            <param name="endAngle">The end angle</param>
            <param name="correspondingPoint">The corresponding point</param>
            <param name="series">The chart series</param>
            <returns>The segment</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFunnelSegment">
            <summary>
            Represents Funnel chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFunnelType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.MinWidthProperty">
            <summary>
            Identifies the MinWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.IsExplodedProperty">
            <summary>
            Identifies the IsExploded dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.ExplodedOffsetProperty">
            <summary>
            Identifies the ExplodedOffset dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.m_top">
            <summary>
            Initializes m_top, m_bottom, m_topRadius, m_bottomRadius
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.m_bottom">
            <summary>
            Initializes m_top, m_bottom, m_topRadius, m_bottomRadius
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.m_topRadius">
            <summary>
            Initializes m_top, m_bottom, m_topRadius, m_bottomRadius
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.m_bottomRadius">
            <summary>
            Initializes m_top, m_bottom, m_topRadius, m_bottomRadius
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelSegment.m_viewport">
            <summary>
            Initializes m_viewport
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartFunnelSegment"/> class.
            </summary>
            <remarks>
            Default segment's template is being assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelSegment.#ctor(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFunnelSegment"/> class.
            </summary>
            <param name="y">The y value.</param>
            <param name="height">The height.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelSegment.#ctor(System.Double,System.Double,System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFunnelSegment"/> class.
            </summary>
            <param name="y">The y value.</param>
            <param name="height">The height.</param>
            <param name="widthTop">The width top.</param>
            <param name="widthBottom">The width bottom.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFunnelSegment.MinWidth">
            <summary>
            Gets or sets the width of the minimal segment part. This is a dependency property.
            </summary>
            <value>The width of the min.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFunnelSegment.Geometry">
            <summary>
            Gets or sets the geometry. This is a dependency property. This is a dependency property.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFunnelSegment.IsExploded">
            <summary>
            Gets or sets a value indicating whether this segment is exploded. This is a dependency property.
            </summary>
            <value>
             <c>true</c> if this instance is exploded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFunnelSegment.ExplodedOffset">
            <summary>
            Gets or sets the segment exploded offset. This is a dependency property.
            </summary>
            <value>The exploded offset.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFunnelType">
            <summary>
            Represents ChartFunnelType class
            </summary>
            <remarks>
            The Funnel chart is a single series chart representing the data as portions of
            100%, and this chart does not use any axes. Funnel chart can be viewed as 2D or
            3D.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFunnelSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelType.FunnelModeProperty">
            <summary>
            Identifies the FunnelMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelType.GapRatioProperty">
            <summary>
            Identifies the GapRatio dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelType.ExplodedIndexProperty">
            <summary>
            Identifies the ExplodedIndex dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.GetGapRatio(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the gap ratio.
            </summary>
            <param name="series">The series.</param>
            <returns>The gap ratio</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.SetGapRatio(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the gap ratio.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.GetFunnelMode(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the funnel mode.
            </summary>
            <param name="series">The series.</param>
            <returns>The Funnel mode</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.SetFunnelMode(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartFunnelMode)">
            <summary>
            Sets the funnel mode.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.GetExplodedIndex(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the exploded indices.
            </summary>
            <param name="series">The series.</param>
            <returns>The Exploded Index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.SetExplodedIndex(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Sets the exploded indices.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
             <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFunnelType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the series.
            </summary>
            <param name="series">The Chart series</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.CreateAdornment(Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries,System.Double,System.Double,System.Double)">
            <summary>
            Creates an adornment.
            </summary>
            <param name="point">The point.</param>
            <param name="series">The series.</param>
            <param name="currY">The curr Y.</param>
            <param name="height">The height.</param>
            <param name="sumValues">The sum values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFunnelType.CreateAdornment(Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an adornment.
            </summary>
            <param name="point">The point.</param>
            <param name="series">The series.</param>
            <param name="currY">The curr Y.</param>
            <param name="height">The height.</param>
            <param name="topRadius">The top radius.</param>
            <param name="bottomRadius">The bottom radius.</param>
            <param name="sumValues">The sum values.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFunnelType.AxesType">
            <summary>
            Gets axes type that are required for chart to be built.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFunnelType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHiLoSegment">
            <summary>
            Represents Hilo chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoSegment.HighXProperty">
            <summary>
            Identifies the HighX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoSegment.HighYProperty">
            <summary>
            Identifies the HighY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoSegment.LowXProperty">
            <summary>
            Identifies the LowX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoSegment.LowYProperty">
            <summary>
            Identifies the LowY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoSegment.m_point1">
            <summary>
            Initializes m_point1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoSegment.m_point2">
            <summary>
            Initializes m_point2
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoSegment"/> class.
            </summary>
            <remarks>
            Default segment templates are created automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoSegment"/> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="correspondingPoint1">The corresponding point1.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoSegment.HighX">
            <summary>
            Gets or sets the high X value. This is a dependency property.
            </summary>
            <value>The high X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoSegment.HighY">
            <summary>
            Gets or sets the high Y value. This is a dependency property.
            </summary>
            <value>The high Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoSegment.LowX">
            <summary>
            Gets or sets the low X value. This is a dependency property.
            </summary>
            <value>The low X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoSegment.LowY">
            <summary>
            Gets or sets the low Y value. This is a dependency property.
            </summary>
            <value>The low Y.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHiLoType">
            <summary>
            Represents ChartHiLoType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoType.RequiresDataCount">
            <summary>
            Gets the require data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHistogramSegment">
            <summary>
            Represents segment that is a part of histogram chart type.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramSegment.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramSegment.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramSegment.m_bottomLeftPoint">
            <summary>
            Initializes m_bottomLeftPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramSegment.m_topRightPoint">
            <summary>
            Initializes m_topRightPoint
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartHistogramSegment"/> class.
            </summary>
            <remarks>
            Default tenmplate is being assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHistogramSegment"/> class.
            </summary>
            <param name="bottomLeftPoint">The bottom left point.</param>
            <param name="topRightPoint">The top right point.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHistogramSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramSegment.X">
            <summary>
            Gets or sets the X co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramSegment.Y">
            <summary>
            Gets or sets the Y co-ordinate of segment. This is a dependency property.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramSegment.Width">
            <summary>
            Gets or sets the width of segment. This is a dependency property.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramSegment.Height">
            <summary>
            Gets or sets the height of segment. This is a dependency property.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramSegment.PointCount">
            <summary>
            Gets the segment's points count.
            </summary>
            <value>The point count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment">
            <summary>
            Represents histogram distribution segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment"/> class.
            </summary>
            <remarks>
            Segment template is being assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramDistributionSegment.Points">
            <summary>
            Gets or sets the corresponding points collection.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHistogramType">
            <summary>
            Represents ChartHistogramType class
            </summary>
            <remarks>
            Histogram is a bar (column) chart of a frequency distribution in which the
            widths of the bars are proportional to the classes into which the variable has
            been divided and the heights of the bars are proportional to the class
            frequencies. The categories are usually specified as non overlapping intervals
            of some variable. The categories (bars) must be adjacent.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHistogramSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramType.C_distributionPointsCount">
            <summary>
            Initializes c_distributionPointsCount
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramType.c_sqrtDoublePI">
            <summary>
            Initializes c_sqrtDoublePI
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramType.IntervalOfHistogramProperty">
            <summary>
            Using a DependencyProperty as the backing store for NumberIntervals.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHistogramType.DrawNormalDistributionProperty">
            <summary>
            Using a DependencyProperty as the backing store for DrawNormalDistribution.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHistogramType"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.GetDrawNormalDistribution(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the draw normal distribution attached property value.
            </summary>
            <param name="series">The series.</param>
            <returns>The Normal Distribution</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.SetDrawNormalDistribution(Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
            <summary>
            Sets the draw normal distribution.
            </summary>
            <param name="series">The series.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.GetIntervalOfHistogram(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the interval of histogram.
            </summary>
            <param name="series">The series.</param>
            <returns>The Interval Of Histogram</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.SetIntervalOfHistogram(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the interval of histogram.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates chart.
            </summary>
            <param name="series">The Chartseries </param>
             /// <seealso cref="T:Syncfusion.Windows.Chart.ChartHistogramType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.GetHistogramMeanAndDeviation(Syncfusion.Windows.Chart.ChartIndexedDataPoint[],System.Double@,System.Double@)">
            <summary>
            Gets the histogram mean and deviation.
            </summary>
            <param name="cpwiA">The cpwi A.</param>
            <param name="mean">The mean value.</param>
            <param name="standartDeviation">The standart deviation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.NormalDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Normal Distribution function.
            </summary>
            <param name="x">The x value.</param>
            <param name="m">The m value.</param>
            <param name="sigma">The sigma value.</param>
            <returns>The Normal Distribution</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHistogramType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHistogramType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartKagiSegment">
            <summary>
            Represents Kagi chart segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiSegment.IsPriceUpProperty">
            <summary>
            Identifies the IsPriceUp dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiSegment.IsPriceDownProperty">
            <summary>
            Identifies the IsPriceDown dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiSegment.FillBrushProperty">
            <summary>
            Identifies the FillBrush dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartKagiSegment"/> class.
            </summary>
            <remarks>
            During initialization the default template for Kagi segment is being created.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartKagiSegment"/> class.
            </summary>
            <param name="points">The points.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">The Transformer</param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartKagiSegment.FillBrush">
            <summary>
            Get and Set FillBrush
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartKagiSegment.IsPriceUp">
            <summary>
            Gets or sets a value indicating whether this segment is price up. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if this segment is price up; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartKagiSegment.IsPriceDown">
            <summary>
            Gets or sets a value indicating whether this segment is price down. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if this segment is price down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartKagiSegment.Points">
            <summary>
            Gets or sets the points. This is a dependency property.
            </summary>
            <value>The points.</value>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiSegment.SegmentFillConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiSegment.SegmentFillConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiSegment.SegmentFillConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiSegment.SegmentFillConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartKagiType">
            <summary>
            Represents ChartKagiType class
            </summary>
            <remarks>
            Kagi Charts are a Japanese invention and date since the late 1870's, but were
            popularized in the western world by Steven Nison. They contain a series of
            connecting vertical lines where the thickness and direction of those lines
            depend on price. If closing prices continue to move in the direction of the
            prior vertical Kagi line, then that line is extended. However, if the closing
            price reverses by a pre-determined "reversal" amount, a new Kagi line
            is drawn in the next column in the opposite direction.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.GetPriceUpInterior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the PriceUpInterior dependency property.
            </summary>
            <param name="obj">The DependencyObjectobj.</param>
            <returns>The PriceUpInterior brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.SetPriceUpInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the PriceUpInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiType.PriceUpInteriorProperty">
            <summary>
            Indicates the PriceUpInterior Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.GetPriceDownInterior(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the PriceDownInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>The LowValueInterior Brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.SetPriceDownInterior(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the PriceDownInterior dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiType.PriceDownInteriorProperty">
            <summary>
            Indicates the PriceDownInterior Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartKagiType.ReversalAmountProperty">
            <summary>
            Identifies the ReversalAmount dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartKagiType"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.OnReversalAmountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ReversalAmount property changed
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.GetReversalAmount(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the reversal amount.
            </summary>
            <param name="series">The series.</param>
            <returns>The Reversal Amount</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.SetReversalAmount(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the reversal amount.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates chart series.
            </summary>
            <param name="series">The series</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartKagiType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartKagiType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartKagiType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLineSegment">
            <summary>
            Represents Line chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.m_point1">
            <summary>
            Initializes m_point1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.m_point2">
            <summary>
            Initializes m_point2
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.X1Property">
            <summary>
            Identifies the X1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.X2Property">
            <summary>
            Identifies the Y2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.Y1Property">
            <summary>
            Identifies the Y1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.Y2Property">
            <summary>
            Identifies the Y2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.Z1Property">
            <summary>
            Using a DependencyProperty as the backing store for Z1Property.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineSegment.Z2Property">
            <summary>
            Using a DependencyProperty as the backing store for Z2Property.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartLineSegment"/> class.
            </summary>
            <remarks>
            Default line template is created automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartLineSegment"/> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="correspondingPoint1">The corresponding point1.</param>
            <param name="correspondingPoint2">The corresponding point2.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The Transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineSegment.GetCrossPoint(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Gets the cross point.
            </summary>
            <param name="p11">The P11 value.</param>
            <param name="p12">The P12 value.</param>
            <param name="p21">The P21 value.</param>
            <param name="p22">The P22 value.</param>
            <returns>the Vector cross point</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineSegment.X1">
            <summary>
            Gets or sets the starting X line co-ordinate. This is a dependency property.
            </summary>
            <value>The x1 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineSegment.X2">
            <summary>
            Gets or sets the ending X line co-ordinate. This is a dependency property.
            </summary>
            <value>The x2 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineSegment.Y1">
            <summary>
            Gets or sets the starting Y line co-ordinate. This is a dependency property.
            </summary>
            <value>The y1 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineSegment.Y2">
            <summary>
            Gets or sets the ending Y line co-ordinate. This is a dependency property.
            </summary>
            <value>The y2 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineSegment.Z1">
            <summary>
            Get or Set Z1 property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineSegment.Z2">
            <summary>
            Get or Set Z2 property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPieAdornment">
            <summary>
            Class represent Pie-typed adornment. 
            </summary>
            <remarks>
            This adornment type is specific for chart types as Pie, Doughnut, Funnel and Pyramid.
            Class instances are created internally and no user code is required except special cases.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPieAdornment"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAdornment">
            <summary>
            Represents chart series points data.
            </summary>
            <remarks>
            Chart adornments are used to show additional information about displaying series.
            Adornments are widely used to simplify chart look and give user more idea of information that is
            represented via chart.
            </remarks>
            <example>
            XAML:
            <code language="XAML">
            <!--Chart with Adornments-->
              &lt;sfchart:Chart&gt;
                        &lt;sfchart:ChartArea Background="LightGray" GridBackground="White"&gt;  
                            &lt;sfchart:ChartSeries Type="Column" &gt;
                           &lt;sfchart:ChartSeries.AdornmentsInfo&gt;
                                    &lt;sfchart:ChartAdornmentInfo 
            LabelContentPath="DataPoint.X" Visible="True"  /&gt;
                                &lt;/sfchart:ChartSeries.AdornmentsInfo&gt;
                            &lt;/sfchart:ChartSeries&gt;       
                        &lt;/sfchart:ChartArea&gt;          
                    &lt;/sfchart:Chart&gt;
            </code>
            C#:
            <code language="C#">
            ChartSeries series = Chart1.Areas[0].Series[0];      
            ChartAdornmentInfo adornments = series.AdornmentsInfo;
            adornments.LabelContentPath = "DataPoint.X";
            adornments.Visible = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.AnnotationsCollection"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornment.m_point">
            <summary>
            Initializes m_point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornment.XProperty">
            <summary>
            Identifies the X value dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornment.YProperty">
            <summary>
            Identifies the Y value dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornment.DataPointProperty">
            <summary>
            Identifies the DataPoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornment.IndexProperty">
            <summary>
            Identifies the Index dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornment.SegmentLabelProperty">
            <summary>
            Identifies the SegmentLabel dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAdornment"/> class.
            </summary>
            <remarks>
            Chart adornments are used to show additional information about displaying series.
            </remarks>
            <param name="position">Adornment's position.</param>
            <param name="point">Point to represent.</param>
            <param name="series">Connected to series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of the class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornment.SegmentLabel">
            <summary>
            Gets or sets the segment label. This is a dependency property.
            </summary>
            <remarks>
            Allows specify value that should be displayed for the segment's adorner.
            </remarks>
            <example>
            This property is not intended to be used from user code. All segment labels are 
            assigned automatically. 
            </example>
            <value>The segment label type of <see cref="T:System.String"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornment.X">
            <summary>
            Gets or sets the X. This is a dependency property.
            </summary>
            <example>
            This property is not intended to be used from user code. All segment positions are 
            assigned automatically with respect to segments. 
            </example>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornment.Y">
            <summary>
            Gets or sets the Y. This is a dependency property.
            </summary>
            <example>
            This property is not intended to be used from user code. All segment positions are 
            assigned automatically with respect to segments. 
            </example>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornment.DataPoint">
            <summary>
            Gets or sets the data point.
            </summary>
            <value>The data point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornment.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieAdornment.m_angle">
            <summary>
            Initializes m_angle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieAdornment.m_radius">
            <summary>
            Initializes m_radius
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPieAdornment.AdornmentSegmentsModeProperty">
            <summary>
            Identifies the PieAdornmentSegmentMode dependency property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieAdornment.GetAdornmentSegmentsMode(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Sets the pie adornment segments arrangement mode
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieAdornment.SetAdornmentSegmentsMode(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.AdornmentSegmentModes)">
            <summary>
            Gets the pie adornment segments arrangement mode
            </summary>
            <param name="series"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieAdornment.#ctor(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPieAdornment"/> class.
            </summary>
            <param name="angle">The angle.</param>
            <param name="radius">The radius.</param>
            <param name="point">The point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieAdornment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">The transformer</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPieAdornment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPieAdornment.OnAdornmentSegmentsModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when AdornmentSegmentsMode property is changed
            </summary>
            <param name="d">The DependencyObject d (ChartSeries).</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieAdornment.LabelAngle">
            <summary>
            Gets or sets the label angle.
            </summary>
            <value>The label angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieAdornment.IsConnectorOnTop">
            <summary>
            Gets or sets a value indicating whether this instance is connector is on top.
            </summary>
            <value>
            <c>true</c> if this instance is connector on top; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPieAdornment.ConnectorAlignment">
            <summary>
            Gets or sets the connector alignment.
            </summary>
            <value>The connector alignment.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPolarType">
            <summary>
            Represents ChartPolarType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarType.IsClosedProperty">
            <summary>
             Identifies the IsClosed dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarType.DrawTypeProperty">
            <summary>
             Identifies the DrawType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarType.PolarSymbolProperty">
            <summary>
             Identifies the PolarSymbol dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.GetIsClosed(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the IsClosed property value.
            </summary>
            <param name="area">The Chartarea.</param>
            <returns>The IsClosed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.SetIsClosed(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the IsClosed property value.
            </summary>
            <param name="area">The ChartArea.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.GetPolarSymbol(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the IsClosed property value.
            </summary>
            <param name="series">The ChartSeries.</param>
            <returns>The IsClosed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.SetPolarSymbol(Syncfusion.Windows.Chart.ChartSeries,System.Windows.DataTemplate)">
            <summary>
            Sets the IsClosed property value.
            </summary>
            <param name="series">The ChartSeries.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.GetDrawType(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the DrawType property value.
            </summary>
            <param name="area">The ChartArea.</param>
            <returns>The Drawtype</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.SetDrawType(Syncfusion.Windows.Chart.ChartArea,Syncfusion.Windows.Chart.ChartPolarDrawType)">
            <summary>
            Sets the DrawType property value.
            </summary>
            <param name="area">The ChartArea.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarType.ToString">
            <summary>
            Converts ChartAreaType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPolarType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarType.Flags">
            <summary>
            Gets chart type flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarType.AxesType">
            <summary>
            Gets axes type that are required for chart to be built.
            </summary>
            <value>The type of the axes.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAccumulationAdornment">
            <summary>
            Class represents adornment that is specific to axesless chart types.
            </summary>
            <remarks>
            ChartSeries Adornments are used to display values in a chart segment related to
            it. Values from data points such as X value, Y value or other properties from
            data source can be displayed. 
            <para><b>Note: </b>This will not require any additional settings for adornments.
            Adornments could be added as shown below. <b>ChartAccumulationAdornment</b>
            class will be internally used to set adornments for axesless chart types.</para>
            </remarks>
            <example>
            XAML:
            <code language="XAML">
            <!--Chart with Adornments-->
              &lt;sfchart:Chart&gt;
                        &lt;sfchart:ChartArea Background="LightGray" GridBackground="White"&gt;  
                            &lt;sfchart:ChartSeries Type="Column" &gt;
                           &lt;sfchart:ChartSeries.AdornmentsInfo&gt;
                                    &lt;sfchart:ChartAdornmentInfo 
            LabelContentPath="DataPoint.X" Visible="True"  /&gt;
                                &lt;/sfchart:ChartSeries.AdornmentsInfo&gt;
                            &lt;/sfchart:ChartSeries&gt;       
                        &lt;/sfchart:ChartArea&gt;           
                    &lt;/sfchart:Chart&gt;
            </code>
            C#:
            <code language="C#">
            ChartSeries series = Chart1.Areas[0].Series[0];      
            ChartAdornmentInfo adornments = series.AdornmentsInfo;
            adornments.LabelContentPath = "DataPoint.X";
            adornments.Visible = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAccumulationAdornment.m_y">
            <summary>
            Initializes m_y
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAccumulationAdornment.m_x">
            <summary>
            Initializes m_x
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAccumulationAdornment.ExplodedOffsetProperty">
            <summary>
            Identifies the ExplodedOffset dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAccumulationAdornment.#ctor(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAccumulationAdornment"/> class.
            </summary>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="point">The point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAccumulationAdornment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of the class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAccumulationAdornment.ExplodedOffset">
            <summary>
            Gets or sets the exploded offset. This is a dependency property.
            </summary>
            <value>The exploded offset.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAccumulationAdornment.MinRadius">
            <summary>
            Gets or sets the minimum radius.
            </summary>
            <value>The min <see cref="T:System.Double"/> radius.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPyramidSegment">
            <summary>
            Represents Pyramid chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPyramidType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidSegment.m_y">
            <summary>
            Initializes m_y
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidSegment.m_height">
            <summary>
            Initializes m_height
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidSegment.m_viewport">
            <summary>
            Initializes m_viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidSegment.IsExplodedProperty">
            <summary>
            Identifies the IsExploded dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidSegment.ExplodedOffsetProperty">
            <summary>
            Identifies the ExplodedOffset dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartPyramidSegment"/> class.
            </summary>
            <remarks>
            During initialization the default template for Kagi segment is being created.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidSegment.#ctor(System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPyramidSegment"/> class.
            </summary>
            <param name="y">The y value.</param>
            <param name="height">The height.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">The transformer</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPyramidSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPyramidSegment.Geometry">
            <summary>
            Gets or sets the geometry. This is a dependency property.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPyramidSegment.IsExploded">
            <summary>
            Gets or sets a value indicating whether this instance is exploded. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if this instance is exploded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPyramidSegment.ExplodedOffset">
            <summary>
            Gets or sets the exploded offset. This is a dependency property.
            </summary>
            <value>The exploded offset.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPyramidType">
            <summary>
            Represents ChartPyramidType class
            </summary>
            <remarks>
            Pyramid chart is similar to the funnel chart. Its often used for geographical
            purposes. The Pyramid Chart type displays the data which when totalled will be
            100%. This type of chart is a single series chart representing the data as
            portions of 100%, and this chart does not use any axes.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPyramidSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidType.PyramidModeProperty">
            <summary>
            Identifies the PyramidMode dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidType.GapRatioProperty">
            <summary>
            Identifies the GapRatio dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidType.ExplodedIndexProperty">
            <summary>
            Identifies the ExplodedIndex dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.GetPyramidMode(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the pyramid mode.
            </summary>
            <param name="series">The series.</param>
            <returns>The PyramidMode</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.SetPyramidMode(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartPyramidMode)">
            <summary>
            Sets the pyramid mode.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.GetGapRatio(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the gap ratio.
            </summary>
            <param name="series">The series.</param>
            <returns>The Gap Ratio</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.SetGapRatio(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the gap ratio.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.GetExplodedIndex(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the exploded indices.
            </summary>
            <param name="series">The series.</param>
            <returns>The Exploded Index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.SetExplodedIndex(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Sets the exploded indices.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
            <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.CreateAdornment(Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries,System.Collections.Generic.List{Syncfusion.Windows.Chart.ChartSegment},System.Double,System.Double,System.Double)">
            <summary>
            Creates an adornment.
            </summary>
            <param name="point">The point.</param>
            <param name="series">The series.</param>
            <param name="adornmentsList">The adornments list.</param>
            <param name="currY">The curr Y.</param>
            <param name="height">The height.</param>
            <param name="sumValues">The sum values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The ChartSeries</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPyramidType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.GetSurfaceHeight(System.Double,System.Double)">
            <summary>
            Gets the height of the surface.
            </summary>
            <param name="y">The y value.</param>
            <param name="surface">The surface.</param>
            <returns>The Surface Height</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPyramidType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPyramidType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPyramidType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPyramidType.AxesType">
            <summary>
            Gets axes type that are required for chart to be built.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRadarType">
            <summary>
            Represents ChartRadarType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRadarType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRadarType.IsClosedProperty">
            <summary>
             Identifies the IsClosed dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRadarType.DrawTypeProperty">
            <summary>
             Identifies the DrawType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRadarType.RadarSymbolProperty">
            <summary>
             Identifies the Radarsymbol dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.GetIsClosed(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the IsClosed property value.
            </summary>
            <param name="area">The Chartarea.</param>
            <returns>The IsClosed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.SetIsClosed(Syncfusion.Windows.Chart.ChartArea,System.Boolean)">
            <summary>
            Sets the IsClosed property value.
            </summary>
            <param name="area">The ChartArea.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.GetRadarSymbol(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the IsClosed property value.
            </summary>
            <param name="series">The ChartSeries.</param>
            <returns>The IsClosed</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.SetRadarSymbol(Syncfusion.Windows.Chart.ChartSeries,System.Windows.DataTemplate)">
            <summary>
            Sets the IsClosed property value.
            </summary>
            <param name="series">The ChartSeries.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.GetDrawType(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Gets the DrawType property value.
            </summary>
            <param name="area">The ChartArea.</param>
            <returns>The Drawtype</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRadarType.SetDrawType(Syncfusion.Windows.Chart.ChartArea,Syncfusion.Windows.Chart.ChartRadarDrawType)">
            <summary>
            Sets the DrawType property value.
            </summary>
            <param name="area">The ChartArea.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRadarType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRadarType.AxesType">
            <summary>
            Gets axes type that are required for chart to be built.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRenkoSegment">
            <summary>
            Represents chart renko segment.
            </summary>
            <remarks>
            Single renko segment is created for 
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRenkoType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.m_transformedRectangles">
            <summary>
            Initializes m_transformedRectangles
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.m_representedRectangles">
            <summary>
            Holds represented rectangles array that are used to build the segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.IsPriceUpPropertyKey">
            <summary>
            Identifies IsPriceUp dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.IsPriceDownPropertyKey">
            <summary>
            Identifies IsPriceDown dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.IsPriceUpProperty">
            <summary>
            Identifies IsPriceUp dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.IsPriceDownProperty">
            <summary>
            Identifies IsPriceDown dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartRenkoSegment"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoSegment.#ctor(Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries,System.Windows.Rect[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartRenkoSegment"/> class.
            </summary>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
            <param name="representedRects">The represented rects.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRenkoSegment.Geometry">
            <summary>
            Gets or sets the geometry. This is a dependency property.
            </summary>
            <remarks>Represents the geometry of the segment.</remarks>
            <value>The geometry.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRenkoSegment.IsPriceUp">
            <summary>
            Gets a value indicating whether this renko segment represents price moving up.
            This is a dependency property.
            </summary>
            <value>
             <c>true</c> if this instance is price up; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRenkoSegment.IsPriceDown">
            <summary>
            Gets a value indicating whether this renko segment represents price moving down.
            This is a dependency property.
            </summary>
            <value>
             <c>true</c> if this segment is price down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRenkoType">
            <summary>
            Represents Renko chart type.
            </summary>
            <remarks>
            Renko charting method is thought to have acquired its name from
            "renga" which is the Japanese word for bricks. Renko Charts were
            introduced by Steve Nison. Renko (Bricks) are drawn equal in size for a
            determined amount. A brick is drawn in the direction of the prior move only if
            prices move by a minimum amount. If prices change by the determined amount or
            more, a new brick is drawn. If prices change by less than the determined amount
            (specified by ReversalAmount), the new price is ignored. The default value of
            ReversalAmount is 1.
            <para></para>
            <para>If the new closing price penetrates the previous bricks closing price in
            the opposite direction a trend reversal highlighted by the change in color of
            the bricks happens. Use the PriceUpColor to indicate bullish trend and
            PriceDownColor to indicate bearish trend.</para>
            <para></para>
            <para>Since a Renko chart isolates the underlying trends by filtering out the
            minor ups and downs, Renko charts are excellent in determining support and
            resistance levels.  </para>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRenkoSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoType.RenkoCostProperty">
            <summary>
            Identifies the RenkoCost dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoType.BoxSizeProperty">
            <summary>
            Identifies the BoxSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRenkoType.IsPercentageSizeProperty">
            <summary>
            Identifies the IsPercentageSize dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.OnRenkoCostChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when renkocost property value changed in RenKo Chart
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when BoxSize property is changed
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.GetRenkoCost(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the renko cost.
            </summary>
            <param name="series">The series.</param>
            <returns>The Renko Cost</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.SetRenkoCost(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the renko cost.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.GetBoxSize(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Return the string Value from the given ChartSeries
            </summary>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.SetBoxSize(Syncfusion.Windows.Chart.ChartSeries,System.String)">
            <summary>
            Set BoxSize to the Corresponding ChartSeries from the Given value.
            </summary>
            <param name="ser"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.GetIsPercentageSize(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Return the bool Value from the given ChartSeries
            </summary>
            <param name="ser"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.SetIsPercentageSize(Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
            <summary>
            Set SignalLineColor to the Corresponding DependencyObject from the Given value.
            </summary>
            <param name="ser"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the specified series.
            </summary>
            <param name="series">The series.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRenkoType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRenkoType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRenkoType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRenkoType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSymbolSegment">
            <summary>
            Represents the symbol that is a part of <see cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSymbolSegment.C_symbolSize">
            <summary>
            Initializes C_symbolSize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSymbolSegment.m_point">
            <summary>
            Initializes m_point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSymbolSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSymbolSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSymbolSegment.scatterHeightProperty">
            <summary>
            Identifies the scatterheight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSymbolSegment.scatterWidthProperty">
            <summary>
            Identifies the scatterwidth dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSymbolSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartSymbolSegment"/> class.
            </summary>
            <remarks>
            Chart symbol's segment default template is created automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSymbolSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSymbolSegment"/> class.
            </summary>
            <param name="point">The point to represent.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSymbolSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSymbolSegment.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSymbolSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draw3s the D segment.
            </summary>
            <param name="transformer">The transformer.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSymbolSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSymbolSegment.scatterHeight">
            <summary>
            Gets or Sets the ScatterHeight property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSymbolSegment.scatterWidth">
            <summary>
            Gets or sets the scatterwidth
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSymbolSegment.X">
            <summary>
            Gets or sets the X symbol's co-ordinate. This is a dependency property.
            </summary>
            <remarks>Represents X co-ordinate of segment.</remarks>
            <value>The X <see cref="T:System.Double"/> value..</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSymbolSegment.Y">
            <summary>
            Gets or sets the Y symbol's co-ordinate. This is a dependency property.
            </summary>
            <remarks>Represents Y co-ordinate of segment.</remarks>
            <value>The Y <see cref="T:System.Double"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartScatterType">
            <summary>
            Represents ChartScatterType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.GetScatterHeight(System.Windows.DependencyObject)">
            <summary>
            Return the double Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.SetScatterHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the FastScatterHeight dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartScatterType.ScatterHeightProperty">
            <summary>
            Indicates the FastScatterHeight Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.GetScatterWidth(System.Windows.DependencyObject)">
            <summary>
            Return double value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.SetScatterWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the value of the FastScatterWidth dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartScatterType.ScatterWidthProperty">
            <summary>
            Indicates the FastScatterWidth Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartScatterType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScatterType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartScatterType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartScatterType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeightConverter">
            <summary>
            Return double value for height proeprty
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeightConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeightConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.WidthConverter">
            <summary>
            Return double value for Width property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.WidthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.WidthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartEmptySymbolSegment">
            <summary>
            Represents the symbol that is a part of <see cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.C_symbolSize">
            <summary>
            Initializes C_symbolSize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.m_point">
            <summary>
            Initializes m_point
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.TemplateProperty">
             <summary>
            Identifies the Template dependency property.
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartEmptySymbolSegment"/> class.
            </summary>
            <remarks>
            Chart symbol's segment default template is created automatically.
            </remarks>
            
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries,System.Windows.DataTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartEmptySymbolSegment"/> class.
            </summary>
            <param name="point">The point to represent.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
            <param name="dt"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draw3s the D segment.
            </summary>
            <param name="transformer">The transformer.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartEmptySymbolSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.X">
            <summary>
            Gets or sets the X symbol's co-ordinate. This is a dependency property.
            </summary>
            <remarks>Represents X co-ordinate of segment.</remarks>
            <value>The X <see cref="T:System.Double"/> value..</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.Template">
            <summary>
            Get or set TemplateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartEmptySymbolSegment.Y">
            <summary>
            Gets or sets the Y symbol's co-ordinate. This is a dependency property.
            </summary>
            <remarks>Represents Y co-ordinate of segment.</remarks>
            <value>The Y <see cref="T:System.Double"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSplineSegment">
            <summary>
            Represents spline chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSplineType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineSegment.X1Property">
            <summary>
            Identifies the X1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineSegment.X2Property">
            <summary>
            Identifies the X2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineSegment.Y1Property">
            <summary>
            Identifies the Y1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineSegment.Y2Property">
            <summary>
            Identifies the Y2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSplineSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartSplineSegment"/> class.
            </summary>
            <remarks>
            Default segment template is being assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSplineSegment"/> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
            <param name="point4">The point4.</param>
            <param name="correspondingPoint1">The corresponding point1.</param>
            <param name="correspondingPoint2">The corresponding point2.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineSegment.GetSplineRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the spline range.
            </summary>
            <param name="x1">The x1 value.</param>
            <param name="y1">The y1 value.</param>
            <param name="x2">The x2 value.</param>
            <param name="y2">The y2 value.</param>
            <param name="x3">The x3 value.</param>
            <param name="y3">The y3 value.</param>
            <param name="x4">The x4 value.</param>
            <param name="y4">The y4 value.</param>
            <returns>The SplineRange</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>The point1.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>The point2.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Point3">
            <summary>
            Gets or sets the point3.
            </summary>
            <value>The point3.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Point4">
            <summary>
            Gets or sets the point4.
            </summary>
            <value>The point4.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.X1">
            <summary>
            Gets or sets the x1 point. This is a dependency property.
            </summary>
            <value>The x1 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.X2">
            <summary>
            Gets or sets the x2 point. This is a dependency property.
            </summary>
            <value>The x2 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Y1">
            <summary>
            Gets or sets the y1 point. This is a dependency property.
            </summary>
            <value>The y1 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Y2">
            <summary>
            Gets or sets the y2 point. This is a dependency property.
            </summary>
            <value>The y2 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSplineSegment.Geometry">
            <summary>
            Gets or sets the segment's geometry. This is a dependency property.
            </summary>
            <value>The geometry.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRotatedSplineType">
            <summary>
            Represents ChartRotatedSplineType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRotatedSplineType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRotatedSplineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRotatedSplineType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingBarType">
            <summary>
            Represents ChartStackingBarType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingBarType.ToString">
            <summary>
            Converts ChartColumnType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingBarType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingBarType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartGanttType">
            <summary>
            Represents ChartGanttType
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRangeColumnType">
            <summary>
            Represents ChartRangeColumnType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeColumnType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeColumnType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeColumnType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartRangeColumnType.ToString">
            <summary>
            Converts ChartColumnType to string
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeColumnType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartRangeColumnType.RequiresDataCount">
            <summary>
            Gets the require data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartGanttType.ToString">
            <summary>
            Converts ChartGanttType to string 
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartGanttType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartGanttType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSplineAreaSegment">
            <summary>
            Represents spline area chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineAreaSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSplineAreaSegment"/> class.
            </summary>
            <param name="splinePoints">The spline points.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="parentSeries">The parent series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineAreaSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineAreaSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSplineAreaSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStepAreaType">
            <summary>
            Represents ChartStepAreaType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepAreaType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepAreaType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The Chart Series</param>
            <param name="points">The series points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepAreaType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepAreaType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepAreaType"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStepLineSegment">
            <summary>
            Represents Step line chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepLineType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.m_point1">
            <summary>
            Declares m_point1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.m_point2">
            <summary>
            Declares m_point2
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.m_stepPoint">
            <summary>
            Declares m_stepPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.X1Property">
            <summary>
            Identifies the X1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.X2Property">
            <summary>
            Identifies the X2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.Y1Property">
            <summary>
            Identifies the Y1 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.Y2Property">
            <summary>
            Identifies the Y2 dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.StepXProperty">
            <summary>
            Identifies the StepX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.StepYProperty">
            <summary>
            Identifies the StepY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStepLineSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartStepLineSegment"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartStepLineSegment"/> class.
            </summary>
            <param name="point1">The point1.</param>
            <param name="stepPoint">The step point.</param>
            <param name="point2">The point2.</param>
            <param name="correspondingPoint1">The corresponding point1.</param>
            <param name="correspondingPoint2">The corresponding point2.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepLineSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draw3s the D segment.
            </summary>
            <param name="transformer">The transformer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.X1">
            <summary>
            Gets or sets the x1. This is a dependency property.
            </summary>
            <value>The x1 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.X2">
            <summary>
            Gets or sets the x2. This is a dependency property.
            </summary>
            <value>The x2 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.Y1">
            <summary>
            Gets or sets the y1. This is a dependency property.
            </summary>
            <value>The y1 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.Y2">
            <summary>
            Gets or sets the y2. This is a dependency property.
            </summary>
            <value>The y2 value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.StepX">
            <summary>
            Gets or sets the step X. This is a dependency property.
            </summary>
            <value>The step X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.StepY">
            <summary>
            Gets or sets the step Y. This is a dependency property.
            </summary>
            <value>The step Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineSegment.Points">
            <summary>
            Gets or sets the segment's points. This is a dependency property.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStepLineType">
            <summary>
            Represents ChartStepLineType class
            </summary>
            <remarks>
            Step Line Charts use horizontal and vertical lines to connect data points
            resulting in a step like progression.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepLineSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStepLineType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStepLineType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStepLineType.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLineBreakSegment">
            <summary>
            Represents Line break chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.m_bottomLeftPoint">
            <summary>
            Declares m_bottomLeftPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.m_topRightPoint">
            <summary>
            Declares m_topRightPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.IsPriceUpProperty">
            <summary>
            Identifies the IsPriceUp dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.IsPriceDownProperty">
            <summary>
            Identifies the IsPriceDown dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLineBreakSegment.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineBreakSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartLineBreakSegment"/> class.
            </summary>
            <remarks>
            Default segment template is beibg assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineBreakSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartLineBreakSegment"/> class.
            </summary>
            <param name="bottomLeftPoint">The bottom left point.</param>
            <param name="topRightPoint">The top right point.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineBreakSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLineBreakSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineBreakSegment.X">
            <summary>
            Gets or sets the X segment co-ordinate. This is a dependency property.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineBreakSegment.Y">
            <summary>
            Gets or sets the Y segment co-ordinate. This is a dependency property.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineBreakSegment.Width">
            <summary>
            Gets or sets the width of the segment. This is a dependency property.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineBreakSegment.Height">
            <summary>
            Gets or sets the height of the segment. This is a dependency property.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineBreakSegment.IsPriceUp">
            <summary>
            Gets or sets a value indicating whether this segment is price up. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if this segment is price up; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLineBreakSegment.IsPriceDown">
            <summary>
            Gets or sets a value indicating whether this segment is price down. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if this segment is price down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartThreeLineBreakType">
            <summary>
            Represents ChartThreeLineBreakType class
            </summary>
            <remarks>
            Three Line Break Chart is similar in concept to point and figure charts. The
            Three Line Break charting method is so-named because of the number of lines
            typically used. It displays a series of vertical boxes ("lines") that are based
            on changes in prices. It ignores the passage of time.
            The three-line break chart looks like a series of rising and falling lines of
            varying heights. Each new line, like the Xs and Os of a point and figure chart,
            occupies a new column. Based on closing prices (or highs and lows), a new rising
            line is drawn if the previous high is exceeded and a new falling line is drawn
            if the price hits a new low. Change in price trends are highlighted by changing
            colors. Use the PriceUpColor to indicate bullish trend and PriceDownColor to
            indicate bearish trend.
            The ReversalAmount specifies the threshold amount by which the price should
            change to begin rendering a new vertical box in the appropriate direction.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLineBreakSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartThreeLineBreakType.BreakLineCountProperty">
            <summary>
            Identifies the BreakLineCount dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartThreeLineBreakType"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.GetBreakLineCount(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the break line count.
            </summary>
            <param name="series">The series.</param>
            <returns>the BreakLineCount</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.SetBreakLineCount(Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Sets the break line count.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments of specified series.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the specified series.
            </summary>
            <param name="series">The series.</param>
            <seealso>
                <cref>ChartSThreeLineBreakType</cref>
            </seealso>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartThreeLineBreakType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartThreeLineBreakType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation">
            <summary>
            Represents LineBreakInformation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.LeftTopPoint">
            <summary>
            Declares LeftTopPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.RightBottomPoint">
            <summary>
            Declares RightBottomPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.IsNegative">
            <summary>
            Declares IsNegative
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.CorrespondingPoints">
            <summary>
            Declares CorrespondingPoints
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,System.Boolean,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation"/> class.
            </summary>
            <param name="ltPoint">The lt point.</param>
            <param name="rbPoint">The rb point.</param>
            <param name="negative">if set to <c>true</c> [negative].</param>
            <param name="correspondingPoints">The corresponding points.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.Low">
            <summary>
            Gets the low.
            </summary>
            <value>The low value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartThreeLineBreakType.LineBreakInformation.High">
            <summary>
            Gets the high.
            </summary>
            <value>The high value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment">
            <summary>
            Represents HiLo Open-Close chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartOpenXProperty">
            <summary>
            Identifies the StartOpenX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartOpenYProperty">
            <summary>
            Identifies the StartOpenY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndOpenXProperty">
            <summary>
            Identifies the EndOpenX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndOpenYProperty">
            <summary>
            Identifies the EndOpenY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartCloseXProperty">
            <summary>
            Identifies the StartCloseX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartCloseYProperty">
            <summary>
            Identifies the StartCloseY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndCloseXProperty">
            <summary>
            Identifies the EndCloseX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndCloseYProperty">
            <summary>
            Identifies the EndCloseY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.m_sopen">
            <summary>
            Initializes m_sOpen
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.m_eopen">
            <summary>
            Initializes m_eOpen
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.m_sclose">
            <summary>
            Initializes m_sClose
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.m_eclose">
            <summary>
            Initializes m_eClose
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment"/> class.
            </summary>
            <remarks>Default template is being assigned automatically.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment">ChartHiLoOpenCloseSegment</see> class. 
            </summary>
            <param name="hi">The hi value.</param>
            <param name="lo">The lo value.</param>
            <param name="sOpen">The s open.</param>
            <param name="eopen">The e open.</param>
            <param name="sclose">The s close.</param>
            <param name="eclose">The e close.</param>
            <param name="correspondingPoint1">The corresponding point1.</param>
            <param name="series">The series.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndCloseY">
            <summary>
            Gets or sets the end close Y. This is a dependency property.
            </summary>
            <value>The end close Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndCloseX">
            <summary>
            Gets or sets the end close X. This is a dependency property.
            </summary>
            <value>The end close X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartCloseY">
            <summary>
            Gets or sets the start close Y. This is a dependency property.
            </summary>
            <value>The start close Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartCloseX">
            <summary>
            Gets or sets the start close X. This is a dependency property.
            </summary>
            <value>The start close X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndOpenY">
            <summary>
            Gets or sets the end open Y. This is a dependency property.
            </summary>
            <value>The end open Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.EndOpenX">
            <summary>
            Gets or sets the end open X. This is a dependency property.
            </summary>
            <value>The end open X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartOpenY">
            <summary>
            Gets or sets the start open Y. This is a dependency property.
            </summary>
            <value>The start open Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseSegment.StartOpenX">
            <summary>
            Gets or sets the start open X. This is a dependency property.
            </summary>
            <value>The start open X.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType">
            <summary>
            Represents ChartHiLoOpenCloseType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType.ToString">
            <summary>
            Converts ChartHiLoOpenCloseType to string 
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the segments.
            </summary>
            <param name="series">The ChartSeries</param>
            <param name="points">The indexed data points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartHiLoOpenCloseType.RequiresDataCount">
            <summary>
            Gets the require data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTornadoType">
            <summary>
            Represents ChartTornadoType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTornadoType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTornadoType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTornadoType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCandleSegment">
            <summary>
            Represents price segment that is a part of candle chart type.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.HiXProperty">
            <summary>
            Identifies the HiX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.HiYProperty">
            <summary>
            Identifies the HiY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.LoXProperty">
            <summary>
            Identifies the LoX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.LoYProperty">
            <summary>
            Identifies the LoY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.FillBrushProperty">
            <summary>
            Identifies the FillBrush dependency property.
            Using a DependencyProperty as the backing store for FillBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.m_point1">
            <summary>
            Initializes m_point1
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleSegment.m_point2">
            <summary>
            Initializes m_point2
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartCandleSegment"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartCandleSegment">ChartCandleSegment</see> class. 
            </summary>
            <param name="bottomLeftPnt">The bottom left PNT</param>
            <param name="topRightPnt">The top right PNT</param>
            <param name="hipt">The hi pt.</param>
            <param name="lopt">The lo pt.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
            <param name="isbullValue"></param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCandleSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleSegment.IsBullValue">
            <summary>
            Get and Set IsBullValue
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleSegment.HiX">
            <summary>
            Gets or sets the Hi X value
            </summary>
            <value>The hi X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleSegment.HiY">
            <summary>
            Gets or sets the hi Y value.
            </summary>
            <value>The hi Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleSegment.LoX">
            <summary>
            Gets or sets the low X.
            </summary>
            <value>The lo X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleSegment.LoY">
            <summary>
            Gets or sets the low Y.
            </summary>
            <value>The lo Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleSegment.FillBrush">
            <summary>
            Gets or sets the fill brush.
            </summary>
            <value>The fill brush.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCandleSegment.SegmentFillConverter">
            <summary>
            Represents SegmentFillConverter
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartRangeAreaSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.SegmentFillConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCandleSegment.SegmentFillConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleSegment.SegmentFillConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCandleSegment.SegmentFillConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCandleType">
            <summary>
            Represents candle chart type.
            </summary>
            <seealso>
                <cref>ChartCandleeSegment</cref>
            </seealso>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.GetBearFillColor(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the BearFillColor dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <returns>The LowValueInterior Brush</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.SetBearFillColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the BearFillColor dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleType.BearFillColorProperty">
            <summary>
            Indicates the BearFillColor Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.GetBullFillColor(System.Windows.DependencyObject)">
            <summary>
            Return the Brush Value from the given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.SetBullFillColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the value of the BearFillColor dependency property.
            </summary>
            <param name="obj">The DependencyObject obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCandleType.BullFillColorProperty">
            <summary>
            Indicates the BearFillColor Dependency Property
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.ToString">
            <summary>
            Converts ChartCandleType to string 
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCandleType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCandleType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCandleType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleType.RequiresDataCount">
            <summary>
            Gets the required data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCandleType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBubbleSegment">
            <summary>
            Represents Bubble chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBubbleType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleSegment.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleSegment.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleSegment.RadiusProperty">
            <summary>
            Identifies the Radius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleSegment.m_point">
            <summary>
            Initializes m_point
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartBubbleSegment"/> class.
            </summary>
            <remarks>Default segment's template is being assigned automatically.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartBubbleSegment"/> class.
            </summary>
            <param name="point">The point.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBubbleSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Draws the 3D segment.
            </summary>
            <param name="transformer">The transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleSegment.X">
            <summary>
            Gets or sets the X co-ordinate value. This is a dependency property.
            </summary>
            <remarks>Represents the X co-ordinate of the bubble.</remarks>
            <value>The X co-ordinate value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleSegment.Y">
            <summary>
            Gets or sets the Y co-ordinate value. This is a dependency property.
            </summary>
            <remarks>Represents the Y co-ordinate of the bubble.</remarks>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleSegment.Width">
            <summary>
            Gets or sets the width. This is a dependency property.
            </summary>
            <remarks>Represents the width of the bubble's ellipse.</remarks>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleSegment.Height">
            <summary>
            Gets or sets the height. This is a dependency property.
            </summary>
            <remarks>Represents the height of ellipse.</remarks>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleSegment.Radius">
            <summary>
            Gets or sets the radius. This is a dependency property.
            </summary>
            <remarks>Represents the radius of the bubble.</remarks>
            <value>The radius.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBubbleType">
            <summary>
            Represents ChartBubleType class
            </summary>
            <remarks>
            Bubble Chart is an extension of the Scatter Chart (or XY-chart) where each data
            marker is represented by a circle whose dimension form a third variable.
            Consequently, bubble charts allow three-variable comparisons allowing for easy
            visualization of complex interdependencies that are not apparent in two-variable
            charts. Bubble charts are frequently used in market and product comparison
            studies.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBubbleSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleType.C_symbolSize">
            <summary>
            Declares c_symbolSize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleType.MinRadiusProperty">
            <summary>
            Identifies the MinRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBubbleType.MaxRadiusProperty">
            <summary>
            Identifies the MaxRadius dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.GetMinRadius(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the minimal radius of bubble.
            </summary>
            <param name="series">The series.</param>
            <returns>The minimal radius</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.SetMinRadius(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the minimal radius of bubble.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.GetMaxRadius(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the maximal radius of bubble.
            </summary>
            <param name="series">The series.</param>
            <returns>The double radius</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBubbleType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.SetMaxRadius(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the max radius of bubble.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBubbleType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBubbleType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Updates the series.
            </summary>
            <param name="series">The Chart series</param>
            <param name="points">The indexed points</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBubbleType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleType.RequiresDataCount">
            <summary>
            Gets the require data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBubbleType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPointAndFigureSegment">
            <summary>
            Represents Point and Figure chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.m_figurecost">
            <summary>
            Declares m_figurecost
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.ShapeProperty">
            <summary>
            Identifies the Shape dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.StrokeColorProperty">
            <summary>
            Identifies the StrokeColor dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.GeometryProperty">
            <summary>
            Identifies the Geometry dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.XProperty">
            <summary>
            Identifies the X dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.YProperty">
            <summary>
            Identifies the Y dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.WidthProperty">
            <summary>
            Identifies the Width dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.HeightProperty">
            <summary>
            Identifies the Height dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureSegment"/> class.
            </summary>
            <remarks>
            Default segment template is assigned automatically.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.IChartDataPoint[],Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureSegment"/> class.
            </summary>
            <param name="pt1">The bottom left PNT.</param>
            <param name="pt2">The top right PNT.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The series.</param>
            <param name="figcost"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">Instance of class that implements <see cref="T:Syncfusion.Windows.Chart.IChartTransformer"/> interface.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.X">
            <summary>
            Gets or sets the X co-ordinate of segment.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.StrokeColor">
            <summary>
            Gets or sets the StrokeColor of segment.
            </summary>
            <value>The StrokeColor value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Geometry">
            <summary>
            Gets or sets the segment geometry. This is a dependency property.
            </summary>
            <value>The <see cref="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Geometry"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Y">
            <summary>
            Gets or sets the Y co-ordinate of segment.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Width">
            <summary>
            Gets or sets the width of segment.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Height">
            <summary>
            Gets or sets the height of segment.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.Shape">
            <summary>
            Gets or sets the shape.
            </summary>
            <value>The shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.PointColl1">
            <summary>
            Get or Set PointColl1 property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureSegment.PointColl2">
            <summary>
            Get or Set PointColl2 property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPointAndFigureType">
            <summary>
            Represents ChartPointAndFigureType class
            </summary>
            <remarks>
            Point and Figure Chart is used to identify support levels, resistance levels and
            chart patterns. The chart ignores the time factor and concentrates solely on
            movements in price - a column of Xs or Os may take one day or several weeks to
            complete. By convention, the first X in a column is plotted one box above the
            last O in the previous column (and the first O in a column is plotted one box
            below the highest X).
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureSegment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureType.FigureCostProperty">
            <summary>
            Identifies the FigureCost dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureType.ReversalAmountProperty">
            <summary>
            Identifies the ReversalAmount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigureType.StartFromProperty">
            <summary>
            Identifies the StartFrom dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureType"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.GetStartFrom(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the starting series.
            </summary>
            <param name="series">The series.</param>
            <returns>The start from value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.SetStartFrom(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartPointAndFigure)">
            <summary>
            Sets the starting series.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.GetReversalAmount(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the reversal amount.
            </summary>
            <param name="series">The series.</param>
            <returns>Returns the reversal amount</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.SetReversalAmount(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the reversal amount.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.GetFigureCost(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the figure cost.
            </summary>
            <param name="series">The series.</param>
            <returns>Returns the figure cost</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.SetFigureCost(Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Sets the figure cost.
            </summary>
            <param name="series">The series.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.IsCompatible(Syncfusion.Windows.Chart.ChartType)">
            <summary>
            Determines whether the this type is compatible with specified type.
            </summary>
            <param name="type">The type value.</param>
            <returns>
            <c>true</c> if the type is compatible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.onStartFromChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when StartFrom property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.OnReverseAmountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ReversalAmount property changed
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.Calculate(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The ChartSeries</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.Update(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates chart.
            </summary>
            <param name="series">The ChartSeries</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.GenerateSegments(System.Double,System.Double,System.Double,Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartPointAndFigure,Syncfusion.Windows.Chart.ChartSeries,System.Double)">
            <summary>
            Generates the segments.
            </summary>
            <param name="x">The x value.</param>
            <param name="from">Starting value.</param>
            <param name="to">Ending value.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="shape">The shape value.</param>
            <param name="series">The series.</param>
            <param name="delta">The delta.</param>
            <returns>Returns the ChartSegments</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointAndFigureType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointAndFigureType.RequiresDataCount">
            <summary>
            Gets the require data count.
            </summary>
            <value>The require data count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAdornmentsPresenter">
            <summary>
            Represents ChartAdornmentsPresenter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.m_elements">
            <summary>
            Initializes m_elements
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.VisibleSeriesProperty">
            <summary>
            Identifies the VisibleSeries dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.AxesProperty">
            <summary>
            Identifies the Axes dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.AreaProperty">
            <summary>
            Identifies the Area dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAdornmentsPresenter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.OnAxesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axes property changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.OnVisibleSeriesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when visible series property was changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.OnAxesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [axes collection changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.OnAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Called when axis range was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.OnVisibleSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when visible series collection was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.OnAdornmentsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when adornments collection was changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ResetAdornments">
            <summary>
            Resets the adornments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.AddAdornment(Syncfusion.Windows.Chart.ChartAdornment)">
            <summary>
            Adds the adornment to UI children collection.
            </summary>   
            <param name="adornment">The adornment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.RemoveAdornment(Syncfusion.Windows.Chart.ChartAdornment)">
            <summary>
            Removes the adornment from UI children collecion.
            </summary>
            <param name="adornment">The adornment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.CreateTransformer(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Creates the transformer.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="series">The series.</param>
            <returns>The Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.VisibleSeries">
            <summary>
            Gets or sets the VisibleSeries. This is a dependency property.
            </summary>
            <value>The VisibleSeries.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.Axes">
            <summary>
            Gets or sets the Axes. This is a dependency property.
            </summary>
            <value>The Axes value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.Area">
            <summary>
            Gets or sets the Area. This is a dependency property.
            </summary>
            <value>The Area value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer">
            <summary>
            Represents ChartAdornmentContainer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_ardorment">
            <summary>
            Initializes m_ardorment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_symbolOffset">
            <summary>
            Initializes m_symbolOffset.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_adornmentSize">
            <summary>
            Initializes m_adornmentSize.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_labelPresenter">
            <summary>
            Initializes m_labelPresenter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_symbolPresenter">
            <summary>
            Initializes m_symbolPresenter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_connectorPresenter">
            <summary>
            Initializes m_connectorPresenter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.m_predefinedSymbol">
            <summary>
            Initializes m_predefinedSymbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.screenHeight">
            <summary>
            Initializes screen Height. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.screenWidth">
            <summary>
            Initializes screen Width.
            </summary>            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.LabelHorizontalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelHorizontalAlignment.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.LabelVerticalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for LabelVerticalAlignment.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.#ctor(Syncfusion.Windows.Chart.ChartAdornment,System.Windows.ResourceDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer"/> class.
            </summary>
            <param name="ardorment">The ardorment.</param>
            <param name="RD"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.SetContentBinding(Syncfusion.Windows.Chart.ChartAdornment)">
            <summary>
            Sets the content binding.
            </summary>
            <param name="ardorment">The ardorment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.ArrangePieAdornment">
            <summary>
            Arranges the pie adornment.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.ArrangePyramidAdornment">
            <summary>
            Arranges the pyramid adornment.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.MeasurePieAdornment(System.Windows.Size,System.Windows.Size)">
            <summary>
            Measures the pie adornment.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <param name="resultSize">Size of the result.</param>
            <returns>Returns the size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.MeasurePyramidAdornment(System.Windows.Size,System.Windows.Size)">
            <summary>
            Measures the pyramid adornment.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <param name="resultSize">Size of the result.</param>
            <returns>Returns the size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.SetSymbol(System.String,System.Windows.ResourceDictionary)">
            <summary>
            Sets the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="baseRD"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.OnAdornmentsInfoChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when adornments info property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"></see>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is raised.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.ConnectorShift">
            <summary>
            Gets or sets the connector shift.
            </summary>
            <value>The connector shift.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.ConnectorPresenter">
            <summary>
            Gets the connector presenter.
            </summary>
            <value>The connector presenter.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.Adornment">
            <summary>
            Gets the adornment.
            </summary>
            <value>The adornment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.SymbolOffset">
            <summary>
            Gets the symbol offset.
            </summary>
            <value>The symbol offset.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.LabelVerticalAlignment">
            <summary>
            Gets or sets the label vertical alignment.
            </summary>
            <value>The label vertical alignment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.LabelHorizontalAlignment">
            <summary>
            Gets or sets the label horizontal alignment.
            </summary>
            <value>The label horizontal alignment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.LabelPresenter">
            <summary>
            Gets the label presenter.
            </summary>
            <value>The label presenter.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.SymbolPresenter">
            <summary>
            Gets the label presenter.
            </summary>
            <value>The label presenter.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentsPresenter.ChartAdornmentContainer.PredefinedSymbol">
            <summary>
            Gets the predefined symbol.
            </summary>
            <value>The predefined symbol.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner">
            <summary>
            Represent the <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> annotations class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.m_elements">
            <summary>
            Represents adorner's UI elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.m_flagLines">
            <summary>
            Represents dicrionary record that holds line coordinates that correspond to each annotaion.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.m_area">
            <summary>
            Represents adorned ChartArea.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.ParentSeriesProperty">
            <summary>
            Identifies the ParentSeries attached dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.#ctor(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner"/> class.
            </summary>
            <param name="adornedElement">The adorned element.</param>
            <param name="area">The area value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.OnWrappedAnnotationsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles wrapped annotation collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.OnAdornedSeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when when adorned area's seires collection changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.AnnotationReset">
            <summary>
            Called when adorned series annotations collection was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.Initialize">
            <summary>
            Initializes the adorner. Retrieves all annotations from existing series and subscribes to necessary events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.AddAnnotations(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Adds the annotations from specified series..
            </summary>
            <seealso>
                <cref>ChartAnnotationAdorner</cref>
            </seealso>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.RemoveAnnotations(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Removes the annotations.
            </summary>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.OnAnnotationPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles annotations property changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.OnAdornedSeriesPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when adorned series property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.OnSeriesAnnotationsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when [series annotations property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.GetParentSeries(Syncfusion.Windows.Chart.ChartSeriesAnnotation)">
            <summary>
            Gets the parent series.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns>The parent series</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.SetParentSeries(Syncfusion.Windows.Chart.ChartSeriesAnnotation,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Sets the parent series.
            </summary>
            <param name="annotation">The annotation.</param>
            <param name="series">The series.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection">
            <summary>
            Represents UIElementCollection class that is extended to hold annotaions and notify about collection changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.m_templateConverter">
            <summary>
            Represents template converter used to provide proper template value for wrapped anotation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.#ctor(System.Windows.UIElement,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection"/> class.
            </summary>
            <param name="visualParent">The <see cref="T:System.Windows.UIElement"/> parent of the collection.</param>
            <param name="logicalParent">The logical parent of the elements in the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.Add(Syncfusion.Windows.Chart.ChartSeriesAnnotation)">
            <summary>
            Adds the specified annotation and wraps it to <see cref="T:System.Windows.Controls.ContentPresenter"/> internally.
            </summary>
            <param name="annotation">The annotation.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.Remove(Syncfusion.Windows.Chart.ChartSeriesAnnotation)">
            <summary>
            Removes the specified annotation from wrapped annotations collection.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.CreateContatinerFromAnnotation(Syncfusion.Windows.Chart.ChartSeriesAnnotation)">
            <summary>
            Creates the <see cref="T:System.Windows.Controls.ContentPresenter"/> container for annotation.
            </summary>
            <param name="annotation">The annotation.</param>
            <returns><see cref="T:System.Windows.Controls.ContentPresenter"/> that holds annotation.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.AnnotationsTemplateConverter">
            <summary>
            Provides selection for Annotation's template. As per behavior requirements,
            Annotaion should either use it's own (non null) DataTemplate or use template declared in parent collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.AnnotationsTemplateConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.AnnotationsTemplateConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.AnnotationsTemplateConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationsAdorner.WrappedAnnotationCollection.AnnotationsTemplateConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaTemplateSelector">
            <summary>
            Class is used for template selection during changing axes type.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate"></see> based on custom logic.
            </summary>
            <param name="item">The data object for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>
            Returns a <see cref="T:System.Windows.DataTemplate"></see> or null. The default value is null.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaTemplateSelector.CartesianTemplate">
            <summary>
            Gets or sets the Cartesian template.
            </summary>
            <value>The Cartesian template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaTemplateSelector.PolarTemplate">
            <summary>
            Gets or sets the polar template.
            </summary>
            <value>The polar template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaTemplateSelector.NoneTemplate">
            <summary>
            Gets or sets the none template.
            </summary>
            <value>The none template.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaPresenter">
            <summary>
            Class is a container for <see cref="T:Syncfusion.Windows.Chart.ChartArea">chart areas</see>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreasCollection"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.C_axesContainerName">
            <summary>
            Declares c_axesContainerName
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.C_seriesContainerName">
            <summary>
            Declares c_seriesContainerName
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.C_gridElementName">
            <summary>
            Declares c_gridElementName
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.C_watermarkElementName">
            <summary>
            Declares C_watermarkElementName
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.C_scaleBreakElementName">
            <summary>
            Declares C_scaleBreakElementName 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.m_owner">
            <summary>
            Initializes m_owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.m_axesContainer">
            <summary>
            Initializes m_axesContainer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.m_seriesContainer">
            <summary>
            Initializes m_seriesContainer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaPresenter.m_gridElement">
            <summary>
            Initializes m_gridElement
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPresenter.#ctor">
            <summary>
            Called when Instance created for ChartAreaPresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPresenter.InvalidateChildren">
            <summary>
            Invalidates the children.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPresenter.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"></see>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaPresenter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPresenter.InvalidateTemplate">
            <summary>
            Update current template or template selector.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaPresenter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaPresenter.AxesContainer">
            <summary>
            Gets the axes container.
            </summary>
            <value>The axes container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaPresenter.SeriesContainer">
            <summary>
            Gets the series container.
            </summary>
            <value>The series container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaPresenter.GridElement">
            <summary>
            Get and Set CLR GridElement property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPanel">
            <summary>
            Represents chart layout panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesPresenter">
            <summary>
            Represents ChartSeriesPresenter
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeriesPresenter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.SeriesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Series.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.XAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.YAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for YAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.ObjectProperty">
            <summary>
            Using a DependencyProperty as the backing store for Object.  This enables animation, styling, binding, etc...
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.m_elements">
            <summary>
            Initializes m_elements
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.m_visibleElements">
            <summary>
            Initializes m_visibleElements
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSeriesPresenter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.Canvas"></see> element.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            A <see cref="T:System.Windows.Size"></see> that represents the arranged size of this <see cref="T:System.Windows.Controls.Canvas"></see> element and its descendants.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.Canvas"></see> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Canvas.ArrangeOverride(System.Windows.Size)"></see> pass.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            A <see cref="T:System.Windows.Size"></see> that represents the size that is required to arrange child content.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"></see>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is raised.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.OnSeriesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [segments changed].
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.OnAxeschanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.InvalidateChildrenVisibility">
            <summary>
            Invalidates the children visibility.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.IsSegmentVisible(Syncfusion.Windows.Chart.ChartSegment)">
            <summary>
            Determines whether segment is visible on area.
            </summary>
            <param name="segment">The segment.</param>
            <returns>
              <c>true</c> if segment is  visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.CreateTransformer(System.Windows.Rect)">
            <summary>
            Creates the transformer.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>The Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.AddSegment(System.Int32,Syncfusion.Windows.Chart.ChartSegment)">
            <summary>
            Adds the container.
            </summary>
            <param name="index">The index.</param>
            <param name="segment">The segment.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeriesPresenter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.RemoveSegment(System.Object)">
            <summary>
            Removes the container.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.ResetSegments">
            <summary>
            Resets the segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.ClearSegments">
            <summary>
            Clears the segments.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeriesPresenter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Charts the segments changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.OnVisibleRangeChanged(System.Object,System.EventArgs)">
            <summary>
            Called when visible range is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.TotalSize">
            <summary>
            Gets the Total size of Chart series render.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.VisualChildrenCount">
            <summary>
            Gets or sets the VisualChildrenCount
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesPresenter.IndicatorPresenter">
            <summary>
            Class implementation for IndicatorPresenter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.IndicatorPresenter.m_indicator">
            <summary>
            Initializes m_segment
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.IndicatorPresenter.#ctor(Syncfusion.Windows.Chart.ChartTechnicalIndicator)">
            <summary>
            Called when instance created for Indicatorpresenter
            </summary>
            <param name="indicator"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.IndicatorPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.IndicatorPresenter.Indicator">
            <summary>
            Gets the segment.
            </summary>
            <value>The segment.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentPresenter">
            <summary>
            Represents ChartSegmentPresenter class
            </summary>
            <example>
            The below given code illustrates how Chartsegment could be selected when the
            user mouse downs on a data point segment.
            <code language="C#">
            private void Canvas_MouseDown(object sender, MouseButtonEventArgs e)
            {
                // Get the corresponding ChartSegment
                ChartSegment seg =
            ((ChartSeriesPresenter.ChartSegmentPresenter)(((Canvas)sender).TemplatedParent)).Segment;
                // Get the corresponding bound CollectionView
                CollectionView cv = seg.Series.DataSource as CollectionView;
                // Set the CurrentItem in the CollectionView
                cv.MoveCurrentToPosition(seg.CorrespondingPoints[0].Index);
            }
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentPresenter.m_segment">
            <summary>
            Initializes m_segment
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentPresenter.#ctor(Syncfusion.Windows.Chart.ChartSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentPresenter"/> class.
            </summary>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentPresenter.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesPresenter.ChartSegmentPresenter.Segment">
            <summary>
            Gets the segment.
            </summary>
            <value>The segment.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCartesianAxisElement">
            <summary>
            This element renders the axis line and ticks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.AxisProperty">
            <summary>
            Identifies the Axis dependency property.
            </summary>
            <summary>
            Using a DependencyProperty as the backing store for Axis. This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.LineStrokeProperty">
            <summary>
            Identifies the LineStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.TickSizeProperty">
            <summary>
            Identifies the TickSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.LabelsProperty">
            <summary>
            Identifies the Labels dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.CapsProperty">
            <summary>
            Identifies the Caps dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisElement.CapsSizeProperty">
            <summary>
            Identifies the CapsSize dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisElement.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisElement.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisElement.OnLabelsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when labels is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisElement.OnLabelsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when labels is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisElement.DrawAxisLine(System.Windows.Media.DrawingContext,System.Windows.Media.Pen,System.Windows.Point,System.Windows.Point,Syncfusion.Windows.Chart.ChartAxisCap,System.Windows.Size,System.Windows.Size)">
            <summary>
            Draws the axis line.
            </summary>
            <param name="context">The context.</param>
            <param name="pen">The pen value.</param>
            <param name="point1">The starting point.</param>
            <param name="point2">The point2.</param>
            <param name="caps">The caps value.</param>
            <param name="startArrowOffset">The start arrow offset.</param>
            <param name="endArrowOffset">The end arrow offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.Axis">
            <summary>
            Gets or sets the axis. This is a dependency property.
            </summary>
            <value>The axis value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.Orientation">
            <summary>
            Gets or sets the orientation. This is a dependency property.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.Labels">
            <summary>
            Gets or sets the labels. This is a dependency property.
            </summary>
            <value>The labels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.LineStroke">
            <summary>
            Gets or sets the line stroke. This is a dependency property.
            </summary>
            <value>The line stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.TickSize">
            <summary>
            Gets or sets the size of the tick. This is a dependency property.
            </summary>
            <value>The size of the tick.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.Caps">
            <summary>
            Gets or sets the axis caps. This is a dependency property.
            </summary>
            <value>The axis caps.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisElement.CapsSize">
            <summary>
            Gets or sets the size of the caps. This is a dependency property.
            </summary>
            <value>The size of the caps.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCartesianAxisPanel">
            <summary>
            Represents cartesian coordinate system axis.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.AxisProperty">
            <summary>
            Identifies the Axis dependency property.
            </summary>
            <summary>
            Using a DependencyProperty as the backing store for Axis. This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.OpposedPositionProperty">
            <summary>
            Identifies the OpposedPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.ValueTypeProperty">
            <summary>
            Identifies the ValueType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.HeaderPositionProperty">
            <summary>
            Identifies the HeaderPosition dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartCartesianAxisPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.OnOpposedPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when opposed position property changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.Orientation">
            <summary>
            Gets or sets the panel orientation. This is a dependency property.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.ValueType">
            <summary>
            Gets or sets the type of the value that chart axis displays. This is a dependency property.
            </summary>
            <value>The type of the value.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartValueType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.OpposedPosition">
            <summary>
            Gets or sets a value indicating whether panel has opposed position. This is a dependency property.
            </summary>
            <value><c>true</c> if panel has opposed position; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.HeaderPosition">
            <summary>
            Gets or sets the axis header position. This is a dependency property.
            </summary>
            <value>the AxisHeaderPostion. either <c>Far</c> or <c>Near</c>. <c>Far</c> is a default value. </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisPanel.Axis">
            <summary>
            Gets or sets the axis. This is a dependency property.
            </summary>
            <value>The axis value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPolarAreaGrid">
            <summary>
            Represents the ChartPolarAreaGrid
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAreaGrid.XAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAreaGrid.YAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for YAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAreaGrid.BackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for Background.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAreaGrid.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAreaGrid.OnAxeschanged(System.Object,System.EventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAreaGrid.OnAxeschanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarAreaGrid.XAxis">
            <summary>
            Gets or sets the secondary axis.
            </summary>
            <value>The secondary axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarAreaGrid.YAxis">
            <summary>
            Gets or sets the primary axis.
            </summary>
            <value>The primary axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarAreaGrid.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>The background.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel">
            <summary>
            Represents ChartPolarAxisLabelsPanel class
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.m_maxLabelsSize">
            <summary>
            Declares m_maxLabelsSize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.AxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for Axis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.PositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for Position.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.RadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for Radius.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.CenterProperty">
            <summary>
            Using a DependencyProperty as the backing store for Center.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.DoLayout(System.Windows.Size)">
            <summary>
            Does the layout.
            </summary>
            <param name="size">The size value.</param>
            <returns>Returns the size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.OnAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Called when axis is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.OnAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axis is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.Axis">
            <summary>
            Gets or sets the axis.
            </summary>
            <value>The axis value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarAxisLabelsPanel.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPolarPanel">
            <summary>
            Represents ChartPolarPanel class
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarPanel.m_polarAxisElement">
            <summary>
            Initializes m_polarAxisElement
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarPanel.m_cartesianAxisElement">
            <summary>
            Initializes m_cartesianAxisElement
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarPanel.AxesThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for AxesThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarPanel.RadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for Radius.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarPanel.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"></see>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is raised.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPolarPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarPanel.PolarAxis">
            <summary>
            Gets or sets the polar axis.
            </summary>
            <value>The polar axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarPanel.CartesianAxis">
            <summary>
            Gets or sets the Cartesian axis.
            </summary>
            <value>The Cartesian axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarPanel.AxesThickness">
            <summary>
            Gets or sets the axes thickness.
            </summary>
            <value>The axes thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarPanel.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPolarPanel.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastLineSegment">
            <summary>
            Class represents FastLine chart type series' segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastLineSegment.PointsProperty">
            <summary>
            Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastLineSegment.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFastLineSegment.m_vpts1">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartFastLineSegment"/> class.
            </summary>
            <remarks>
            During initialization the default template for Fast line segment is being created.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.#ctor(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFastLineSegment"/> class.
            </summary>
            <param name="points">The points array.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.#ctor(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartIndexedDataPoint[],Syncfusion.Windows.Chart.ChartSeries,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartFastLineSegment"/> class.
            </summary>
            <param name="points">The points array.</param>
            <param name="correspondingPoints">The corresponding points.</param>
            <param name="series">The <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.</param>
            <param name="dataptr">The <see/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.CheckForNewRange(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.GetSegmet(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="series"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.SetPointsForAllSeries(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.SetPointToNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.UpdateSegment(System.Collections.Generic.List{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="series"></param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartFastHiLoOpenCloseSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.Update(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary>
            Updates the real coordinates of segment with respect to chart type.
            </summary>
            <param name="transformer">The transformer</param>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartFastLineSegment"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.Draw3DSegment(Syncfusion.Windows.Chart.IChartTransformer)">
            <summary
            >
            Draws the 3D segment.
            </summary>
            <param name="transformer">The Transformer</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.GetCrossPoint(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Gets the cross point.
            </summary>
            <param name="p11">The P11 value.</param>
            <param name="p12">The P12. value.</param>
            <param name="p21">The P21 value.</param>
            <param name="p22">The P22 value.</param>
            <returns>The cross point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineSegment.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastLineSegment.Points">
            <summary>
            Gets or sets the points collection.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFastLineType">
            <summary>
            Represents ChartFastLineType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFastLineType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineType.CalculateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartFastLineType.UpdateSegments(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartIndexedDataPoint[])">
            <summary>
            Calculates the segments.
            </summary>
            <param name="series">The series.</param>
            <param name="points">The points.</param>
             <seealso>
                 <cref>ChartFastHiLoLineSegment</cref>
             </seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartFastLineType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastLinePresenter">
            <summary>
            Class implementation for FastLinePresenter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastLinePresenter.PointsProperty">
            <summary>
             Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.FastLinePresenter.SeriesProperty">
            <summary>
             Identifies the Series  dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastLinePresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastLinePresenter.Points">
            <summary>
            Get or Set Points property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastLinePresenter.Series">
            <summary>
            Get or Set Series property 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPrintButton">
            <summary>
            Represents ChartPrintButton
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintButton.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartPrintButton"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPrintingAdorner">
            <summary>
            Represents ChartPrintingAdorner class. Used as adorner for Chart printing
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.C_thumbSize">
            <summary>
            Initializes c_thumbSize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_targetElement">
            <summary>
            Initializes m_targetElement
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_elements">
            <summary>
            Initializes m_elements
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_lastMousePos">
            <summary>
            Initializes m_lastMousePos
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_leftcoefficient">
            <summary>
            Initializes m_leftcoefficient
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_topcoefficient">
            <summary>
            Initializes m_topcoefficient
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_rightcoefficient">
            <summary>
            Initializes m_rightcoefficient
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_bottomcoefficient">
            <summary>
            Initializes m_bottomcoefficient
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_thumbTopLeft">
            <summary>
            Initializes m_thumbTopLeft
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_thumbTopRight">
            <summary>
            Initializes m_thumbTopRight
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_thumbBottomLeft">
            <summary>
            Initializes m_thumbBottomLeft
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_thumbBottomRight">
            <summary>
            Initializes m_thumbBottomRight
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_rectangle">
            <summary>
            Initializes m_rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintingAdorner.m_buttonPrint">
            <summary>
            Initializes m_buttonPrint
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPrintingAdorner"/> class.
            </summary>
            <param name="adorningTarget">The AdorningTarget.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.GetVisualChild(System.Int32)">
            <summary>
            The GetVisualChild method
            </summary>
            <param name="index">The index value</param>
            <returns>Returns the visual element</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.CreateThumb(System.Windows.Input.Cursor)">
            <summary>
            Creates the thumb.
            </summary>
            <param name="cursor">The cursor.</param>
            <returns>Returns the Thumb</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnRectangleMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Raised On RectangleMouseMove
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The MouseEvent Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnRectangleMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raised On RectangleMouseUp
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The MouseButtonEvent Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnRectangleMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raised On RectangleMouseDown
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The MouseButtonEvent Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnThumbBottomRightDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Called when the bottom right thumb drag delta changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnThumbBottomLeftDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Called when [thumb bottom left drag delta].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnThumbTopRightDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Called when [thumb top right drag delta].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnThumbTopLeftDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Called when [thumb top left drag delta].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.Primitives.DragDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintingAdorner.OnButtonPrintClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [button print click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPrintingAdorner.SelectedPrintingArea">
            <summary>
            Gets the SelectedPrintingArea
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPrintingAdorner.PrintButton">
            <summary>
            Gets the print button.
            </summary>
            <value>The print button.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPrintingAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesComparerByY">
            <summary>
            Represents chart series comparer.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesComparerByY.Compare(Syncfusion.Windows.Chart.ChartSeries,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Compares the specified s1 with the specified s2.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Zero if ranges of x == y;
            <para/>
            -1 if ranges of x &lt; y;
            <para/>
            1 if ranges of x &gt; y;
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartIndexedDataPointByXComparer">
            <summary>
            Class that provides comparison abilities for indexed data points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartIndexedDataPointByXComparer.diff">
            <summary>
            Initializes diff
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartIndexedDataPointByXComparer.Compare(Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint)">
            <summary>
            Compares the specified p1 with the specified p2.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>
            negative value if point1 &lt; point2
            <para>
            zero if point1 = point2.
            </para>
            <para>
            positive value if point1 &gt; point2
            </para>
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDoubleComparer">
            <summary>
            Represents ChartDoubleComparer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDoubleComparer.m_inversed">
            <summary>
            Initializes m_inversed
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoubleComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartDoubleComparer"/> class.
            </summary>
            <param name="inversed">if set to <c>true</c> comparing is inversed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDoubleComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y.Zero x equals y.Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnnotationsCollection">
            <summary>
            Represents AnnotationsCollection. Annotations at specific X-Y coordinates can be added to the chart programmatically.
            </summary>
            <example>
            XAML:
            <code language="XAML">
             &lt;sfchart:ChartSeries Name="series1" Label="Series1" Type="Area"
            Interior="LightSkyBlue"&gt;
            &lt;sfchart:ChartSeries.Annotations&gt;
            &lt;sfchart:AnnotationsCollection LineColor="White" x:Uid="Annot"&gt;
                        &lt;!-- Here we define the look and feel of the annotation. --&gt;
                         &lt;sfchart:AnnotationsCollection.AnnotationsTemplate&gt;
                             &lt;DataTemplate&gt;
                                 &lt;Button Content="{Binding Y}" ToolTip="{Binding
            Description}" Background="LightGray" Name="Button1" Click="Button_Click" /&gt;
                             &lt;/DataTemplate&gt;
                         &lt;/sfchart:AnnotationsCollection.AnnotationsTemplate&gt;
                     &lt;/sfchart:AnnotationsCollection&gt;
                    &lt;!-- The annotations are added to this collection in code-behind --&gt;
                 &lt;/sfchart:ChartSeries.Annotations&gt;
             &lt;/sfchart:ChartSeries&gt;
            </code>
            C#:
            <code language="C#">
            // Series1 annotations
            ChartSeriesAnnotation ser1LowPoint = new ChartSeriesAnnotation() { X = 1, Y =
            20, Description = "Series 1 Low Point" }; 
            ChartSeriesAnnotation ser1HighPoint = new ChartSeriesAnnotation() { X = 7, Y =
            56, Description = "Series 1 High Point" }; 
            this.Chart1.Areas[0].Series[0].Annotations.Items.Add(ser1LowPoint); 
            this.Chart1.Areas[0].Series[0].Annotations.Items.Add(ser1HighPoint);
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabel"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationsCollection.m_annotationsCollection">
            <summary>
            Declares m_annotationsCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationsCollection.AnnotationsTemplateProperty">
            <summary>
            Identifies the AnnotationsTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationsCollection.LineColorProperty">
            <summary>       
            Identifies the LineColor dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationsCollection.IsRelativeProperty">
            <summary>
            Identifies the IsRelative dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnnotationsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.AnnotationsCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnnotationsCollection.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the property changed.
            </summary>    
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnnotationsCollection.IsRelative">
            <summary>
            Gets or sets a value indicating whether IsRelative value. This is a dependency property.
            </summary>
            <value>
            <c>true</c> if annotations should be placed relatively to axis units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnnotationsCollection.LineColor">
            <summary>
            Gets or sets the LineColor. This is a dependency property.
            </summary>
            <value>The LineColor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnnotationsCollection.AnnotationsTemplate">
            <summary>
            Gets or sets the AnnotationsTemplate. This is a dependency property.
            </summary>
            <value>The AnnotationsTemplate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnnotationsCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AnnotationsCollection.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.AnnotationsCollection.PropertyChanged">
            <summary>
            Initializes PropertyChanged
            </summary>    
        </member>
        <member name="T:Syncfusion.Windows.Chart.IndicatorCollection">
            <summary>
            Represents class implementation for IndicatorCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorCollection.m_IndicatorCollection">
            <summary>
            Declares m_annotationsCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorCollection.IndicatorTemplateProperty">
            <summary>
            Identifies the AnnotationsTemplate dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IndicatorCollection.#ctor">
            <summary>
            Called when instance created for IndicatorCollection Class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IndicatorCollection.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the property changed.
            </summary>    
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IndicatorCollection.IndicatorTemplate">
            <summary>
            Gets or sets the AnnotationsTemplate. This is a dependency property.
            </summary>
            <value>The AnnotationsTemplate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IndicatorCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IndicatorCollection.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.IndicatorCollection.PropertyChanged">
            <summary>
            Initializes PropertyChanged
            </summary>    
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStripLinesCollection">
            <summary>
            Represents the chart striplines collection.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxesCollection">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Chart.ChartAxis">chart axes</see> collection.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartToolBarCollection">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Chart.ChartToolBar"> ToolBar</see> collection.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartToolBar"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisLabelsCollection">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Chart.ChartAxis">chart axis</see> labels collection. 
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabelsCollection.InsertItem(System.Int32,Syncfusion.Windows.Chart.ChartAxisLabel)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabelsCollection.ClearItems">
            <summary>
            ChartAxisLabelsCollection Clear Items
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisLabelsCollection"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreasCollection">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Chart.ChartArea">chart areas</see> collection.  
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            <see cref="T:Syncfusion.Windows.Chart.Chart"/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreasCollection.C_emptyIndex">
            <summary>
            Initializes C_emptyIndex
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreasCollection.IndexOf(System.String)">
            <summary>
            Get index of <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> by name.
            </summary>
            <param name="name">Series name</param>
            <returns>Index of series in collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreasCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreasCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreasCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> with the specified name.
            </summary>
            <param name="name">The ChartArea aame</param>
            <returns>the index value</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLegendsCollection">
            <summary>
            Represents the <see cref="T:Syncfusion.Windows.Chart.ChartLegend">chart legends</see> collection. 
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLegend"/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendsCollection.C_emptyIndex">
            <summary>
            Initializes c_emptyIndex
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendsCollection.IndexOf(System.String)">
            <summary>
            Gets index of <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> by name.
            </summary>
            <param name="name">Legend's name.</param>
            <returns>Index of specified legend.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegendsCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> by name.
            </summary>
            <param name="name">Legend's name.</param>
            <returns><see cref="T:Syncfusion.Windows.Chart.ChartLegend"/>.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeriesCollection">
            <summary>
            Represents the collection of <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeriesCollection.C_emptyIndex">
            <summary>
            Initializes c_emptyIndex
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCollection.IndexOf(System.String)">
            <summary>
            Gets index of <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> by name.
            </summary>
            <param name="name">Name of series</param>
            <returns>Index of specified series.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCollection.AddRange(System.Collections.Generic.IEnumerable{Syncfusion.Windows.Chart.ChartSeries})">
            <summary>
            Adds range of <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> to collection.
            </summary>
            <param name="collection">The collection.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeriesCollection"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeriesCollection"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeriesCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeriesCollection.Item(System.String)">
            <summary>
            Gets <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> by the name.
            </summary>
            <param name="name">Name of series.</param>
            <returns>-1 if legend's name cannoot be retrieved, otherwise, instance of <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.VisibleSeriesCollection">
            <summary>
            Class represents collection that is used as wrapper for <see cref="P:Syncfusion.Windows.Chart.ChartArea.Series"/> 
            and contains currently visible series.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.VisibleSeriesCollection.m_series">
            <summary>
            Declares m_series
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.VisibleSeriesCollection.m_firstSeries">
            <summary>
            Declares m_firstSeries
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VisibleSeriesCollection.#ctor(Syncfusion.Windows.Chart.ChartSeriesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.VisibleSeriesCollection"/> class.
            </summary>
            <param name="wrappedSeriesCollection">The wrapped series collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VisibleSeriesCollection.Refresh">
            <summary>
            Refreshes Visible series.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VisibleSeriesCollection.SeriesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Series the collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VisibleSeriesCollection.IsVisible(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Determines whether the specified series is visible.
            </summary>
            <param name="series">The series.</param>
            <returns>
            <c>true</c> if the specified series is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAdornmentsCollection">
            <summary>
            Represents the Chart Adornments collection class
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornmentInfo"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationLabelsCollection">
            <summary>
            Represents Chart Annotation Labels collection class. Annotation labels are used to add custom labels on Chart
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabel"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TabItemCollection">
            <summary>
            Class implementation for TabItemCollection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TabItemCollection.#ctor">
            <summary>
            Constructor for TabItemCollection Class 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastSegmnetPropertiesCollection">
            <summary>
            Represents FastSegmnetPropertiesCollection implementation
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.InteractiveCursorCollection">
            <summary>
            Represents the InteractiveCursor Collection class
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornmentInfo"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SyncInteractiveCursorCollection">
            <summary>
            Represents SyncInteractiveCursor Collection class
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornmentInfo"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel">
            <summary>
            Represents layout panel for <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabel">chart axis labels</see>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.C_rowsCount">
            <summary>
            Initializes C_rowsCount
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.C_resizeAffect">
            <summary>
            Initializes C_resizeAffect
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.AxisProperty">
            <summary>
            Identifies the Axis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.LabelRotateAngleProperty">
            <summary>
            Identifies the LabelRotateAngle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.OpposedPositionProperty">
            <summary>
            Identifies the OpposedPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.LabelAlignmentProperty">
            <summary>
            Identifies the Label alignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.PositionProperty">
            <summary>
            Identifies the Position dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.IntersectActionProperty">
            <summary>
            Identifies the IntersectAction dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.HidePartialLabelProperty">
            <summary>
            Identifies the HidePartialLabel dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.EdgeLabelsDrawingModeProperty">
            <summary>
            Identifies the EdgeLabelsDrawingMode dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.GetPosition(System.Windows.DependencyObject)">
            <summary>
            Gets the position of passed object on panel.
            </summary>
            <param name="obj">The object.</param>
            <returns>Object's position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.SetPosition(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the position of passed object on panel.
            </summary>
            <param name="obj">The obj value.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.GetPosition(System.Windows.DependencyObject,System.Double)">
            <summary>
            Gets the position.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="length">The length.</param>
            <returns>The double position</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.OnAxisChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises AxisChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.DoLayout(System.Windows.Size,System.Boolean)">
            <summary>
            Does the layout of panel's items.
            </summary>
            <param name="size">The size value.</param>
            <param name="isMeasuring">if set to <c>true</c> [is measuring].</param>
            <returns>New element size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.OnAxisChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnAxisChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.GetContentSize(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the size of the content.
            </summary>
            <param name="element">The element.</param>
            <param name="axis"></param>
            <returns>Size of content.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.GetElementBounds(System.Windows.FrameworkElement,System.Windows.Point,Syncfusion.Windows.Chart.ChartAlignment,Syncfusion.Windows.Chart.ChartAlignment,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the element bounds.
            </summary>
            <param name="element">The element.</param>
            <param name="connectPoint">The connect point.</param>
            <param name="alignmentX">The alignment X.</param>
            <param name="alignmentY">The alignment Y.</param>
            <param name="axis"></param>
            <returns>Bounds of element.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.GetElementBounds(System.Windows.FrameworkElement,System.Windows.Point,Syncfusion.Windows.Chart.ChartAlignment,Syncfusion.Windows.Chart.ChartAlignment,System.Double,System.Double,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Gets the element bounds.
            </summary>
            <param name="element">The element.</param>
            <param name="connectPoint">The connect point.</param>
            <param name="alignmentX">The alignment X.</param>
            <param name="alignmentY">The alignment Y.</param>
            <param name="angle">The angle.</param>
            <param name="offsetLables"></param>
            <param name="axis"></param>
            <returns>Bounds of element.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.ArrangeElement(System.Windows.FrameworkElement,System.Windows.Rect,System.Double,System.Boolean,Syncfusion.Windows.Chart.EdgeLabelsDrawingMode,System.Windows.Size,Syncfusion.Windows.Chart.LabelPositions)">
            <summary>
            Arranges the element.
            </summary>
            <param name="element">The element.</param>
            <param name="bounds">The bounds.</param>
            <param name="angle">The angle.</param>
            <param name="partialHidingRequired">if set to <c>true</c> partial hiding is required.</param>
            <param name="drawingMode">The drawing mode.</param>
            <param name="parentSize">Size of the parent.</param>
            <param name="LabelPotition"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.GetLabelAlignment(System.Double,System.Windows.Controls.Orientation)">
            <summary>
            Gets the label alignment X.
            </summary>
            <param name="angle">The angle.</param>
            <param name="parentAxisOrientation">The Parent Axis orientation.</param>
            <returns>Returns the ChartAlignment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.AxisChanged">
            <summary>
            Event that is raised when Axis property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.EdgeLabelsDrawingMode">
            <summary>
            Gets or sets a value indicating mode that controls partially visible labels behaviour.
            </summary>
            <value><c>true</c> if partial labels should be hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.HidePartialLabel">
            <summary>
            Gets or sets a value indicating whether partial labels should be hidden.
            </summary>
            <value><c>true</c> if partial labels are hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.Axis">
            <summary>
            Gets or sets the value of the Axis. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.LabelRotateAngle">
            <summary>
            Gets or sets the labels rotate angle. This is a dependency property.
            </summary>
            <remarks>
            Property represents angle that labels on axis should be rotated by.
            </remarks>
            <value>The label rotate angle in degrees.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisLabel"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.LabelAlignment">
            <summary>
            Gets or sets the label alignment. This is a dependency property.
            </summary>
            <value>The label alignment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.Orientation">
            <summary>
            Gets or sets the orientation. This is a dependency property.
            </summary>
            <value>The labels panel orientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.OpposedPosition">
            <summary>
            Gets or sets a value indicating whether axis labels panel should be positioned opposed to to regular axis position.
            This is a dependency property.
            </summary>
            <value><c>true</c> if panel should be opposed positioned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAxisLabelsPanel.IntersectAction">
            <summary>
            Gets or sets type of action that should be taken to prevent labels intersection. This is a dependency property.
            </summary>
            <value>The intersect action.</value>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLabelIntersectAction"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCartesianPanel">
            <summary>
            Represents panel for cartesian coordinate system. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianPanel.C_axesLengthCoef">
            <summary>
            Initializes c_axesLengthCoef
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianPanel.m_axesThickness">
            <summary>
            Initializes m_axesThickness
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianPanel.AxesThicknessProperty">
            <summary>
            Identifies the AxesThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianPanel.HorizontalScrollBarHeightProperty">
            <summary>
            Identifies the HorizontalScrollBarHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianPanel.VerticalScrollBarWidthProperty">
            <summary>
            Identifies the VerticalScrollBarWidth dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Invoked when the <see cref="T:System.Windows.Media.VisualCollection"/> of a visual object is modified.
            </summary>
            <param name="visualAdded">The <see cref="T:System.Windows.Media.Visual"/> that was added to the collection.</param>
            <param name="visualRemoved">The <see cref="T:System.Windows.Media.Visual"/> that was removed from the collection.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCartesianPanel"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianPanel.OnChildAxisChanged(System.Object,System.EventArgs)">
            <summary>
            Called when child axis changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianPanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianPanel.HorizontalScrollBarHeight">
            <summary>
            Gets or sets the height of the horizontal scroll bar. This is a dependency property.
            </summary>
            <value>The height of the horizontal scroll bar.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianPanel.VerticalScrollBarWidth">
            <summary>
            Gets or sets the width of the vertical scroll bar. This is a dependency property.
            </summary>
            <value>The width of the vertical scroll bar.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianPanel.AxesThickness">
            <summary>
            Gets or sets the axes thickness. This is a dependency property.
            </summary>
            <value>The axes thickness.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCartesianAreaGrid">
            <summary>
            Renders the chart grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.XAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.YAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for YAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.BackgroundProperty">
            <summary>
            Using a DependencyProperty as the backing store for Background.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.AxesProperty">
            <summary>
            Using a DependencyProperty as the backing store for Axes.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.AlternatingLinesBrushProperty">
            <summary>
            DependencyProperty as the backing store for AlternatingLinesBrush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.FillRuleProperty">
            <summary>
            DependencyProperty as the backing store for FillMode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.AlternatingLinesDirectionProperty">
            <summary>
            DependencyProperty as the backing store for AlternatingLinesDirection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.DrawStripLines(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Draws the strip lines.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="clientRect">The client rect.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.DrawGridLines(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Draws the grid lines.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="clientRect">The client rect.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.OnAxeschanged(System.Object,System.EventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.OnAxeschanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when axes is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.AlternatingLinesDirection">
            <summary>
            Gets or sets alt. lines direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.FillRule">
            <summary>
            Gets or sets fill rule for alt. grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.AlternatingLinesBrush">
            <summary>
            Gets or sets AlternatingLinesBrush.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.Axes">
            <summary>
            Gets or sets the axes.
            </summary>
            <value>The axes value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCartesianAreaGrid.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>The background.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SharedResourceDictionary">
            <summary>
            The shared resource dictionary is a specialized resource dictionary
            that loads it content only once. If a second instance with the same source
            is created, it only merges the resources from the cache.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SharedResourceDictionary._sharedDictionaries">
            <summary>
            Internal cache of loaded dictionaries 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SharedResourceDictionary.#ctor">
            <summary>
            Called when instance created for SharedResourceDictionary
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SharedResourceDictionary._sourceUri">
            <summary>
            Local member of the source uri
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SharedResourceDictionary.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SharedResourceDictionary.SharedDictionaries">
            <summary>
            Returns internal cache of shared loaded dictionary
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SharedResourceDictionary.Source">
            <summary>
            Gets or sets the uniform resource identifier (URI) to load resources from.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxesStateToMarginConverter">
            <summary>
            Represents Axes State To Margin Converter.
            </summary>  
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxesStateToMarginConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.
            If the method returns null, the valid null value is used.
            A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.
            A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AxesStateToMarginConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxesStateToMarginConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AxesStateToMarginConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxesLeftMarginConverter">
             <summary>
            Return Thickness value fron the given value
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxesLeftMarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxesLeftMarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PanelConverter">
            <summary>
            return value for panel implementation
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PanelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.PanelConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PanelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.PanelConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ScrollBarVisibilityConverter">
            <summary>
            Return the bool value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ScrollBarVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ScrollBarVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ZoomableToCheckedConverter">
            <summary>
            Represents IsZoomable series to checked conntext menu items converters.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ZoomableToCheckedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ZoomableToCheckedConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ZoomableToCheckedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ZoomableToCheckedConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnnotationConverter">
            <summary>
            Return String value from the given Annotation Template objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnnotationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="values">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AnnotationConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnnotationConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AnnotationConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MarginMulConverter">
            <summary>
            Return thickness value from the given multiple objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MarginMulConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MarginMulConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param><param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPathsConverter">
            <summary>
            Represents chart control paths converter.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPathsConverter.C_pathGroup">
            <summary>
            Initializes c_pathGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPathsConverter.C_regex">
            <summary>
            Initializes c_regex
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPathsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPathsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPathsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPathsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ColorModelToPaletteConverter">
            <summary>
            Represents color converter class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorModelToPaletteConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ColorModelToPaletteConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorModelToPaletteConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ColorModelToPaletteConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDataMultibindingConverter">
            <summary>
            Converts datasource, x, y, multivalues to IChartData.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDataMultibindingConverter._mProvidedValue">
            <summary>
            Initializes m_providedValue
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataMultibindingConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataMultibindingConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ColumnMarginConverter">
            <summary>
            Convert x,y values to thickness
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColumnMarginConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColumnMarginConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param><param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MarginConverter">
            <summary>
            return Thickness  value from the given value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorSwitcher.System#Windows#Data#IMultiValueConverter#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="values">The value that the binding target produces.</param>
            <param name="targetType">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ColorSwitcher"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorSwitcher.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ColorSwitcher"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TemplateSwitcher">
            <summary>
            Represents TemplateSwitcher
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TemplateSwitcher.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.
            If the method returns null, the valid null value is used.
            A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.
            A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.TemplateSwitcher"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TemplateSwitcher.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.TemplateSwitcher"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxesConverter">
            <summary>
            Return AxesCollection from the given  Object
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxesConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxesConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param><param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AdornmentContentConverter">
            <summary>
            Represents AdornmentContentConverter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentContentConverter.m_cachedSeries">
            <summary>
            Initializes m_cachedSeries
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentContentConverter.m_sumValues">
            <summary>
            Initializes m_sumValues
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AdornmentContentConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.
            If the method returns null, the valid null value is used.
            A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.
            A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AdornmentContentConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AdornmentContentConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AdornmentContentConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnimationEnableEffectConverter">
            <summary>
            Return the double value for AnimationEffect
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnimationEnableEffectConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="values">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AnimationEnableEffectConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.EffectPathConverter">
            <summary>
            Use to determine the Effects layer path based on the Series type.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.EffectPathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Choose the external layer path based on the chart type.
            </summary>
            <param name="values">Binding value</param>
            <param name="targetType">target type</param>
            <param name="parameter">Converter parameter</param>
            <param name="culture">culture information</param>
            <returns>object value</returns>     
            <seealso cref="T:Syncfusion.Windows.Chart.EffectPathConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.EffectPathConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convertback to Normal value.
            </summary>
            <param name="value">value binding</param>
            <param name="targetType">target type</param>
            <param name="parameter">converter  parameter</param>
            <param name="culture">culture information</param>
            <returns>object value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.EffectPathConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Visibilityselector">
            <summary>
            Return visibility  value based on the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Visibilityselector.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Visibilityselector.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DebugErrorConverter">
            <summary>
            Return Double value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DebugErrorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DebugErrorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LineEffectsConverter">
            <summary>
            Use to determine the Visibility of Chart Series Line segement effects
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LineEffectsConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the bool type to Visibility and determine the last line segment visibility
            </summary>
            <param name="values">Binding value</param>
            <param name="targetType">target type</param>
            <param name="parameter">Converter parameter</param>
            <param name="culture">culture information</param>
            <returns>object value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.LineEffectsConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LineEffectsConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convertback to Normal value.
            </summary>
            <param name="value">value binding</param>
            <param name="targetTypes">target type</param>
            <param name="parameter">converter  parameter</param>
            <param name="culture">culture information</param>
            <returns>object value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.LineEffectsConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.EnableEffectsConverter">
            <summary>
            Use to determine the Visibility of Chart Series External Effects layer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.EnableEffectsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the bool type to Visibility
            </summary>
            <param name="values">Binding value</param>
            <param name="targetType">target type</param>
            <param name="parameter">Converter parameter</param>
            <param name="culture">culture information</param>
            <returns>object value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.EnableEffectsConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.EnableEffectsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convertback to Normal value.
            </summary>
            <param name="value">value binding</param>
            <param name="targetType">target type</param>
            <param name="parameter">converter  parameter</param>
            <param name="culture">culture information</param>     
            <returns>object value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.EnableEffectsConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisTypeConverter">
            <summary>
            Converts tick placement position according to the axis orientation
            and opposed position properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisTypeConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisTypeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisTypeConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisTypeConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LabelMarginConverter">
            <summary>
            Return Thickness value from given double value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LabelMarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LabelMarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisMarginConverter">
            <summary>
            Return double value from the given value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisMarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisMarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DoubleArrayConverter">
            <summary>
            Represents DoubleArrayConverter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleArrayConverter.m_doubleCollectionConverter">
            <summary>
            Initializes m_doubleCollectionConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleArrayConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartListDataConverter">
            <summary>
            Represents Chart List data Converter class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartListDataConverter.C_xGroup">
            <summary>
            Declares Constant C_xGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartListDataConverter.C_yGroup">
            <summary>
            Declares Constant C_yGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartListDataConverter.C_regexSplitter">
            <summary>
            Declares Constant C_regexSplitter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartListDataConverter.C_regex">
            <summary>
            Declares Constant C_regex
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListDataConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListDataConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListDataConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListDataConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartListDataConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListDataConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListDataConverter.ConvertData(System.Double[])">
            <summary>
            Method implementation for convert double values to string values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DisplayUnitConverter">
            <summary>
            return bool value 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DisplayUnitConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DisplayUnitConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DisplayUnitsConverter">
            <summary>
            return the object value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DisplayUnitsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DisplayUnitsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TitleToAlignmentConverter">
            <summary>
            Converter class used to convert combination of horizontal and vertical alignment to
            <see cref="T:Syncfusion.Windows.Chart.ChartAlignment"/> value.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TitleToAlignmentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.TitleToAlignmentConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TitleToAlignmentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.  
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.TitleToAlignmentConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisVisibilityConverter">
            <summary>
            Return Visibility value from the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AxisVisibilityConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.AxisVisibilityConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ShowSymbolConvertor">
            <summary>
            Represents ShowSymbolConvertor class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ShowSymbolConvertor.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ShowSymbolConvertor"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ShowSymbolConvertor.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ShowSymbolConvertor"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LegendIconInteriorConvertor">
            <summary>
            Class used to convert Interior of the LegendIcon
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LegendIconInteriorConvertor.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ShowSymbolConvertor"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LegendIconInteriorConvertor.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ShowSymbolConvertor"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.VisibilityConverter">
            <summary>
            Represents VisibilityConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.VisibilityConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.VisibilityConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ContentToVisibilityConverter">
            <summary>
            Represents ContentToVisibilityConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ContentToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ContentToVisibilityConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ContentToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            <seealso cref="T:Syncfusion.Windows.Chart.ContentToVisibilityConverter"/>
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ContentToVisibilityConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaCornerRadiusToThicknessConverter">
            <summary>
            Represents chart area corner radius to thickness converter.
            </summary>
            <remarks>
            This class should be used in chart templates to prevent chart's corners intersection with area.
            </remarks>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaCornerRadiusToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaCornerRadiusToThicknessConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaCornerRadiusToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaCornerRadiusToThicknessConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPaddingConverter">
            <summary>
            Return Thickness value based on given object values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPaddingConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPaddingConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param><param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ContentConverter">
            <summary>
            Return content value from the given value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ContentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ContentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ThicknessConverter">
            <summary>
            return the thickness value based on the given value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomingToolkit">
            <summary>
            Represents the zooming toolkit that is shown on <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> when
            <see cref="P:Syncfusion.Windows.Chart.ChartAreaCommands.SwitchZooming"/> command is executed.
            </summary>
            <remarks>
            In the Zooming mode, a Zooming toolkit is displayed at the top-left corner of
            the ChartArea. Using the buttons in the Zooming toolkit, ChartSeries can be
            zoomed in, out, reset or closed (to exit zoom mode).
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingToolkit"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomingToolkitVisibilityProperty">
            <summary>
            Identifies the ZoomingToolkitVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomInButtonVisibilityProperty">
            <summary>
            Identifies the ZoomInButtonVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomOutButtonVisibilityProperty">
            <summary>
            Identifies the ZoomOutButtonVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomCloseButtonVisibilityProperty">
            <summary>
            Identifies the ZoomCloseButtonVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomResetButtonVisibilityProperty">
            <summary>
            Identifies the ZoomResetButtonVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomPanningButtonVisibilityProperty">
            <summary>
            Identifies the ZoomPanningButtonVisibility dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomInIconTemplateProperty">
            <summary>
            Identifies the ZoomInIconTemplate dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomOutIconTemplateProperty">
            <summary>
            Identifies the ZoomOutIconTemplate dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomCloseIconTemplateProperty">
            <summary>
            Identifies the ZoomCloseIconTemplate dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomResetIconTemplateProperty">
            <summary>
            Identifies the ZoomResetIconTemplate dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ZoomPanningIconTemplateProperty">
            <summary>
            Identifies the ZoomPannaingIconTemplate dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.OwnerProperty">
            <summary>
            Identifies the Owner dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingToolkit.ParentProperty">
            <summary>
            Identifies the Parent dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartZoomingToolkit"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.#ctor(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartZoomingToolkit"/> class.
            </summary>
            <param name="area">The area value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomResetButtonVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomResetButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Visibility value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomResetButtonVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the value of the ZoomResetButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Visibility value</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingToolkit"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomPanningButtonVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomPanningButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Visibility value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomPanningButtonVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the value of the ZoomPanningButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Visibility value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomCloseButtonVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomCloseButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Visibility value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomCloseButtonVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the value of the ZoomCloseButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Visibility value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomOutButtonVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomOutButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Visibility value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomOutButtonVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the value of the ZoomOutButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Visibility value</param>
            <seealso>
                <cref>ChartZoomingToolKit</cref>
            </seealso>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomingToolkitVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomingToolkitVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Visibility value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomingToolkitVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the value of the ZoomingToolkitVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Visibility value</param>
            <seealso>
                <cref>ChartZoomingToolKit</cref>
            </seealso>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomInButtonVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomInButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Visibility value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomInButtonVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the value of the ZoomInButtonVisibility attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Visibility value</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingAdorner"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomInIconTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomInIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Icon Template</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomInIconTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the ZoomInIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Data Template value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomOutIconTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomOutIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Icon Template</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomOutIconTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the ZoomOutIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Data Template value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomCloseIconTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomCloseIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Icon Template</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomCloseIconTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the ZoomCloseIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Data Template value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomResetIconTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomResetIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Icon Template</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomResetIconTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the ZoomResetIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Data Template value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.GetZoomPanningIconTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the ZoomPanningIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <returns>Returns the Icon Template</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingToolkit.SetZoomPanningIconTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets the value of the ZoomPanningIconTemplate attached dependency property.
            </summary>
            <param name="obj">The DependencyObject obj</param>
            <param name="value">The Data Template value</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingToolkit.Owner">
            <summary>
            Gets or sets owning <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingToolkit.Parent">
            <summary>
            Get and Set ParentProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar">
            <summary>
            Represents chart zooming scrollbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.m_scrollBar">
            <summary>
            Initializes m_scrollBar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for ZoomFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for ZoomPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.IsInversedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsInversed.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.OrientationProperty">
            <summary>
            Using a DependencyProperty as the backing store for Orientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomSwitchedProperty">
            <summary>
            Using a DependencyProperty as the backing store for ZoomSwitched.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.HorizontalBarLargeChangeProperty">
            <summary>
             Identifies the HorizontalBarLargeChange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.HorizontalBarSmallChangeProperty">
            <summary>
            Identifies the HorizontalBarSmallChange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.VerticalBarLargeChangeProperty">
            <summary>
             Identifies the VerticalBarLargeChange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.VerticalBarSmallChangeProperty">
            <summary>
             Identifies the VerticalBarSmallChange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.VerticalBarVisibilityProperty">
            <summary>
            Identifies the VerticalBarVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.HorizontalBarVisibilityProperty">
            <summary>
             Identifies the HorizontalBarVisibility dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.GetHorizontalBarLargeChange(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Return HorizontalBarLargeChange value from the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.SetHorizontalBarLargeChange(Syncfusion.Windows.Chart.ChartArea,System.Double)">
            <summary>
            Set HorizontalBarLargeChangevalue from the given value
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.GetHorizontalBarSmallChange(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            return HorizontalBarSmallChange value from the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.SetHorizontalBarSmallChange(Syncfusion.Windows.Chart.ChartArea,System.Double)">
            <summary>
            Set the HorizontalBarSmallChange value from the given double value
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.GetVerticalBarLargeChange(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Return VerticalBarLargeChange value from given value
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.SetVerticalBarLargeChange(Syncfusion.Windows.Chart.ChartArea,System.Double)">
            <summary>
            Set VerticalBarLargeChange value to the corresponding given area from the given double value
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.GetVerticalBarSmallChange(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Return VerticalBarSmallChange value from the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.SetVerticalBarSmallChange(Syncfusion.Windows.Chart.ChartArea,System.Double)">
            <summary>
            Set the VerticalBarSmallChange value to the corresponding given area from the given double value.
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.GetHorizontalBarVisibility(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Return HorizontalBarVisibility value from the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.SetHorizontalBarVisibility(Syncfusion.Windows.Chart.ChartArea,System.Windows.Visibility)">
            <summary>
            Set HorizontalBarVisibility value to the corresponding given area from the given value.
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.GetVerticalBarVisibility(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Return VerticalBarVisibility value from the given area
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.SetVerticalBarVisibility(Syncfusion.Windows.Chart.ChartArea,System.Windows.Visibility)">
            <summary>
            Set the VerticalBarVisibility value to the corresponding given area from the given value
            </summary>
            <param name="area"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"></see>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.OnZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when zoom factor is changed.
            </summary>
            <param name="dObj">The d obj.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomSwitched">
            <summary>
            Gets or sets a value indicating whether zoom is switched.
            </summary>
            <value><c>true</c> if zoom is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactor">
            <summary>
            Gets or sets the zoom factor.
            </summary>
            <value>The zoom factor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPosition">
            <summary>
            Gets or sets the zoom position.
            </summary>
            <value>The zoom position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingScrollBar.IsInversed">
            <summary>
            Gets or sets a value indicating whether this instance is inversed.
            </summary>
            <value>
             <c>true</c> if this instance is inversed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingScrollBar.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToViewportSizeConverter">
            <summary>
            Represents ZoomFactorToViewportSizeConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToViewportSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToViewportSizeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToViewportSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToViewportSizeConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToVisibilityConverter">
            <summary>
            Represents ZoomFactorToVisibilityConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.
            If the method returns null, the valid null value is used.
            A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.
            A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToVisibilityConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToVisibilityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomFactorToVisibilityConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter">
            <summary>
            Represents ZoomPositionToValueConverter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter.m_zoomingScrollBar">
            <summary>
            Initializes m_zoomingScrollBar
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter.#ctor(Syncfusion.Windows.Chart.ChartZoomingScrollBar)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter"/> class.
            </summary>
            <param name="zoomingScrollBar">The zooming scroll bar.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartZoomingScrollBar.ZoomPositionToValueConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomingAdorner">
            <summary>
            Represents chart zooming adorner class that provides selecting operation in zooming mode.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_chartArea">
            <summary>
            Initializes m_chartArea
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_canvas">
            <summary>
            Initializes m_canvas
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_zoomRectangle">
            <summary>
            Initializes m_zoomRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_zoomingToolBar">
            <summary>
            Initializes m_zoomingToolBar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_elements">
            <summary>
            Initializes m_elements
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_startZoomBarPoint">
            <summary>
            Initializes m_startZoomBarPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_endZoomBarPoint">
            <summary>
            Initializes m_endZoomBarPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartZoomingAdorner.m_isZooming">
            <summary>
            Initializes m_isZooming
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.#ctor(Syncfusion.Windows.Chart.ChartArea,System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartZoomingAdorner"/> class.
            </summary>
            <param name="area">The area value.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"></see>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is raised.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.OnChartAreaMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs On ChartAreaMouseDown
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The MouseButtonEvent Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.OnChartAreaMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Occurs on ChartAreaMouseMove
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The MouseEvent Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomingAdorner.OnChartAreaMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Occurs on ChartAreaMouseUp
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The MouseButtonEvent Arguments e</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomingAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAdornmentInfo">
            <summary>
            Represents adornments class configuration.
            </summary>
            <permission cref="T:System.Security.PermissionSet">
            Public Access
            </permission>
            <remarks>
            Chart adornments are used to show additional information about displaying series.
            </remarks>
             <example>
            XAML:
            <code language="XAML">
            &lt;!--Chart with Adornments--&gt;
              &lt;sfchart:Chart&gt;
                        &lt;sfchart:ChartArea Background="LightGray" GridBackground="White"&gt;  
                            &lt;sfchart:ChartSeries Type="Column" &gt;
                           &lt;sfchart:ChartSeries.AdornmentsInfo&gt;
                                    &lt;sfchart:ChartAdornmentInfo 
            LabelContentPath="DataPoint.X" Visible="True"  /&gt;
                                &lt;/sfchart:ChartSeries.AdornmentsInfo&gt;
                            &lt;/sfchart:ChartSeries&gt;       
                        &lt;/sfchart:ChartArea&gt;           
                    &lt;/sfchart:Chart&gt;
            </code>
            C#:
            <code language="C#">
            ChartSeries series = Chart1.Areas[0].Series[0];      
            ChartAdornmentInfo adornments = series.AdornmentsInfo;
            adornments.LabelContentPath = "DataPoint.X";
            adornments.Visible = true;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.VisibleProperty">
            <summary>
            Identifies the Visible dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.LabelTemplateProperty">
            <summary>
            Identifies the LabelTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolTemplateProperty">
            <summary>
            Identifies the SymbolTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.VerticalAlignmentProperty">
            <summary>
            Identifies the VerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.HorizontalAlignmentProperty">
            <summary>
            Identifies the Horizontalalignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentsPositionProperty">
            <summary>
            Identifies the AdornmentsPosition dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.LabelContentPathProperty">
            <summary>
            Identifies the LabelContentPath dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.ConnectorTemplateProperty">
            <summary>
            Identifies the ConnectorTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFormatProperty">
            <summary>
            Identifies the SegmentLabelFormat dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFontFamilyProperty">
            <summary>
            Identifies the SegmentLabelFontFamily dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFontSizeProperty">
            <summary>
            Identifies the SegmentLabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFontWeightProperty">
            <summary>
            Identifies the SegmentLabelFontWeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentMarginProperty">
            <summary>
            Identifies the AdornmentMargin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentWrappingProperty">
            <summary>
            Identifies the AdornmentWrapping dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentFontStretchProperty">
            <summary>
            Identifies the AdornmentFontStrech dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentForegroundProperty">
            <summary>
            Identifies the AdornmentForeground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelRotationProperty">
            <summary>
            Identifies the SegmentLabelRotation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelDataTimeFormatProperty">
            <summary>
            Identifies the SegmentLabelDataTimeFormat dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelContentProperty">
            <summary>
            Identifies the SegmentLabelContent dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentHorizontalAlignmentProperty">
            <summary>
            Identifies the SegmentHorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentVerticalAlignmentProperty">
            <summary>
            Identifies the SegmentVerticalAlignmen dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentShowLineProperty">
            <summary>
            Identifies the SegmentShowLine dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentIsOutProperty">
            <summary>
            Identifies the SegmentIsOut dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolProperty">
            <summary>
            Identifies the Symbol dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolInteriorProperty">
            <summary>
            Identifies the SymbolInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolStrokeProperty">
            <summary>
            Identifies the SymbolStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolStrokeThicknessProperty">
            <summary>
            Identifies the SymbolHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolHeightProperty">
            <summary>
            Identifies the SymbolHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolWidthProperty">
            <summary>
            Identifies the SymbolWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.IsSegmentAlignmentProperty">
            <summary>
             Identifies the IsSegmentAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.IsLabelRotateProperty">
            <summary>
             Identifies the IsLabelRotate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.OffsetXProperty">
            <summary>
             Identifies the OffsetX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.OffsetYProperty">
            <summary>
             Identifies the OffsetY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAdornmentInfo.LineTemplateProperty">
            <summary>
             Identifies the LineTemplate dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentInfo.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"/> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentInfo.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentInfo.Serialize">
            <summary>
            Return the Xaml String
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAdornmentInfo.Deserialize(System.String)">
            <summary>
            Return the object from the String value.
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.ConnectorTemplate">
            <summary>
            Gets or sets the connector template. This is a dependency property.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Windows.Chart.ChartAdornmentInfo"/> provides flexible way to customize adornment's
            look. Represents line that connects <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/> with
            corresponding adorner.
            </remarks>
            <value>
            The connector template.
            </value>
            <example>
            C#: <code language="C#">
            This property is not intended to be used from C#.
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo.ConnectorTemplate&gt;
            &lt;DataTemplate&gt;
            &lt;Line X1="0" X2="10" Y1="0" Y2="0" Stroke="Black"/&gt;
            &lt;/DataTemplate&gt;
            &lt;/syncfusion:ChartAdornmentInfo.ConnectorTemplate&gt;
            &lt;/syncfusion:ChartAdornmentInfo&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.LineTemplate">
            <summary>
            Get and Set the LineTemplate property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.IsSegmentAlignment">
            <summary>
            Get and Set the IsSegmentAlignment Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.IsLabelRotate">
            <summary>
            Get and Set the IsLabelRotateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.OffsetX">
            <summary>
            Get and Set the OffsetXProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.OffsetY">
            <summary>
            Get and Set the OffsetYProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFormat">
            <summary>
            Gets or sets the segment label format.
            </summary>
            <remarks>
            Represents format string that should be used to represent numerical data in
            adorner.
            </remarks>
            <value>
            The segment label format.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label format for series' adorner.
            series.AdornmentsInfo.SegmentLabelFormat = "0.00";
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelFormat="0.00"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelDataTimeFormat">
            <summary>
            Gets or sets the segment label data time format.
            </summary>
            <remarks>
            Represents format string that should be used to represent date or time in
            adorner.
            </remarks>
            <value>
            The segment label data time format.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label date-time format for series' adorner.
            series.AdornmentsInfo.SegmentLabelDataTimeFormat = "mm/dd/yy";
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelDataTimeFormat="mm/dd/yy"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFontFamily">
            <summary>
            Gets or sets the segment label font family.
            </summary>
            <remarks>
            Identifies font family that should be used to display adornment's text.
            </remarks>
            <value>
            The segment label font family.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Creating font family converter.
            FontFamilyConverter fontConverter = new FontFamilyConverter();
            //Setting Segment label font family for series' adorner.
            series.AdornmentsInfo.SegmentLabelFontFamily =
            (FontFamily)fontConverter.ConvertFromString("Arial");
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelFontFamily="Arial"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFontSize">
            <summary>
            Gets or sets the size of the segment label font.
            </summary>
            <remarks>
            Represents size the adornment's label should have.
            </remarks>
            <value>
            The size of the segment label font.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label font size.
            series.AdornmentsInfo.SegmentLabelFontSize = "20";
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelFontSize="20"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelFontWeight">
            <summary>
            Gets or sets the segment label font weight.
            </summary>
            <remarks>
            Represents weight that adornment's font should have.
            </remarks>
            <value>
            The segment label font weight.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label font weight for series adorner's font.
            series.AdornmentsInfo.SegmentLabelFontWeight = FontWeights.Bold;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelFontWeight="Bold"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentForeground">
            <summary>
            Get and Set the AdornmentForegroundProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentMargin">
            <summary>
            Get and Set the AdornmentMarginProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentWrapping">
            <summary>
            Get and Set the AdornmentWrappingProperty 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentFontStretch">
            <summary>
            Get and Set the AdornmentFontStretchProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelRotation">
            <summary>
            Gets or sets the segment label rotation. This is a dependency property.
            </summary>
            <remarks>
            Segment's rotation angle can be set from 0 to 360 degrees.
            </remarks>
            <value>
            The segment label rotation.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label rotation angle to 45 degrees.
            series.AdornmentsInfo.SegmentLabelRotation = 45;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelRotation="45"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentLabelContent">
            <summary>
            Gets or sets the content of the segment label. This is a dependency property.
            </summary>
            <remarks>
            Label can display several types of content. Types for display can be found in
            <see cref="T:Syncfusion.Windows.Chart.LabelContent"/> enumeration.
            </remarks>
            <value>
            The <see cref="T:Syncfusion.Windows.Chart.LabelContent"/> of the segment label.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label content type.
            series.AdornmentsInfo.SegmentLabelContent = LabelContent.YofTot;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentLabelContent="YofTot"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentHorizontalAlignment">
            <summary>
            Gets or sets the segment horizontal alignment. This is dependency property.
            </summary>
            <remarks>
            Indicates where a label should be displayed horizontally relative to the
            segment.
            </remarks>
            <value>
            The segment horizontal alignment.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label content type.
            series.AdornmentsInfo.SegmentHorizontalAlignment = HorizontalAlignment.Center;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentHorizontalAlignment="Center"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentVerticalAlignment">
            <summary>
            Gets or sets the segment vertical alignment. This is dependency property.
            </summary>
            <remarks>
            Indicates where a label should be displayed vertically relative to the segment.
            </remarks>
            <value>
            The segment horizontal alignment.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label content type.
            series.AdornmentsInfo.SegmentVerticalAlignment = VerticalAlignment.Top;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentVerticalAlignment="Top"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentShowLine">
            <summary>
            Gets or sets a value indicating whether line that connects segment with label
            should be displayed.
            </summary>
            <remarks>
            When adorners are set to be displayed there is an ability to show the line that
            connects segment with adorner.
            </remarks>
            <value>
            <c>true</c> if segment shows the line; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment label line.
            series.AdornmentsInfo.SegmentShowLine = true;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentShowLine="True"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentIsOut">
            <summary>
            Gets or sets a value indicating whether segment is out.
            </summary>
            <remarks>
            Adorner can be either inside or outside of the segment. When Adorner is set to
            be outside - connecting line can be shown using <see cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SegmentShowLine"/>
            property.
            </remarks>
            <value>
            <c>true</c> if segment is out; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment out state.
            series.AdornmentsInfo.SegmentIsOut = true;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo SegmentIsOut="True"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <remarks>
            Per default template, adorner includes symbol and label. <see cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.VerticalAlignment"/> property is used to adjust symbol's alignment with
            respect to adornment's label. <seealso cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.HorizontalAlignment"/>
            </remarks>
            <value>
            The vertical alignment.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment out state.
            series.AdornmentsInfo.VerticalAlignment = VerticalAlignment.Bottom;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo VerticalAlignment="Bottom"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.HorizontalAlignment">HorizontalAlignment</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <remarks>
            Per default template, adorner includes symbol and label. <see cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.HorizontalAlignment"/> property is used to adjust symbol's alignment with
            respect to adornment's label.
            </remarks>
            <value>
            The vertical alignment.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment out state.
            series.AdornmentsInfo.HorizontalAlignment = HorizontalAlignment.Bottom;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo HorizontalAlignment="Bottom"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.VerticalAlignment">VerticalAlignment</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.LabelTemplate">
            <summary>
            Gets or sets the template. This is a dependency property.
            </summary>
            <remarks>
            Per default template, adorner includes symbol and label.
            property is used to set label's template.
            </remarks>
            <example>
            C#:
            <code language="C#">
            This property is intended to be used from XAML.
            </code>
            XAML*:
            <code language="XAML">
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
                &lt;syncfusion:ChartArea&gt;
                    &lt;syncfusion:ChartSeries Data="1 2 3 4 5 6"&gt;
                        &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
                            &lt;syncfusion:ChartAdornmentInfo
                                VerticalAlignment="Top"
                                Visible="True"
                                SegmentLabelContent="YofTot"&gt;
                                &lt;syncfusion:ChartAdornmentInfo.LabelTemplate&gt;
                                    &lt;DataTemplate&gt;
                                        &lt;Border   CornerRadius="1"
                                                  BorderBrush="Black"
                                                  Background="White"
                                                  BorderThickness="1"&gt;
                                        &lt;Label FontSize="20" Content="{Binding}"/&gt;
                                        &lt;/Border&gt;
                                    &lt;/DataTemplate&gt;
                                &lt;/syncfusion:ChartAdornmentInfo.LabelTemplate&gt;
                                &lt;syncfusion:ChartAdornmentInfo.SymbolTemplate&gt;
                                    &lt;DataTemplate&gt;
                                        &lt;Rectangle Stroke="Black" Fill="Red" Width="10" Height="10"/&gt;
                                    &lt;/DataTemplate&gt;
                                &lt;/syncfusion:ChartAdornmentInfo.SymbolTemplate&gt;
                            &lt;/syncfusion:ChartAdornmentInfo&gt;
                        &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
                    &lt;/syncfusion:ChartSeries&gt;
                &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            *Syncfusion WPF Chart libraries should be referenced in project in order to run code samples.
            </example>
            <value>The template.</value>
            <seealso cref="T:System.Windows.DataTemplate"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolTemplate">
            <summary>
            Gets or sets the symbol template. This is a dependency property.
            </summary>
            <remarks>
            Per default template, adorner includes symbol and label.
            property is used to set symbol's template.
            <seealso cref="T:System.Windows.DataTemplate"/>
            </remarks>
            <example>
            C#:
            <code language="C#">
            This property is intended to be used from XAML.
            </code>
            XAML:
            <code language="XAML">
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
                &lt;syncfusion:ChartArea&gt;
                    &lt;syncfusion:ChartSeries Data="1 2 3 4 5 6"&gt;
                        &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
                            &lt;syncfusion:ChartAdornmentInfo
                                VerticalAlignment="Top"
                                Visible="True"
                                SegmentLabelContent="YofTot"&gt;
                                &lt;syncfusion:ChartAdornmentInfo.LabelTemplate&gt;
                                    &lt;DataTemplate&gt;
                                        &lt;Border   CornerRadius="1"
                                                  BorderBrush="Black"
                                                  Background="White"
                                                  BorderThickness="1"&gt;
                                        &lt;Label FontSize="20" Content="{Binding}"/&gt;
                                        &lt;/Border&gt;
                                    &lt;/DataTemplate&gt;
                                &lt;/syncfusion:ChartAdornmentInfo.LabelTemplate&gt;
                                &lt;syncfusion:ChartAdornmentInfo.SymbolTemplate&gt;
                                    &lt;DataTemplate&gt;
                                        &lt;Rectangle Stroke="Black" Fill="Red" Width="10" Height="10"/&gt;
                                    &lt;/DataTemplate&gt;
                                &lt;/syncfusion:ChartAdornmentInfo.SymbolTemplate&gt;
                            &lt;/syncfusion:ChartAdornmentInfo&gt;
                        &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
                    &lt;/syncfusion:ChartSeries&gt;
                &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            *Syncfusion WPF Chart libraries should be referenced in project in order to run code samples.
            </example>
            <value>The symbol template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.LabelContentPath">
            <summary>
            Gets or sets the label content path. This is a dependency property.
            </summary>
            <remarks>
            Used to provide property name that should be used for representing label content.
            </remarks>
            <example>
            C#:
            <code>
            <para>
            This property is intended to be used from XAML.
            </para>
            </code>
            XAML:
            <code language="XAML">
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
              &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                &lt;syncfusion:ChartAxis LabelRotateAngle="45" LabelsSource="{StaticResource ChartDataSource}" PositionPath="ID" ContentPath="City"/&gt;
              &lt;/syncfusion:ChartArea.PrimaryAxis&gt;
              &lt;syncfusion:ChartSeries Type="Column" Data="{syncfusion:ChartBindingData Source={StaticResource ChartDataSource}, XPath=ID, YPaths=Population}"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
            <value>The label content path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.Visible">
            <summary>
            Gets or sets a value indicating whether label is visible.
            </summary>
            <example>
            C#:
            <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series.
            ChartSeries series = new ChartSeries();
            //Setting Segment out state.
            series.AdornmentsInfo.Visible = true;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code>
            XAML:
            <code language="XAML">
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
                &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
                    &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
                        &lt;syncfusion:ChartAdornmentInfo Visible="True"/&gt;
                    &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
                &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentsPosition">
            <summary>
            Gets or sets the adornments position.
            </summary>
            <value>The adornments position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolInterior">
            <summary>
            Gets or sets the symbol interior.
            </summary>
            <value>The symbol interior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolStroke">
            <summary>
            Gets or sets the symbol stroke.
            </summary>
            <value>The symbol stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the symbol.
            </summary>
            <value>The stroke thickness of the symbol.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolHeight">
            <summary>
            Gets or sets the height of the symbol.
            </summary>
            <value>The height of the symbol.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.SymbolWidth">
            <summary>
            Gets or sets the width of the symbol.
            </summary>
            <value>The width of the symbol.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAdornmentInfo.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartCommands">
            <summary>
            Represents commands that can be invoked on <see cref="T:Syncfusion.Windows.Chart.Chart"/>.
            </summary>
            <remarks>
            Commanding is an input mechanism in Windows Presentation Foundation 
            which provides input handling at a more semantic level than device input.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCommands.c_switchPrinting">
            <summary>
            Initializes c_switchPrinting RoutedUICommand
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCommands.c_addAnnotation">
            <summary>
            Initializes c_addAnnotation RoutedUICommand
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartCommands.c_propertiesDialogue">
            <summary>
            Initializes c_propertiesDialogue RoutedUICommand
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCommands.SwitchPrinting">
            <summary>
            Gets the switch printing.
            </summary>
            <value>The switch printing.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCommands.AddAnnotation">
            <summary>
            To add the Annotation.
            </summary>
            <value>The Add Annotation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartCommands.PropertiesDialogue">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties Dialogue.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Chart">
            <summary>
            Represents chart control.
            </summary>
            <remarks>
            A chart is a type of information graphic or graphic organizer that represents
            tabular numeric data and/or functions. Chart is often used to make it easier to
            understand large quantities of data and the relationship between different parts
            of the data. Char can usually be read more quickly than the raw data that they
            come from. <para> Certain <see cref="T:Syncfusion.Windows.Chart.ChartTypes"/> are more useful for
            presenting a given data set than others. For example, data that presents
            percentages in different groups (such as "satisfied, not satisfied, unsure") are
            often displayed in a <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Pie"/> chart, but are more easily
            understood when presented in a horizontal <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Bar"/> chart.
            On the other hand, data that represents numbers that change over a period of
            time (such as "annual revenue from 1990 to 2000") might be best shown as a <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Line"/> chart. </para>
            </remarks>
            <example>
            XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;!--Assigning chart area--&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;!--Adding series to area--&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;!--Assigning data property--&gt;
            &lt;syncfusion:ChartSeries Data="5 5 6 6 7 7"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code> C#: <code language="C#">
            public partial class Window1 : Window
            {
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            ////Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            ////Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Assigning window's content property.
            this.Content = chart;
            }
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartTypes">ChartTypes</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPoint">ChartPoint</seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.C_defaultDim">
            <summary>
            Initializes c_defaultDim
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.C_dockPanelName">
            <summary>
            Initializes c_dockPanelName
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.C_imageFilesFilter">
            <summary>
            Initializes c_imageFilesFilter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.isChartClose">
            <summary>
            Initializes isChartClose
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.rootParent">
            <summary>
            Initialize the Root Parent element of Chart
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.m_dockPanel">
            <summary>
            Initializes m_dockPanel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.m_areas">
            <summary>
            Initializes m_areas
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.m_legends">
            <summary>
            Initializes m_legends
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.m_toolbars">
            <summary>
            Initializes m_toolbars
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.m_internalSeriesList">
            <summary>
            Initializes m_internalSeriesList
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.m_annotations">
            <summary>
            Initializes m_annotations
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.headerFonSize">
            <summary>
            Declares the m_hiddenToolBarsCollection member;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.ShowToolBarOnPrintAndSaveProperty">
            <summary>
            Enables or disables the Toolbar on printing and saving
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.LegendStyleProperty">
            <summary>
            Identifies the LegendStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.ToolBarStyleProperty">
            <summary>
            Identifies the ToolBarStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.DisposeOnUnloadProperty">
            <summary>
            Property for Remove the chart from their parent
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.ChartVisualStyleProperty">
            <summary>
            VisualStyle for Chart
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.AreaStyleProperty">
            <summary>
            Style for ChartArea
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.AnnotationLabelTemplateProperty">
            <summary>
            Identifies the AnnotationLabelTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.LegendNameProperty">
            <summary>
            Identifies the LegendName dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.AreasPanelProperty">
            <summary>
            Identifies the AreasPanel dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.DockProperty">
            <summary>
            Identifies the Dock dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.AlignmentProperty">
            <summary>
            Identifies the alignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.ToolBarProperty">
            <summary>
            Identifies the ToolBar dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.PropertiesDialogItemsCountProperty">
            <summary>
            Identifies the PropertyDialogItem Count dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.TabStopProperty">
            <summary>
            Identifies the TabStop dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.HeaderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.HeaderAlignmentProperty">
            <summary>
            Proeprty for Align the ChartHeader
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.FooterProperty">
            <summary>
            Identifies the footer dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.FooterAlignmentProperty">
            <summary>
            Identifies the footer alignment dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnItemAdded(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when CustomTab Added
            </summary>
            <param name="d">The dependency object d.</param>
            <param name="e">The dependencyProperty changed eventargs e</param> 
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.ApplyPropertyPagesProperty">
            <summary>
            Identifies the ApplyPropertyPages dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnApplied(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when CustomTab Applied
            </summary>
            <param name="d">The dependency object d.</param>
            <param name="e">The dependencyProperty changed eventargs e</param>  
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.AnnotationIntersectActionProperty">
            <summary>
            Identifies the AnnotationIntersectAction dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.PropertyWindowTabsProperty">
            <summary>
            PropertyWindowTabsProperty initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnPropertyWindowTabsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for ProeprtyWindowTab changed
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnPropertyWindowTabsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for ProeprtyWindowTab changed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.Chart"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.Chart"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SetLegendName(Syncfusion.Windows.Chart.ChartSeries,System.String)">
            <summary>
            Hides the toolbars of the chart. Action is reverted by calling <see>
                                                                               <cref>ShowToolBars</cref>
                                                                           </see>
                .
            </summary>
            <summary>
            Shows the tool bars after <see>
                                          <cref>HideToolBars</cref>
                                      </see>
                call.
            </summary>
            <summary>
            Sets the name of the legend.
            </summary>
            <param name="series">The series.</param>
            <param name="legendName">Name of the legend.</param>
            <exception cref="T:System.ArgumentNullException"><c>null</c> has been passed as series.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.GetLegendName(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the name of the legend.
            </summary>
            <param name="series">The series.</param>
            <returns>Legend name.</returns>
            <exception cref="T:System.ArgumentNullException"><c>null</c> has been passed as parameter.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SetDock(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartDock)">
            <summary>
            Sets the dock of element of <see cref="T:Syncfusion.Windows.Chart.ChartDockPanel"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="dock">The dock value.</param>
            <exception cref="T:System.ArgumentNullException"><c>null</c> has been passed as parameter.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.GetDock(System.Windows.UIElement)">
            <summary>
            Gets the dock of <see cref="T:Syncfusion.Windows.Chart.ChartDockPanel"/> child.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:Syncfusion.Windows.Chart.ChartDock"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><c>null</c> has been passed as element.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SetAlignment(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartAlignment)">
            <summary>
            Sets the alignment.
            </summary>
            <param name="element">The element.</param>
            <param name="alignment">The alignment.</param>
            <exception cref="T:System.ArgumentNullException"><c>null</c> has been passed as element.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.GetAlignment(System.Windows.UIElement)">
            <summary>
            Gets the alignment.
            </summary>
            <param name="element">The element.</param>
            <returns>Element's alignment.</returns>
            <exception cref="T:System.ArgumentNullException"><c>null</c> has been passed as parameter.</exception>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Chart.HeaderPresenter">
            <summary>
            Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"></see>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
            
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.ShowPropertyDialog">
            <summary>
            Display Chart property dialog 
            </summary>    
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Print">
            <summary>
            Shows print dialog for a whole chart.
            </summary>
            <returns><c>true</c> if print dialog exited successfully.</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Print(System.Windows.Rect)">
            <summary>
            Prints chart by the specified print area.
            </summary>
            <param name="printArea">The print area.</param>
            <returns><c>true</c> if print dialog exited successfully.</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SwitchPrintingMode">
            <summary>
            Switches to the printing mode.
            </summary>
            <remarks>
            Printing adorner is drawn on chart if this method is called.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event. 
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.IO.Stream,System.Windows.Rect,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves chart to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="saveArea">The area rect.</param>
            <param name="encoder">The encoder.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.IO.Stream,System.Windows.Rect)">
            <summary>
            Saves chart to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="saveArea">The area rect.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.String,System.Windows.Rect)">
            <summary>
            Saves chart to chart to specified file.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="saveArea">The save area.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.String,System.Windows.Rect,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves chart to specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="saveArea">The save area.</param>
            <param name="encoder">The encoder.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.IO.Stream,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves chart to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoder">The encoder.</param>
            <exception cref="T:System.ArgumentNullException">Internal border of chart control cannot be retrieved.</exception>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.IO.Stream)">
            <summary>
            Saves chart to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.String)">
            <summary>
            Saves chart to the file with specified filename.
            </summary>
            <param name="fileName">The filename.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Save(System.String,System.Windows.Media.Imaging.BitmapEncoder)">
            <summary>
            Saves chart to the file with specified filename using encoder.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="encoder">The encoder.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SaveToXps(System.IO.Stream,System.Windows.Media.Visual)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="visual">The visual.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SaveToXps(System.String)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="filename">The filename.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SaveToXps(System.IO.Stream,System.Windows.Rect)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="stream">The stream.</param>
            <param name="saveArea">The save area.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SaveToXps(System.String,System.Windows.Rect)">
            <summary>
            Saves to XPS format.
            </summary>
            <param name="filename">The filename.</param>
            <param name="saveArea">The save area.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.CopyToClipboard">
            <summary>
            Copies chart to clipboard.
            </summary>
            <exception cref="T:System.ArgumentNullException">Internal border of chart control cannot be retrieved.</exception>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnPropertyWindowTabsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when PropertyWindowTabs collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnLegendsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when legends collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnAreasChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when areas collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnSeriesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when series collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnToolBarsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when toolBar collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnVisualStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for VisualStyleChanged
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnAreaStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for AreaStyleChanged
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnLegendStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for LegendStyleChange
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnToolBarStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for ToolBarstyleChanged
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnToolBarChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ToolBar is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnPrintCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:System.Windows.Input.ApplicationCommands.Print"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnAddAnnotationCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see>
                            <cref>ApplicationCommands.AddAnnotation</cref>
                        </see>
                routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnSwitchPrintingCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartCommands.SwitchPrinting"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnSaveCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:System.Windows.Input.ApplicationCommands.Save"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnCopyCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:System.Windows.Input.ApplicationCommands.Copy"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnCloseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:System.Windows.Input.ApplicationCommands.Close"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.CloseToolBar">
            <summary>
            Close the Toolbar in chart
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.ShowToolBar">
            <summary>
            Method for Showing the ToolBar
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnTabStopChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsTabStop property is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnLegendDockChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when legend dock is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnCoerceToolBar(System.Windows.DependencyObject,System.Object)">
            <summary>
            Corces ToolBar property.
            </summary>
            <param name="dObj">The DependencyObject dObj.</param>
            <param name="value">The value.</param>
            <returns>The ChartToolBar</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnToolBarDockChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ToolBar dock is changed.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>  
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.CreateBitmapEncoderByExtension(System.String)">
            <summary>
            Creates the new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"/> class by extension of file.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>The BitmapEncoder</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.IsCornerRadiusValid(System.Object)">
            <summary>
            Determines whether passed corner radius is valid.
            </summary>
            <param name="value">The corner radius instance.</param>
            <returns>
            <c>true</c> if corner radius is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
            <returns>
            The size of the control, up to the maximum specified by <paramref name="constraint"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.ShowPrintDialog(System.Windows.Rect)">
            <summary>
            Shows the print dialog.
            </summary>
            <param name="printArea">The print area.</param>
            <returns>True to show the Printdialog</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Serialize">
            <summary>
            Return String value from the Serialization method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.SubString(System.String,System.String,System.String)">
            <summary>
            Return the substring
            </summary>
            <param name="actual"></param>
            <param name="_from"></param>
            <param name="_to"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.Chart.Deserialize(System.String)">
            <summary>
            Return the XAML code
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.ShowToolBarOnPrintAndSave">
            <summary>
            Get and set the ShowToolBarOnPrintAndSave property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.LegendStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.ToolBarStyle">
            <summary>
            Gets or sets the ToolBarStyle value.
            </summary>
            <value>The ToolBarStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.DisposeOnUnload">
            <summary>
            Gets or sets the DisposeOnUnload value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.ChartVisualStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.AreaStyle">
            <summary>
            Gets or sets the LegendStyle value.
            </summary>
            <value>The LegendStyle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.HeaderAlignment">
            <summary>
            Get and Set the HeaderAlignment proeprty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <value>The Footer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.FooterAlignment">
            <summary>
            Gets or sets the footer alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.PropertiesDialogItemsCount">
            <summary>
            Gets or sets the PropertiesDialogItemsCount.
            </summary>
            <value>The PropertiesDialogItemsCount.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart.InitializeCustomTabPages">
            <summary>
            Event that is raised when CustomTab Pages Initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.ApplyPropertyPages">
            <summary>
            Gets or sets the PropertyPages.
            </summary>
            <value>The ApplyPropertyPages.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart.ApplyCustomTabPages">
            <summary>
            Event that is raised when CustomTab Pages Applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.AnnotationIntersectAction">
            <summary>
            Set the Visiblility of Annotation when get intersect
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.AnnotationLabelTemplate">
            <summary>
            Gets or sets the LabelTemplate. This is a dependency property.
            </summary>
            <value>The LabelTemplate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.AnnotationLabels">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Chart.ChartAnnotationLabelsCollection"/>.
            </summary>
            <value>The Labels collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.CornerRadius">
            <summary>
            Gets or sets corner radius. This is a dependency property.
            </summary>
            <remarks>
            This property affects chart's border corner radius. Changing chart's default
            template might make this property useless.
            </remarks>
            <example>
            XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content and setting its corner
            radius--&gt;
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"
            CornerRadius="10,1,6,2"&gt;
            &lt;!--Assigning chart area--&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;!--Adding series to area--&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;!--Assigning data property--&gt;
            &lt;syncfusion:ChartSeries Data="5 5 6 6 7 7"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code> C#: <code language="C#">
            public partial class Window1 : Window
            {
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Assigning CornerRadius property.
            chart.CornerRadius = new CornerRadius(10, 1, 6, 2);
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            data.Add(new ChartPoint(5, 5));
            ////Adding new series.
            chart.Areas[0].Series.Add(new ChartSeries());
            ////Assigning data to series.
            chart.Areas[0].Series[0].Data = data;
            //Assigning window's content property.
            this.Content = chart;
            }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.Legends">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/>.
            </summary>
            <remarks>
            Chart control has ability to display numerous legends. All legends are added to
            <see cref="T:Syncfusion.Windows.Chart.ChartDockPanel"/> automatically. <para/> <see cref="F:Syncfusion.Windows.Chart.Chart.LegendNameProperty"/> attached property can be used to assign series to
            different legends. By default, <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> shows all series on
            chart. <para/> <see cref="F:Syncfusion.Windows.Chart.ChartDockPanel.DockProperty">ChartDockPanel.Dock</see> attached property
            can be used to assign legend's position on dock panel.
            </remarks>
            <value>
            The legends collection.
            </value>
            <example>
            Code sample demonstrates ability to display on legend required series only.
            <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;!--Assigning Legends property of chart--&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;!--Adding bottom legend with "legend1" name--&gt;
            &lt;syncfusion:ChartLegend syncfusion:ChartDockPanel.Dock="Bottom"
            syncfusion:Chart.LegendName="Legend1"/&gt;
            &lt;!--Adding right legend with "legend2" name--&gt;
            &lt;syncfusion:ChartLegend syncfusion:ChartDockPanel.Dock="Right"
            syncfusion:Chart.LegendName="Legend2"/&gt;
            &lt;!--Adding left legend with "legend3" name--&gt;
            &lt;syncfusion:ChartLegend syncfusion:ChartDockPanel.Dock="Left"
            syncfusion:Chart.LegendName="Legend3"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;!--Assigning chart area--&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;!--Adding series to area--&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;!--Adding 1st series and attaching legend's name--&gt;
            &lt;syncfusion:ChartSeries Data="5 5 6 6 7 7" Label="series1"
            syncfusion:Chart.LegendName="Legend1"/&gt;
            &lt;!--Adding 2nd series and attaching legend's name--&gt;
            &lt;syncfusion:ChartSeries Data="2 5 3 6 4 1" Label="series2"
            syncfusion:Chart.LegendName="Legend2"/&gt;
            &lt;!--Adding 3rd series and attaching legend's name--&gt;
            &lt;syncfusion:ChartSeries Data="5 2 6 6 7 7" Label="series3"
            syncfusion:Chart.LegendName="Legend3"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code> C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating new chart instance.
            Chart chart = new Chart();
            //Adding new area.
            chart.Areas.Add(new ChartArea());
            //Creating series1 instance.
            ChartSeries series1 = new ChartSeries();
            //Setting label and assigning data.
            series1.Label = "series1";
            series1.Data = this.gentrateRandomChartData();
            //Setting legend name.
            Chart.SetLegendName(series1, "Legend1");
            //Creating series2 instance.
            ChartSeries series2 = new ChartSeries();
            //Setting label and assigning data.
            series2.Label = "series2";
            series2.Data = this.gentrateRandomChartData();
            //Setting legend name.
            Chart.SetLegendName(series2, "Legend2");
            //Creating series2 instance.
            ChartSeries series3 = new ChartSeries();
            //Setting label and assigning data.
            series3.Label = "series3";
            series3.Data = this.gentrateRandomChartData();
            //Setting legend name.
            Chart.SetLegendName(series3, "Legend3");
            //Creating legend1 instance.
            ChartLegend legend1 = new ChartLegend();
            //Setting LegendName property.
            legend1.SetValue(Chart.LegendNameProperty, "Legend1");
            //Creating legend1 instance.
            ChartLegend legend2 = new ChartLegend();
            //Setting LegendName property.
            legend2.SetValue(Chart.LegendNameProperty, "Legend2");
            //Creating legend1 instance.
            ChartLegend legend3 = new ChartLegend();
            //Setting LegendName property.
            legend3.SetValue(Chart.LegendNameProperty, "Legend3");
            //Adding created series to area.
            chart.Areas[0].Series.Add(series1);
            chart.Areas[0].Series.Add(series2);
            chart.Areas[0].Series.Add(series3);
            //Adding created legends to chart.
            chart.Legends.Add(legend1);
            chart.Legends.Add(legend2);
            chart.Legends.Add(legend3);
            //Assigning window's content property.
            this.Content = chart;
            }
            //Generates random series' points.
            ChartListData gentrateRandomChartData()
            {
            ChartListData returnValue = new ChartListData();
            Random randomizer = new Random();
            for (int i = 0; i &lt; 10; i++)
            {
            returnValue.Add(new ChartPoint(i, randomizer.Next((i + 1) * 10)));
            }
            return returnValue;
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLegend">ChartLegend</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLegendsCollection">ChartLegendsCollection</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.Areas">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Chart.ChartArea">ChartAreas</see>.
            </summary>
            <remarks>
            Chart control may contain multiple areas. <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> is main container for <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.
            <para/>
            By default, chart areas are added to <see cref="T:Syncfusion.Windows.Chart.ChartGrid"/>. Default panel can be changed using <see cref="P:Syncfusion.Windows.Chart.Chart.AreasPanel"/> property.
            </remarks>
            <example>
            C#:
            <code language="C#">
            //Creating new chart instance.
            Chart chart = new Chart();
            //Creating datapoints collection.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 1));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 3));
            data.Add(new ChartPoint(4, 4));
            //Creating 1st series.
            ChartSeries series1 = new ChartSeries();
            series1.Type = ChartTypes.Pie;
            series1.Data = data;
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            series2.Type = ChartTypes.Column;
            series2.Data = data;
            //Creating third series.
            ChartArea chartArea1 = new ChartArea();
            ChartArea chartArea2 = new ChartArea();
            chartArea1.Series.Add(series1);
            chartArea2.Series.Add(series2);
            chart.Areas.Add(chartArea1);
            chart.Areas.Add(chartArea2);
            </code>
            XAML:
            <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               Width="300" Height="300"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
               &lt;syncfusion:Chart.Areas&gt;
                   &lt;!--Adding multiple areas to collection--&gt;
                   &lt;syncfusion:ChartArea&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 6 6" Type="Pie"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
                   &lt;syncfusion:ChartArea&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 6 6" Type="Column"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
                   &lt;syncfusion:ChartArea&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 6 6" Type="Pyramid"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
               &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.ToolBars">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Chart.ChartToolBar">ChartToolBar</see>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.AreasPanel">
            <summary>
            Gets or sets the areas panel template. This is a dependency property.
            </summary>
            <remarks>
            By default, chart areas are contained in <see cref="T:Syncfusion.Windows.Chart.ChartGrid"/>. Property provides ability to change areas host panel.
            </remarks>
            <example>
            C#:
            <code language="C#">
            This property is not intended to be used from C#.
            </code>
            XAML:
            <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               Width="300" Height="400"&gt;
            &lt;!--Adding chart control to window's content--&gt;
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
               &lt;syncfusion:Chart.AreasPanel&gt;
                   &lt;ItemsPanelTemplate&gt;
                       &lt;DockPanel/&gt;
                   &lt;/ItemsPanelTemplate&gt;
               &lt;/syncfusion:Chart.AreasPanel&gt;
               &lt;syncfusion:Chart.Areas&gt;
                   &lt;!--Adding multiple areas to collection and setting their Dock property.--&gt;
                   &lt;syncfusion:ChartArea DockPanel.Dock="Bottom" Height="100"&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 6 6" Type="Pie"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
                   &lt;syncfusion:ChartArea DockPanel.Dock="Top" Height="100"&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 6 6" Type="Column"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
                   &lt;syncfusion:ChartArea DockPanel.Dock="Right" Height="100"&gt;
                       &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4 5 5 6 6" Type="Pyramid"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
               &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <value>The areas panel template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
            <value></value>
            <returns>
            An enumerator for logical child elements of this element.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.ToolBar">
            <summary>
            Gets or sets the Chart ToolBar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Chart.PropertyWindowTabs">
            <summary>
            Get and Set the PropertyWindowTabs proeprty
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart.ChartPropertyWindowOpened">
            <summary>
            Occurs when [After window is opened]. 
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart.ChartPropertyWindowOpening">
            <summary>
            Occurs when [Before window is opened]. Event can be cancelled.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart.ChartPropertyWindowClosed">
            <summary>
            Occurs when [After window is closed].
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.Chart.ChartPropertyWindowClosing">
            <summary>
            Occurs when [Before window is closed]. Event can be cancelled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IChartInterface">
            <summary>
            Represents the Interface as IChartInterface
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartInterface.Background">
            <summary>
            CLR property of BackGround.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartContextMenuEventHandler">
            <summary>
            Delegate for ChartContextMenuEventHandler  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaContextMenu">
            <summary>
            Represents context menu that is shown when mouse right-clicks on <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            </summary>
            <exclude/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaContextMenu"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaContextMenu.resourceDictionaryContextMenu">
            <summary>
            The ResourceDictionary with ContextMenu strings for localization
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaContextMenu.m_zoomSeriesMenu">
            <summary>
            Initializes m_zoomSeriesMenu
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaContextMenu.m_seriesMenu">
            <summary>
            Initializes m_seriesMenu
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaContextMenu.m_palettesMenu">
            <summary>
            Initializes m_palettesMenu
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaContextMenu.m_AreaAnnotation">
            <summary>
            Initializes m_AreaAnnotation
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartAreaContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAreaContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.OnOpened(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Controls.ContextMenu.Opened"></see> event occurs.
            </summary>
            <param name="e">The event data for the <see cref="E:System.Windows.Controls.ContextMenu.Opened"></see> event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Called when a context menu's visual parent changes.
            </summary>
            <param name="oldParent">The object that the context menu was previously attached to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.GetMenuItemBy(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Gets the menu item by specified <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/>.
            </summary>
            <param name="series">The series.</param>
            <returns>Returns the MenuItem</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.PrepareSeriesMenu">
            <summary>
            Prepares the series menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.PrepareZoomSeriesMenu">
            <summary>
            Prepares zoom series menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.SeriesItem_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Raises when the seriesItem is checked
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The RoutedEventArgs e</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.PreparePaletteMenu">
            <summary>
            Prepares the palette menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.OnTypeItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when type item is click.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAreaContextMenu.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartAreaContextMenu.Opening">
            <summary>
            Event for ContextMenu Opening
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaContextMenu.Area">
            <summary>
            Gets the area that context menu should be shown on.
            </summary>
            <value>The <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartContextMenuEventArgs">
            <summary>
            ChartContextMenuEventArgs class implematation
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartContextMenuEventArgs.Handle">
            <summary>
            Get and Set HandleProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartContextMenuEventArgs.Header">
            <summary>
            Get and Set Header Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartContextMenuEventArgs.CurrentMenuItem">
            <summary>
            Get and Sey CurrentMenuItem
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LocalizeEnumChartColorPalette">
            <summary>
            The class creates an extension method on the actual enum "ChartColorPalette" which then allows
            you to call a ToFriendlyString() on the instance of all enums of that type
            Which could be used for localization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LocalizeEnumChartColorPalette.ToFriendlyString(Syncfusion.Windows.Chart.ChartColorPalette)">
            <summary>
            Returns a friendly enum name, used for localization
            </summary>
            <param name="chartColorPaletteEnum">The chart color palette enum.</param>
            <returns>Returns string from ResourceDictionary</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStyleModel">
            <summary>
            Represents ChartStyleModel
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_defaultPalette">
            <summary>
            Initializes m_defaultPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_defaultAlphaPalette">
            <summary>
            Initializes m_defaultAlphaPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_defaultDarkPalette">
            <summary>
            Initializes m_defaultDarkPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_earthTonePalette">
            <summary>
            Initializes m_earthTonePalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_analogPalette">
            <summary>
            Initializes m_analogPalette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_colorfulPalette">
            <summary>
            Initializes m_colorfulPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_GradientPalette">
            <summary>
            Initializes m_colorfulPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_naturePalette">
            <summary>
            Initializes m_naturePalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_pastelPalette">
            <summary>
            Initializes m_pastelPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_triadPalette">
            <summary>
            Initializes m_triadPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_warmColdPalette">
            <summary>
            Initializes m_warmColdPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_grayScalePalette">
            <summary>
            Initializes m_grayScalePalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_Office2007BluePalette">
            <summary>
            Initializes m_Office2007BluePalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_Office2007BlackPalette">
            <summary>
            Initializes m_Office2007BlackPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_Office2007SilverPalette">
            <summary>
            Initializes m_Office2007SilverPalette
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_area">
            <summary>
            Initializes m_area
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_brushObjects">
            <summary>
            Initializes m_brushObjects
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_palette">
            <summary>
            Initializes m_palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_brushes">
            <summary>
            Initializes m_brushes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.m_customPalette">
            <summary>
            Initializes m_customPalette
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartStyleModel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartStyleModel"/> class.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.#ctor">
            <summary>
            Called when instance created for ChartStyleModel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.#ctor(Syncfusion.Windows.Chart.ChartArea,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartStyleModel"/> class.
            </summary>
            <param name="area">The area value.</param>
            <param name="count">The count value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Int32)">
            <summary>
            Sets the binding.
            </summary>
            <param name="target">The target.</param>
            <param name="property">The property.</param>
            <param name="colorIndex">Index of the color.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.GetIcon(System.Int32,System.Int32,Syncfusion.Windows.Chart.ChartColorPalette)">
            <summary>
            Gets the icon by specified palette.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="palette">The palette.</param>
            <returns>Returns the image</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.ApplyPalette(Syncfusion.Windows.Chart.ChartColorPalette)">
            <summary>
            Applies the palette.
            </summary>
            <param name="palette">The palette.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.GetBrushes(Syncfusion.Windows.Chart.ChartColorPalette)">
            <summary>
            Gets the brushes.
            </summary>
            <param name="palette">The palette.</param>
            <returns>Returns the brushes</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.OnSeriesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when series collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStyleModel.Palette">
            <summary>
            Gets or sets the palette.
            </summary>
            <value>The palette.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStyleModel.CustomPalette">
            <summary>
            Gets or sets the custom palette.
            </summary>
            <value>The custom palette.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStyleModel.CurrentPalette">
            <summary>
            Gets the CurrentPalette
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartStyleModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject">
            <summary>
            Represents StyleBindingObject
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject.InteriorProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject.Interior"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject.m_binding">
            <summary>
            Declares m_binding
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject.#ctor(System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject">StyleBindingObject</see> class. 
            </summary>
            <param name="brush">The brush value</param>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject.Interior">
            <summary>
            Gets or sets the Interior property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStyleModel.StyleBindingObject.InteriorBinding">
            <summary>
            Gets the InteriorBinding
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeries">
            <summary>
            Class represents chart series. Series is used to draw required chart type on
            area.
            </summary>
            <remarks>
            Series is a part of <see cref="T:Syncfusion.Windows.Chart.ChartArea"/> series collection. Chart points of
            series can be assigned either via <see cref="P:Syncfusion.Windows.Chart.ChartSeries.Data"/> property or as
            content of series from XAML.
            </remarks>
            <example>
            <code language="XAML">
            &lt;Window.Resources&gt;
                    &lt;XmlDataProvider x:Key="myXmlData"&gt;
                        &lt;x:XData&gt;
                            &lt;Products xmlns=""&gt;
                                &lt;Product Sales="20" Projected="30" Month="1"/&gt;
                                &lt;Product Sales="12" Projected="28" Month="2"/&gt;
                                &lt;Product Sales="15" Projected="29" Month="3"/&gt;
                                &lt;Product Sales="28" Projected="33" Month="4"/&gt;
                                &lt;Product Sales="24" Projected="30" Month="5"/&gt;
                            &lt;/Products&gt;
                        &lt;/x:XData&gt;
                    &lt;/XmlDataProvider&gt;
                &lt;/Window.Resources&gt;
                &lt;Grid&gt;
                    &lt;sfchart:Chart Name="Chart2"&gt;
                        &lt;sfchart:ChartArea &gt;
                            &lt;sfchart:ChartSeries DataSource="{Binding
            Source={StaticResource myXmlData},   XPath=Products/Product}"
            BindingPathX="Month" BindingPathsY="Sales" Type="Column" Label="Actual
            Sales"&gt;
                            &lt;/sfchart:ChartSeries&gt;
                            &lt;sfchart:ChartSeries DataSource="{Binding
            Source={StaticResource myXmlData},          
            XPath=Products/Product}" BindingPathX="Month" BindingPathsY="Projected"
            Type="Column" Label="Projected Sales"&gt;
                            &lt;/sfchart:ChartSeries&gt;
                        &lt;/sfchart:ChartArea&gt;
                    &lt;/sfchart:Chart&gt;
                &lt;/Grid&gt;
            </code>
            </example>
            <permission cref="T:System.Security.PermissionSet"> Public Access </permission>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ShowDataLabelsProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowDataLabel.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AnimationDurationProperty">
            <summary>
            Idenfities AnimationDuration dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.UseOptimizationProperty">
            <summary>
             Identifies the UseOptimization dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ResolutionProperty">
            <summary>
            Identifies the Resolution dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ZOrderProperty">
            <summary>
            Idenfities Zorder dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AnimateOneByOneProperty">
            <summary>
            Idenfities AnimateOneByOneProperty dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsHitTestVisibleProperty">
            <summary>
            Identifies IsHitTestVisible dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AnimateOptionProperty">
            <summary>
            Idenfities AnimateOption dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EnableAnimationProperty">
            <summary>
            Idenfities EnableAnimation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EnableEffectsProperty">
            <summary>
            Idenfities EnableEffects dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AutoDiscardProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsVisibleProperty">
            <summary>
            Identifies the IsVisible dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsIndexedProperty">
            <summary>
            Identifies the IsIndexeddependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsSortDataProperty">
            <summary>
            Identifies the IsSortData dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsRotatedProperty">
            <summary>
            Identifies the IsRotated dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.XAxisProperty">
            <summary>
            Identifies the XAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.YAxisProperty">
            <summary>
            Identifies the YAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ZAxisProperty">
            <summary>
            Identifies the YAxis dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.TemplateProperty">
            <summary>
            Identifies the Template dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.InteriorProperty">
            <summary>
            Identifies the Interior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.FastSegmentPropertiesProperty">
            <summary>
            Identifies the FastSegment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.DataProperty">
            <summary>
            Identifies the Data dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AdornmentsInfoProperty">
            <summary>
            Identifies the AdornmentsInfo dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.TypeProperty">
            <summary>
            Identifies the Type dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ChartTypeProperty">
            <summary>
            Identifies the ChartType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsZoomableProperty">
            <summary>
            Identifies the IsZoomable dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.InactiveSeriesOpacityOnZoomProperty">
            <summary>
            Identifies the InactiveSeriesOpacityOnZoom dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.UnitProperty">
            <summary>
            Identifies the Unit dependency property.
            </summary>		
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.UnitVisibilityProperty">
            <summary>   
            To show the unit of the series in the legend item
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.DataSourceProperty">
            <summary>
            Identifies the DataSource dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.BindingPathXProperty">
            <summary>
            Identifies the BindingPathX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.BindingPathsYProperty">
            <summary>
            Identifies the BindingPathsY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.HighlightedProperty">
            <summary>
            Identifies the Highlighted dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AreaPropertyKey">
            <summary>
            Identifies the Area property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AreaProperty">
            <summary>
            Identifies the Area dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.CenterPointPropertyKey">
            <summary>
            Identifies CenterPoint dependency property key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.CenterPointProperty">
            <summary>
            Identifies CenterPoint dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EnableSelectionProperty">
            <summary>
            Identifies the EnableSelection dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AnnotationsProperty">
            <summary>
            Identifies the Annotations dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IndicatorsProperty">
            <summary>
            Identifies the Indicators dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ShowSmartLabelsProperty">
            <summary>
             Identifies the ShowSmartLabels dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AdornmentIntersectActionProperty">
            <summary>
             Identifies the AdornmentIntersectAction dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolTemplateProperty">
            <summary>
            Identifies the AdornmentSymbolTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolInteriorProperty">
            <summary>
            Identifies the AdornmentSymbolInterior dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolStrokeProperty">
            <summary>
            Identifies the AdornmentSymbolStroke dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolStrokeThicknessProperty">
            <summary>
            Identifies the AdornmentSymbolStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EmptyPointStyleProperty">
            <summary>
            Identifies the EmptyPointStyle dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EmptyPointInteriorProperty">
            <summary>
            Identifies the EmptyPointInterior dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnEmptyPointInteriorCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets called to  coerce EmptyPointInterior property
            </summary>
            <param name="d"></param>
            <param name="baseValue"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ShowEmptyPointsProperty">
            <summary>
            Identifies the ShowEmptyPoints dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.IsVisibleOnLegendProperty">
            <summary>   
            To show the legend icon of the chart series.
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.VisibilityOnLegendProperty">
            <summary>   
            To show the legend icon of the chart series.
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.LegendIconProperty">
            <summary>   
            To set the legend icon of the chart series.
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.LegendIconTemplateProperty">
            <summary>   
            To set template for the legend icon
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.InternalLegendIconTemplateProperty">
            <summary>   
            To set template for the Internal legend icon
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EmptyPointSymbolTemplateProperty">
            <summary>
             Identifies the EmptyPointSymbolTemplate dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.EmptyPointValueProperty">
            <summary>   
            To set template for the legend icon
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.SortDirectionProperty">
            <summary>
            
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.SortByProperty">
            <summary>
             Identifies the SortBy dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.SeriesAnnotationIntersectActionProperty">
            <summary>   
            To set intersect action for the SeriesAnnotationIntersectAction
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ColorEachProperty">
            <summary>
            Identifies the ColorEach dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.PaletteProperty">
            <summary>
            Identifies the ColorEachPalette dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.CustomPaletteProperty">
            <summary>
            Identifies the ColorEachCustomPalette dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.StrokePaletteProperty">
            <summary>
            Identifies the ColorEachStrokePalette dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.CustomStrokePaletteProperty">
            <summary>
            Identifies the ColorEachCustomStrokePalette dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_adornments">
            <summary>
            Declares m_adornments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_visibleSegments">
            <summary>
            Declares m_visibleSegments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_needUpdateSegments">
            <summary>
            Declares m_needUpdateSegments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_needUpdateVisualSegments">
            <summary>
            Declares m_needUpdateVisualSegments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_needUpdateIndexRange">
            <summary>
            Declares m_needUpdateIndexRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_xCidsRange">
            <summary>
            Declares m_xCidsRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_yCidsRange">
            <summary>
            Declares m_yCidsRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_zCidsRange">
            <summary>
            Declares m_yCidsRange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_isUpdating">
            <summary>
            Declares m_isUpdating
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.nextToEmptyPoint">
            <summary>
            Declares nextToEmptyPoint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_segments3D">
            <summary>
            Declares m_segments3D
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.internaldata_modified">
            <summary>
            Declares internaldata_modified
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_cachedParentArea">
            <summary>
            Declares m_cachedParentArea
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.Zoomactionenabled">
            <summary>
            Declares Zoomactionenabled
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.Contains_emptypt">
            <summary>
            Declares Contains_emptypt
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.ShowToolTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowToolTip.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> class.
            </summary>
            <example>
            C#: <code language="C#">
            //Creating new instance of chart.
            Chart mySampleChart = new Chart();
            //Adding new chart area.
            mySampleChart.Areas.Add(new ChartArea());
            //Series1 initialized with empty constructor.
            ChartSeries series = new ChartSeries();
            //Series1 initialized with passed chart type.
            mySampleChart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.m_DataModel">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.BindingDataModel">
            <summary>
            Method implementation for BindingDataModel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.#ctor(Syncfusion.Windows.Chart.ChartTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> class with passed
            chart type.
            </summary>
            <param name="type">Type of <see cref="T:Syncfusion.Windows.Chart.ChartTypes"/> series.</param>
            <example>
            C#: <code>
            //Creating new instance of chart.
            Chart mySampleChart = new Chart();
            //Adding new chart area.
            mySampleChart.Areas.Add(new ChartArea());
            //Series1 initialized with passed chart type.
            ChartSeries series = new ChartSeries(ChartTypes.Pie);
            //Adding series to chart area.
            mySampleChart.Areas[0].Series.Add(series);
            </code> XAML: <code>
            <para>
            You cannot use method in XAML.
            </para>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Invalidate">
            <summary>
            Invalidated the series.
            </summary>
            <remarks>
            Method should be used to explicitly invalidate the series. For normal
            consequences series is invalidated internally.
            </remarks>
            <example>
            C#: <code>
            ChartSeries series = new ChartSeries();
            //...
            //Setting series content.
            //...
            //Assigning new label for series;
            series.Label = "New series label";
            //Invalidating the series.
            series.Invalidate();
            </code> XAML: <code>
            You cannot use method in XAML.
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.BeginUpdate">
            <summary>
            Begins the update. Calling this method stops series updating.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.EndUpdate">
            <summary>
            Ends the update. Informs series to start updating.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.isDisposed">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.KnownType(Syncfusion.Windows.Chart.ChartTypes)">
            <summary>
            Returns known chart type instance by passed enum ChartTypes.
            </summary>
            <param name="type"><see cref="T:Syncfusion.Windows.Chart.ChartTypes"/> parameter.</param>
            <returns>Returns <see cref="P:Syncfusion.Windows.Chart.ChartSeries.ChartType"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.GetPoint(System.Int32)">
            <summary>
            Gets the series data point at specified index.
            </summary>
            <param name="index">Index of chart data point at specified positions.</param>
            <returns>
            Returns <see cref="T:Syncfusion.Windows.Chart.IChartDataPoint"/> value.
            </returns>
            <example>
            C#: <code>
            ChartSeries series = new ChartSeries();
            //...
            //Filling series with points.
            //...
            //Getting second point of series.
            ChartPoint point = series.GetPoint(1);
            </code> XAML: <code language="XAML">
            You cannot use method in XAML.
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.IsPointVisible(Syncfusion.Windows.Chart.IChartDataPoint,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified point should be visible on area.
            </summary>
            <returns>The bool value indicating whether the point is visible</returns>
            <param name="point">The point.</param>
            <param name="isXLogarithmic"></param>
            <param name="isYLogarithmic"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Recalculate3D">
            <summary>
            Recalculates the 3D series.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Update3D">
            <summary>
            Updates 3D Series.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseMove(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseHover event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseDown(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseDown event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseEnter(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseEnter event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseLeave(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseLeave event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseUp(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseUp event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseClick(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseClick event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseLeftButtonUp(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseLeftButtonUp event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseLeftButtonDown(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseLeftButtonDown event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseRightButtonUp(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseRightButtonUp event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnMouseRightButtonDown(System.Object,Syncfusion.Windows.Chart.ChartMouseEventArgs)">
            <summary>
            Raises MouseRightButtonDown event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The ChartMouseEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnTypeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises TypeChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnChartTypeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"></see> has been updated. The specific dependency property that changed is reported in the event data.
            </summary>
            <param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnTypeChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnChartTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnTypeChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.StartAnimation">
            <summary>
            Used to invoke the Chart Series Animation
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnAreaPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when area dependency property changed.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnCoerceAdornmentsInfo(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when need to coerce adornments info.
            </summary>
            <param name="d">The d value.</param>
            <param name="value">The object value.</param>
            <returns>The adornments info</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnAppearancePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Appearance property changed event handler.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="e">The DependencyPropertyChangedEventArgs e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnInvalidatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles invalidate property changed event.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="e">The DependencyPropertyChangedEventArgs e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnDataChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles data changed event.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="e">The DependencyPropertyChangedEventArgs e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnAdornmentsInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when adornments info is changed.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnDataSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when data source gets changed.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnSelectedItemCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called to coerce selected item and syncronize it with CollectionView's CurrentItem.
            </summary>
            <param name="dpObj">The dp obj.</param>
            <param name="value">The object value.</param>
            <returns>Returns the selected Item</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnIsAutoDiscardPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnIsIndexedCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called to coerce value of IsIndexed property.
            </summary>
            <param name="d">The DependencyObject d.</param>
            <param name="value">The object value.</param>
            <returns>The IsIndexed value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnInteriorCoerce(System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets called to coerce Interior property regarding IsZoomable property.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="value">The object value</param>
            <returns>Returns the interior</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnColorEachInteriorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles ColorEach changed event.
            </summary>
            <param name="d">The object d</param>
            <param name="e">The NotifyCollectionChangedEventArgs e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnIsZoomableChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnIsZoomableChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnInactiveSeriesOpacityOnZoomChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Forces chart series update it's Interior property.
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="e">The DependencyPropertyChangedEvent Arguments e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnIsZoomableChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises IsZoomableChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Recalculate">
            <summary>
            Recalculates chart series.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.UpdateSegments">
            <summary>
            Updates the segments.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.RecalculateSegments">
            <summary>
            Recalculates the segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.RecalculateVisualSegments">
            <summary>
            Recalculates the visual segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.RecalculateIndexRange">
            <summary>
            Recalculates the index range.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.EnsureDataIsEnough">
            <summary>
            Ensures the data is correct.
            </summary>
            <returns>bool value to ensure if data is enough</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles data changed event.
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The NotifyCollectionChangedEventArgs e</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.OnAdornmentsPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when adornments property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.RaiseDataChanged(System.Object,System.EventArgs)">
            <summary>
            Raises data changed event
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The Event arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.RaiseAppearanceChanged(System.Object,System.EventArgs)">
            <summary>
            Raises appearence changed event
            </summary>
            <param name="sender">The object sender</param>
            <param name="args">The Event arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.DataSourceChanged(System.Object,System.Object)">
            <summary>
            Datas the source changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.CurrentItemChanging(System.Object,System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Currents the item changing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CurrentChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.CurrentItemChanged(System.Object,System.EventArgs)">
            <summary>
            Currents the item changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.UpdateLegendIcon(Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Updates the legend.
            </summary>
            <param name="type">The series type</param>        
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartSeries.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.DataChanged">
            <summary>
            Occurs when series data was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.AppearanceChanged">
            <summary>
            Occurs when series appearance was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseMove">
            <summary>
            Occurs when any mouse button is clicked while pointer is over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseClick">
            <summary>
            Occurs when any mouse button is clicked while pointer is over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseDown">
            <summary>
            Occurs when any mouse button is pressed while pointer is over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseEnter">
            <summary>
            Occurs when mouse pointer enters the bounds of the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseLeave">
            <summary>
            Occurs when mouse pointer leaves the bounds of the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseUp">
            <summary>
            Occurs when any mouse button is released over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseLeftButtonUp">
            <summary>
            Occurs when left mouse button is released over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseDoubleClick">
            <summary>
            Occurs when  mouse button is released over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseRightButtonUp">
            <summary>
            Occurs when right mouse button is released over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseLeftButtonDown">
            <summary>
            Occurs when left mouse button is pressed over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.MouseRightButtonDown">
            <summary>
            Occurs when right mouse button is pressed over the series.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.IsZoomableChanged">
            <summary>
            Occurs when IsZoomable property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.TypeChanged">
            <summary>
            Occurs when series Type was changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.TypeChanging">
            <summary>
            Called when Type property changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartSeries.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ShowDataLabels">
            <summary>
            Get and Set ShowDataLabelsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Indicators">
            <summary>
            Get and Set IndicatorsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ShowSmartLabels">
            <summary>
            Get and Set ShowSmartLabelsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentIntersectAction">
            <summary>
            Get and Set AdornmentIntersectActionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EmptyPointSymbolTemplate">
            <summary>
            Get and Set EmptyPointSymbolTemplateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.SeriesAnnotationIntersectAction">
            <summary>
            Get and Set SeriesAnnotationIntersectActionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ColorEach">
            <summary>
            Gets or sets a value that specifies whether each data point of a series is shown in a different color. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Palette">
            <summary>
            Gets or sets a value that specifies the palette to apply for the data points of series
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.CustomPalette">
            <summary>
            Gets or sets a value that specifies the custom palette to apply for the data points of series
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.StrokePalette">
            <summary>
            Gets or sets a value that specifies the stroke palette to apply for the data points of series
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.CustomStrokePalette">
            <summary>
            Gets or sets a value that specifies the custom stroke palette to apply for the data points of series
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.SegmentWidthMode">
            <summary>
            Get and Set SegmentWidthModeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Presenter">
            <summary>
            Gets or sets the ChartSereis presenter
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentPresenter">
            <summary>
            Gets or sets the Adornments contents
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Animation">
            <summary>
            Gets or sets the Chart Sereis Animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.VisibleSegments">
            <summary>
            Get the CLR property VisibleSegments value by internal property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AnimationDuration">
            <summary>
            Gets or sets the AnimationDuration. This is dependency property.
            </summary>
            <value>The Timespan.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.UseOptimization">
            <summary>
            Get and Set UseOptimizationProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Resolution">
            <summary>
            Get and Set ResolutionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ZOrder">
            <summary>
            Get and Set ZOrderProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AnimateOneByOne">
            <summary>
            Gets or sets a value indicating whether the AnimateOneByOne. This is dependency property.
            </summary>
            <value>The bool value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsHitTestVisible">
            <summary>
            Gets or sets a value indicating whether the IsHitTestVisible. This is dependency property.
            </summary>
            <value>The bool value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EmptyPointValue">
            <summary>
            Get and Set EmptyPointValueProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AnimateOption">
            <summary>
            Gets or sets the AnimateOption. This is dependency property.
            </summary>
            <value>The AnimationDirection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EnableAnimation">
            <summary>
            Gets or sets a value indicating whether EnableAnimation. This is dependency property.
            </summary>
            <value>The bool value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EnableEffects">
            <summary>
            Gets or sets a value indicating whether EnableEffects. This is dependency property.
            </summary>
            <value>The bool value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AutoDiscard">
            <summary>
            Gets or sets a value for the Auto Discard. This is dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.HoldDataUpdate">
            <summary>
            Get and Set HoldDataUpdateProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EnableSelection">
            <summary>
            Gets or sets a value indicating whether to EnableSelection. This is a dependency property.
            </summary>
            <value>The EnableSelection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.CenterPoint">
            <summary>
            Gets the value indicating the CenterPoint. This is a dependency property.
            </summary>
            <remarks>
            Provides value of the real co-ordinates of the middle data point.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.SelectedItem">
            <summary>
            Gets or sets a value indicating  the SelectedItem. This is a dependency property.
            </summary>
            <remarks>
            When <see cref="P:Syncfusion.Windows.Chart.ChartSeries.DataSource"/> property is bound to <see cref="T:System.Windows.Data.CollectionView"/>, this property stays in sync with CurrentItem.
            </remarks>
            <value>The SelectedItem.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Highlighted">
            <summary>
            Gets or sets a value indicating whether Highlighted. This is a dependency property.
            </summary>
            <value>The Highlighted.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.BindingPathsY">
            <summary>
            Gets or sets a value indicating the BindingPathsY collection. This is a dependency property.
            </summary>
            <value>The BindingPathsY collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.BindingPathX">
            <summary>
            Gets or sets a value indicating the path that should be used to retrieve X values from DataSource. This is a dependency property.
            </summary>
            <value>The string representation of x values.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Label">
            <summary>
            Gets or sets value indicating how series should be represented in the <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/>. This is a dependency property.
            </summary>
            <remarks>
            Label is generally used to represent series on the legend.
            </remarks>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Setting label in user readable form.
            chart.Areas[0].Series[0].Label = "Sales representation";
            //Setting series name for internal usage.
            chart.Areas[0].Series[0].Name = "Series1";
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            Label="Sales representation"
            Name="Series1"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Unit">
            <summary>
            Gets or Sets UnitProperty
            </summary> 
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.UnitVisibility">
            <summary> 
            Gets or sets UnitVisibility.
            </summary> 
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.InactiveSeriesOpacityOnZoom">
            <summary>
            Gets or sets series' opacity while it's not currently zoomable. This is a
            dependency property.
            </summary>
            <remarks>
            In zooming mode user is asked to pick series to zoom, while all others remains
            unchanged. Inactive zooming series will have <see cref="P:Syncfusion.Windows.Chart.ChartSeries.InactiveSeriesOpacityOnZoom"/> opacity. Default value is 0.25.
            </remarks>
            <example>
            <remarks> In zooming mode user is asked to pick series to zoom, while all others
            remains unchanged. Inactive zooming series will have <see cref="P:Syncfusion.Windows.Chart.ChartSeries.InactiveSeriesOpacityOnZoom"/> opacity. Default value is 0.25. </remarks>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Setting custom opacity for series for inactive zoom mode.
            chart.Areas[0].Series[0].InactiveSeriesOpacityOnZoom = 0.5;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;syncfusion:ChartSeries
            Data="1 1"
            InactiveSeriesOpacityOnZoom="0.5"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsZoomable">
            <summary>
            Gets or sets a value indicating whether series is zoomable. This is a dependency
            property.
            </summary>
            <remarks>
            In zooming mode series IsZoomable property can be set to false to prevent series
            from zooming. <para> However, series will get zoomed anyway if it has common
            axis withseries that is currently zooming. </para>
            </remarks>
            <value>
            <c>true</c> if series gets zoomed on zoom commands, <c>false</c> if series should remain unzoomed. Value changed automatically depending on zooming context menu actions.
            </value>
            <example>
            <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Restricting series from zooming
            chart.Areas[0].Series[0].IsZoomable = false;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            IsZoomable="False"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsVisible">
            <summary>
            Gets or sets a value indicating whether this series is visible. This is a
            dependency property.
            </summary>
            <remarks>
            Invisible series still receives mouse events.
            </remarks>
            <value>
            <c>true</c> if this series is visible; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Making series invisible.
            chart.Areas[0].Series[0].IsVisible = false;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            IsVisible="False"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsIndexed">
            <summary>
            Gets or sets a value indicating whether the points corresponds for indexing of series. This is a dependency property.
            </summary>
            <value><c>true</c> if this series is indexed; otherwise, <c>false</c>.</value>
            <remarks>
            By default points in a series are plotted against their X and Y values.
            However in some cases the X values are meaningless, they simply represent categories,
            and you do not want to plotting the points against such X values are not desired.
            Such an X axis that ignores the X-values and simply uses the positional value of a point in a
            series is said to be Indexed. Series can be shown as indexed if all other series have equal X values.
            </remarks>
            <example>
            C#:
            <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Making series invisible.
            chart.Areas[0].Series[0].IsIndexed = true;
            </code>
            XAML:
            <code language="XAML">
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            IsIndexed="True"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsSortData">
            <summary>
            Gets or sets a value indicating whether the series data is required to be sorted
            </summary>
            <value><c>true</c> if this instance is sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsRotated">
            <summary>
            Gets or sets a value indicating whether series is rotated. This is a dependency
            property.
            </summary>
            <remarks>
            A Rotated series is similar to a regular series. The only difference is that it
            would be rotated.
            </remarks>
            <value>
            <c>true</c> if this series is rotated; otherwise, <c>false</c>.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Making series invisible.
            chart.Areas[0].Series[0].IsRotated = true;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            IsRotated="True"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.XRange">
            <summary>
            Gets range for X axis.
            </summary>
            <remarks>
            Specifies the minimum, maximum and interval for the X-axis. 
            Should be used for data points of <see cref="T:System.Double"/> type.
            </remarks>
            <example>
            C#:
            <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Saving series range for X-Axis.
            DoubleRange serisXAxisRange = chart.Areas[0].Series[0].XRange;
            </code>
            XAML:
            <para>
            This property is not intended to be used from XAML.
            </para>
            </example>
            <value>Value type of <see cref="T:Syncfusion.Windows.Chart.DoubleRange"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.YRange">
            <summary>
            Gets range for Y-axis.
            </summary>
            <remarks>
            Specifies the minimum, maximum and interval for the Y-axis. 
            Should be used for data points of <see cref="T:System.Double"/> type.
            </remarks>
            <example>
            C#:
            <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Saving series range for Y-Axis.
            DoubleRange serisXAxisRange = chart.Areas[0].Series[0].XRange;
            </code>
            XAML:
            <para>
            This property is not intended to be used from XAML.
            </para>
            </example>
            <value>Value type of <see cref="T:Syncfusion.Windows.Chart.DoubleRange"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ZRange">
            <summary>
            ZRange CLR property declaration
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentsInfo">
            <summary>
            Gets or sets the adornments info. Property is intended to customize adornments
            on series. This is a dependency property.
            </summary>
            <value>
            The <see cref="T:Syncfusion.Windows.Chart.ChartAdornmentInfo"/> value.
            </value>
            <example>
            C#: <code language="C#">
            ChartSeries series = new ChartSeries();
            //...
            //Filling series with data.
            //...
            //Setting adornments information
            series.AdornmentsInfo.HorizontalAlignment = HorizontalAlignment.Stretch;
            series.AdornmentsInfo.SegmentLabelFontSize = 20;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3"&gt;
            &lt;syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;syncfusion:ChartAdornmentInfo
            HorizontalAlignment="Stretch"
            SegmentLabelFontSize="20"/&gt;
            &lt;/syncfusion:ChartSeries.AdornmentsInfo&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.LegendIcon">
            <summary>
            Gets or sets the legend icon.
            </summary>
            <value>The legend icon.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.LegendIconTemplate">
            <summary>
            Gets or sets the legend icon template.
            </summary>
            <value>The legend icon template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.InternalLegendIconTemplate">
            <summary>
            Gets or sets the Internal legend icon template.
            </summary>
            <value>The Internal legend icon template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ShowToolTip">
            <summary>
            Get and Set ShowToolTipProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Area">
            <summary>
            Gets the value of the Area. This is a dependency property.
            </summary>
            <remarks>
            Gets area that current series is to be drawn on. When adding series to chart
            area this property is initialized automatically.
            </remarks>
            <value>
            Value is type of <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            // now chart.Areas[0].Series.Area contains parent area.
            </code> XAML: <para> This property is not intended to be used from XAML. </para>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.XAxis">
            <summary>
            Gets or sets X-axis for series. This is a dependency property.
            </summary>
            <remarks>
            By default series binds to <see cref="P:Syncfusion.Windows.Chart.ChartArea.PrimaryAxis"/>. This property
            allows to explicitly set series' X-axis.
            </remarks>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 2 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            chart.Areas[0].Series.Add(new ChartSeries());
            //Creating a new axis.
            ChartAxis xAxis = new ChartAxis();
            //Setting axis' orientation.
            xAxis.Orientation = Orientation.Horizontal;
            //Assigning a new axis to series.
            chart.Areas[0].Series[1].XAxis = xAxis;
            </code> XAML: <code language="XAML">
            &lt;Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Width="300" Height="300"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;syncfusion:ChartSeries Data="5 5 6 6 7 7"&gt;
            &lt;syncfusion:ChartSeries.XAxis&gt;
            &lt;syncfusion:ChartAxis Orientation="Horizontal"/&gt;
            &lt;/syncfusion:ChartSeries.XAxis&gt;
            &lt;syncfusion:ChartSeries.YAxis&gt;
            &lt;syncfusion:ChartAxis Orientation="Vertical"/&gt;
            &lt;/syncfusion:ChartSeries.YAxis&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.YAxis">
            <summary>
            Gets or sets Y-axis for series. This is a dependency property.
            </summary>
            <remarks>
            By default series binds to <see cref="P:Syncfusion.Windows.Chart.ChartArea.PrimaryAxis"/>. This property
            allows to explicitly set series' Y-axis.
            </remarks>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 2 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            chart.Areas[0].Series.Add(new ChartSeries());
            //Creating a new axis.
            ChartAxis xAxis = new ChartAxis();
            //Setting axis' orientation.
            xAxis.Orientation = Orientation.Vertical;
            //Assigning a new axis to series.
            chart.Areas[0].Series[1].YAxis = xAxis;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            IsRotated="True"
            Data="1 1 2 2"/&gt;
            &lt;syncfusion:ChartSeries
            Data="3 3 4 4"&gt;
            &lt;syncfusion:ChartSeries.XAxis&gt;
            &lt;syncfusion:ChartAxis Orientation="Vertical"/&gt;
            &lt;/syncfusion:ChartSeries.XAxis&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ZAxis">
            <summary>
            Get and Set ZAxisProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolInterior">
            <summary>
            Gets or sets the adornment symbol interior.
            </summary>
            <value>The adornment symbol interior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolStroke">
            <summary>
            Gets or sets the adornment symbol Stroke.
            </summary>
            <value>The adornment symbol Stroke.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolStrokeThickness">
            <summary>
            Gets or sets the adornment symbol Stroke Thickness.
            </summary>
            <value>The adornment symbol Stroke Thickness.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.AdornmentSymbolTemplate">
            <summary>
            Gets or sets the adornment symbol template.
            </summary>
            <value>The adornment symbol template.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Data">
            <summary>
            Gets or sets the series data. This is a dependency property.
            </summary>
            <remarks>
            Used to assign data points for series.
            </remarks>
            <value>
            Any collection that implements <see cref="T:Syncfusion.Windows.Chart.IChartData"/> can be assigned.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Adding 1 series to area
            chart.Areas[0].Series.Add(new ChartSeries());
            //Initializing chart points collection.
            ChartListData chartPoints = new ChartListData();
            //Adding point to collection.
            chartPoints.Add(new ChartPoint(1, 1));
            chartPoints.Add(new ChartPoint(2, 2));
            chartPoints.Add(new ChartPoint(3, 3));
            chartPoints.Add(new ChartPoint(4, 4));
            //Assigning chart points collection to series' Data property.
            chart.Areas[0].Series[0].Data = chartPoints;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea.Series&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2 3 3 4 4"/&gt;
            &lt;/syncfusion:ChartArea.Series&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.DataSource">
            <summary>
            Gets or sets the data source. This is a dependency property.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.XValueType">
            <summary>
            Gets the type of the X values of series.
            </summary>
            <value>The type of the X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Type">
            <summary>
            Gets or sets corresponding chart type. This is a dependency property.
            </summary>
            <remarks>
            Chart type can be set from <see cref="T:Syncfusion.Windows.Chart.ChartTypes"/> enumeration.
            </remarks>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series type of Bar.
            ChartSeries series = new ChartSeries(ChartTypes.Bar);
            //Changing type of series to FastLine.
            series.Type = ChartTypes.FastLine;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            //Changing series type back to Bar.
            chart.Areas[0].Series[0].Type = ChartTypes.Bar;
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            Type="Pie"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ChartType">
            <summary>
            Gets or sets the value of the chart Type.  This is a dependency property.
            </summary>
            <remarks>Intended to be used with custom chart types.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Template">
            <summary>
            Gets or sets a template for current series type. THis is a dependency property.
            </summary>
            <remarks>
            Data templates area used to customize look of series' data by overriding the
            default template.
            </remarks>
            <example>
            C#: <code language="C#">
            This property is not intended to be used from C#.
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Data="1 1 2 2"&gt;
            &lt;syncfusion:ChartSeries.Template&gt;
            &lt;DataTemplate&gt;
            &lt;Canvas&gt;
            &lt;Border
            Canvas.Left="{Binding X}"
            Canvas.Top="{Binding Y}"
            Width="{Binding Width}"
            Height="{Binding Height}"
            BorderBrush="White"
            BorderThickness="2"
            CornerRadius="15"&gt;
            &lt;Rectangle Margin="5" Fill="AliceBlue"/&gt;
            &lt;/Border&gt;
            &lt;/Canvas&gt;
            &lt;/DataTemplate&gt;
            &lt;/syncfusion:ChartSeries.Template&gt;
            &lt;/syncfusion:ChartSeries&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Interior">
            <summary>
            Gets or sets interior for series. This is a dependency property.
            </summary>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series type of Bar.
            ChartSeries series = new ChartSeries(ChartTypes.Bar);
            //Setting interior brush for series.
            series.Interior = Brushes.Black;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            Interior="Black"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.FastSegmentProperties">
            <summary>
            Gets or sets the segments interior list.
            </summary>
            <value>The segments interior list.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Stroke">
            <summary>
            Gets or sets the brush that chart series border should be filled. This is a
            dependency property.
            </summary>
            <value>
            The stroke.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series type of Bar.
            ChartSeries series = new ChartSeries(ChartTypes.Bar);
            //Setting stroke brush for series.
            series.Stroke = Brushes.Black;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            Stroke="Black"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness. This is a dependency property.
            </summary>
            <remarks>
            Property corresponds for pen's thickness that outlines chart series.
            </remarks>
            <value>
            The stroke.
            </value>
            <example>
            C#: <code language="C#">
            //Initializing a new chart.
            Chart chart = new Chart();
            //Adding area.
            chart.Areas.Add(new ChartArea());
            //Creating new series type of Bar.
            ChartSeries series = new ChartSeries(ChartTypes.Bar);
            //Setting stroke thickness for series.
            series.StrokeThickness = 5;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            </code> XAML: <code language="XAML">
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries
            StrokeThickness="5"
            Data="1 1 2 2"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Annotations">
            <summary>
            Gets or sets the Annotations collection. This is a dependency property.
            </summary>
            <value>The <see cref="T:Syncfusion.Windows.Chart.AnnotationsCollection"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ShowEmptyPoints">
            <summary>
            Gets or sets a value indicating whether to show empty points.
            </summary>
            <value><c>true</c> if show empty points otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EmptyPointStyle">
            <summary>
            Gets or sets the empty point style.
            </summary>
            <value>The empty point style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.EmptyPointInterior">
            <summary>
            Gets or sets the empty point interior.
            </summary>
            <value>The empty point interior.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.VisibilityOnLegend">
            <summary> 
            Gets or sets IsVisibleOnLegend .It will reflect when IsVisibleOnLegendProperty is true .
            </summary> 
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.IsVisibleOnLegend">
            <summary> 
            Gets or sets IsVisibleOnLegend
            </summary> 
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.OriginDependent">
            <summary>
            Get the CLR proeprty values
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Adornments">
            <summary>
            Gets the adornments collection.
            </summary>
            <value>The adornments.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Segments">
            <summary>
            Gets the Segments. Internal property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.Segments3D">
            <summary>
            Gets the 3D segments.
            </summary>
            <value>The 3D segments collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ActualXAxis">
            <summary>
            Gets actual series X-axis.
            </summary>
            <remarks>
            Gets actual XAxis for series with respect to chart type and <see cref="P:Syncfusion.Windows.Chart.ChartSeries.IsRotated"/> value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ActualYAxis">
            <summary>
            Gets actual series Y-axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.ActualZAxis">
            <summary>
            Gets actual series Z-axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.PointsCount">
            <summary>
            Gets the points series count.  This is a dependency property.
            </summary>
            <value>The points count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.SortDirection">
            <summary>
            Gets or sets Direction for sorting.
            </summary>
            <value>Enum values Ascending/Descending</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.SortBy">
            <summary>
            Get and Set SortByProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartSeries.DataModel">
            <summary>
            Gets or Sets the DataModel property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSeries.Mode">
            <summary>
            Enum  values for ChartSeries Modes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.Mode.Fixed">
            <summary>
            Enum value for fixed mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartSeries.Mode.Relative">
            <summary>
            Enum value for relative mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAreaCommands">
            <summary>
            Represents commands that can be invoked on <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.
            </summary>
            <remarks>
            Commanding is an input mechanism in Windows Presentation Foundation 
            which provides input handling at a more semantic level than device input.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAreaCommands"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_zoomIn">
            <summary>
            Identifies ZoomIn routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_zoomOut">
            <summary>
            Identifies ZoomOut routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_zoomReset">
            <summary>
            Identifies ZoomReset routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_switchZooming">
            <summary>
            Identifies SwitchZooming routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_changePalette">
            <summary>
            Identifies ChangePalette routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_zoomSector">
            <summary>
            Identifies ZoomSector routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_calcelZooming">
            <summary>
            Identifies CancelZooming routed UI command.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAreaCommands.c_zoomPanning">
            <summary>
            Identifies ZoomPanning routed UI command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.CancelZooming">
            <summary>
            Gets the cancel zooming UI command.
            </summary>
            <remarks>
            When chart area is in zooming mode, this command can be used to switch off zooming mode for <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.
            </remarks>
            <value>The cancel zooming <see cref="T:System.Windows.Input.RoutedUICommand"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomIn">
            <summary>
            Gets the zoom in routed UI command.
            </summary>
            <remarks>
            Command should be used to zoom in the chart area.
            </remarks>
            <value>The zoom in <see cref="T:System.Windows.Input.RoutedUICommand"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomOut">
            <summary>
            Gets the zoom out routed UI command.
            </summary>
            <remarks>
            Command should be used to zoom out the chart area.
            </remarks>
            <value>The zoom out <see cref="T:System.Windows.Input.RoutedUICommand"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomReset">
            <summary>
            Gets the zoom reset routed UI command.
            </summary>
            <remarks>
            Command should be used to reset zoom on the chart area.
            </remarks>
            <value>The zoom reset <see cref="T:System.Windows.Input.RoutedUICommand"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.SwitchZooming">
            <summary>
            Gets the enable zooming mode routed UI command.
            </summary>
            <remarks>
            Command should be used to enable zooming mode on <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>.
            </remarks>
            <value>The <see cref="T:System.Windows.Input.RoutedUICommand"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomSector">
            <summary>
            Gets the ZoomSector command. Use <see cref="P:System.Windows.Input.ICommandSource.CommandParameter"/> for set the sector. 
            Type of parameter should be <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ChangePalette">
            <summary>
            Gets the Change palette command. Use <see cref="P:System.Windows.Input.ICommandSource.CommandParameter"/> for set the palette.
            Type of parameter should be <see cref="T:Syncfusion.Windows.Chart.ChartColorPalette"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ChangeStyle">
            <summary>
            ChangeStyle CLR property declaration 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAreaCommands.ZoomPanning">
            <summary>
            Gets the Zoom Panning routed UI command.
            </summary>
            <remarks>
            Command should be used to Pan the Zoomed chart area.
            </remarks>
            <value>The Zoom Panning <see cref="T:System.Windows.Input.RoutedUICommand"/>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBindingData">
            <summary>
            Represents chart binding data class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IChartData">
            <summary>
            Represents strongly typed Chart datapoints collection.
            </summary>
            <remarks>
            Interface defines methods and properties that are required for proper chart
            building.
            </remarks>
            <example>
            This sample demonstrates how interface can be implemented: C#: <code language="C#">
            class CustomPoint : IChartDataPoint
            {
            public CustomPoint(double X, double Y)
            {
            this.X = X;
            this.Y = Y;
            this.Values = new double[] {Y};
            }
            public double X {get; set;}
            public double Y {get; set;}
            public double[] Values {get; set;}
            public bool IsEmpty {get; set;}
            public bool Visible {get; set;}
            public ChartSegment ParentSegment {get; set;}
            public object Item {get; set;}
            public object Clone()
            {
            CustomPoint customPoint = new CustomPoint(this.X, this.Y);
            //...
            // Filling proper fields.
            //...
            return customPoint;
            }
            }
            // Custom collection strongly typed as CustomPoint that implements IChartData.
            class CustomChartPointsCollection : ObservableCollection &lt;CustomPoint&gt;,
            IChartData
            {
            public new IChartDataPoint this[int index]
            {
            get { return base[index]; }
            }
            public ChartValueType XValueType { get; set; }
            }
            //Using classes
            //...
            //Creating a new chart1 with area and series.
            //...
            CustomChartPointsCollection customCollection = new
            CustomChartPointsCollection();
            customCollection.Add(new CustomPoint(1, 3));
            customCollection.Add(new CustomPoint(2, 5));
            customCollection.Add(new CustomPoint(3, 2));
            customCollection.Add(new CustomPoint(4, 8));
            chart1.Areas[0].Series[0].Data = customCollection;
            </code> XAML: <code>
            <para>
            This type is not intended to be used from XAML.
            </para>
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData">ChartListData</seealso>
            
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartData.Count">
            <summary>
            Gets the points count.
            </summary>
            <value>Total points count</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartData.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Chart.IChartDataPoint"/> at the specified index.
            </summary>
            <param name="index">The index value</param>
            <value><see cref="T:Syncfusion.Windows.Chart.IChartDataPoint"/> point at specified index.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartData.XValueType">
            <summary>
            Gets the type of the X value.
            </summary>
            <value>Value can be set from one of <see cref="T:Syncfusion.Windows.Chart.ChartValueType"/> enumeration.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartData.ChartXValueType">
            <summary>
            Gets or Sets the type of the Chart X value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingData.m_source">
            <summary>
            Initializes m_source
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingData.m_xPath">
            <summary>
            Initializes m_xPath
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingData.m_valuesPath">
            <summary>
            Initializes m_valuesPath
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingData.m_xValueType">
            <summary>
            Declares m_xValueType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingData.m_isInitializeEnable">
            <summary>
            Initializes m_isInitializeEnable
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingData.m_points">
            <summary>
            Initializes m_points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.WireSource(System.Collections.IEnumerable)">
            <summary>
            Wires the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.DataObjectPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The DataObjectPropertyChanged method
            </summary>
            <param name="sender">The object sender</param>
            <param name="e">The PropertyChangedEvent Argument</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.UnwireSource(System.Collections.IEnumerable)">
            <summary>
            Unwires the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.OnChartSeriesDataCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when data source is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.ResetPoints">
            <summary>
            Resets the points.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.RefreshPoints">
            <summary>
            Refreshes the points.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingData.GetPoint(System.Int32,System.Object)">
            <summary>
            Gets the point.
            </summary>
            <param name="index">The index value.</param>
            <param name="obj">The obj value.</param>
            <returns>Returns the ChartDataPoint</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.XPath">
            <summary>
            Gets or sets the X path.
            </summary>
            <value>The X path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.YPaths">
            <summary>
            Gets or sets the Y paths.
            </summary>
            <value>The Y paths.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.XValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.ChartXValueType">
            <summary>
            Get and Set ChartXValueTypeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.Count">
            <summary>
            Gets the chart points count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingData.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Chart.IChartDataPoint"/> at the specified index.
            </summary>
            <param name="index">The index value</param>
            <returns>The Chart Data point</returns>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartBindingData.CollectionChanged">
            <summary>
            Occurs when data is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBindingDataExtension">
            <summary>
            Represents ChartBindingDataExtension
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingDataExtension.M_splitter">
            <summary>
            Initializes m_splitter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingDataExtension.m_source">
            <summary>
            Initializes m_source
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingDataExtension.m_xPath">
            <summary>
            Initializes m_xPath
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartBindingDataExtension.m_yPaths">
            <summary>
            Initializes m_yPaths
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingDataExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartBindingDataExtension"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingDataExtension.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartBindingDataExtension"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBindingDataExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingDataExtension.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingDataExtension.XPath">
            <summary>
            Gets or sets the X path.
            </summary>
            <value>The X path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBindingDataExtension.YPaths">
            <summary>
            Gets or sets the Y paths.
            </summary>
            <value>The Y paths.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IChartDataPoint">
            <summary>
            Represents chart point interface that any chart point should implement.
            </summary>
            <remarks>
            Interface defines methods and properties that are required for proper chart
            building.
            </remarks>
            <example>
            This sample demonstrates how interface can be implemented: C#: <code language="C#">
            class CustomPoint : IChartDataPoint
            {
            public CustomPoint(double X, double Y)
            {
            this.X = X;
            this.Y = Y;
            this.Values = new double[] {Y};
            }
            public double X {get; set;}
            public double Y {get; set;}
            public double[] Values {get; set;}
            public bool IsEmpty {get; set;}
            public bool Visible {get; set;}
            public ChartSegment ParentSegment {get; set;}
            public object Item {get; set;}
            public object Clone()
            {
            CustomPoint customPoint = new CustomPoint(this.X, this.Y);
            //...
            // Filling proper fields.
            //...
            return customPoint;
            }
            }
            // Custom collection strongly typed as CustomPoint that implements IChartData.
            class CustomChartPointsCollection : ObservableCollection &lt;CustomPoint&gt;,
            IChartData
            {
            public new IChartDataPoint this[int index]
            {
            get { return base[index]; }
            }
            public ChartValueType XValueType { get; set; }
            }
            //Using classes
            //...
            //Creating a new chart1 with area and series.
            //...
            CustomChartPointsCollection customCollection = new
            CustomChartPointsCollection();
            customCollection.Add(new CustomPoint(1, 3));
            customCollection.Add(new CustomPoint(2, 5));
            customCollection.Add(new CustomPoint(3, 2));
            customCollection.Add(new CustomPoint(4, 8));
            chart1.Areas[0].Series[0].Data = customCollection;
            </code> XAML: <code>
            <para>
            This type is not intended to be used from XAML.
            </para>
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData">ChartListData</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.X">
            <summary>
            Gets or sets the X point value.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.Y">
            <summary>
            Gets or sets the Y point value.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.Values">
            <summary>
            Gets or sets the point values.
            </summary>
            <remarks>
            Values array should be used to represent range of Y values that correspond to one X value.
            </remarks>
            <value>The values.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.IsEmpty">
            <summary>
            Gets a value indicating whether this point is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Chart.IChartDataPoint"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.ParentSegment">
            <summary>
            Gets or sets the parent segment.
            </summary>
            <remarks>
            Parent segment for point should be set in order to provide user with ability to disable certain points on series.
            <para>
            Should not use this property if dynamic points hiding is not required.
            </para>
            </remarks>
            <value>The parent segment <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.Item">
            <summary>
            Gets or sets the item that point represents. Item could be ether X,Y of custom value.
            </summary>
            <value>The item that point represent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.Tag">
            <summary>
            Gets or sets the Tag that point represents. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.StringItem">
            <summary>
            Get or Sets the StringItem that point represents
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.Label">
            <summary>
            Gets or sets label for point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartDataPoint.EmptyPoint">
            <summary>
            Gets or sets a value indicating whether empty point.
            </summary>
            <value><c>true</c> if empty point otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPointBase">
            <summary>
            Represents chart point base class that any chart point may implement.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData"/>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointBase.Clone">
            <summary>
            Creates a new point that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPointBase.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.Item">
            <summary>
            Gets or sets the item that point represents. Item could be ether X,Y of custom value.
            </summary>
            <value>The item value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.Tag">
            <summary>
            Gets or sets the Tag that point represents. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.StringItem">
            <summary>
            Gets or sets the item that points represents string values.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.ParentSegment">
            <summary>
            Gets or sets the parent segment.
            </summary>
            <value>The parent segment <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/>.</value>
            <remarks>
            Parent segment for point should be set in order to provide user with ability to disable certain points on series.
            <para>
            Should not use this property if dynamic points hiding is not required.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Chart.IChartDataPoint"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.X">
            <summary>
            Gets or sets the X point value.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.Values">
            <summary>
            Gets or sets the point values.
            </summary>
            <value>The values.</value>
            <remarks>
            Values array should be used to represent range of Y values that correspond to one X value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.Y">
            <summary>
            Gets or sets the Y point value.
            </summary>
            <value>The Y value that point represents.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.IsEmpty">
            <summary>
            Gets a value indicating whether this point is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.DateTimeX">
            <summary>
            Gets the <see cref="T:System.DateTime"/> X.
            </summary>
            <value>The date time X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.Label">
            <summary>
            Gets or sets label for the point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPointBase.EmptyPoint">
            <summary>
            Gets or sets a value indicating whether empty point.
            </summary>
            <value><c>true</c> if empty point otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMouseEventHandler">
            <summary>
            Represents Chart mouse actions event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The ChartMouseEventArgs</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartMouseEventHandler"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisRangeEventHandler">
            <summary>
            Represents Chart axis range event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The ChartMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartToolBarEventHandler">
            <summary>
            Represents Chart ToolBar event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The ChartMouseEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertyWindowEventHandler">
            <summary>
            Delegate declaration for ChartPropertyWindowEventHandler
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertyWindowCancelEventHandler">
            <summary>
            Delegate declaration for ChartPropertyWindowCancelEventHandler
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSegmentDragEventHandler">
            <summary>
            Represents Chart Segment event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The SegmentDragEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TypeChangingEventHandeler">
            <summary>
            Delegate declaration for TypeChangingEventHandeler
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartSegmentDropEventHandler">
            <summary>
            Represents Chart Segment event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The SegmentDropEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationDragEventHandler">
            <summary>
            Represents Chart Annotation event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The ChartAnnotationDragEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationDropEventHandler">
            <summary>
            Represents Chart Annotation event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The ChartAnnotationDropEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpChartScrollPositionEventHandler">
            <summary>
            Represents for QtpChartScrollPosition EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpChartZoomedEventHandler">
            <summary>
            Represents QtpChartZoomed EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpChartZoomedOutEventHandler">
            <summary>
            Represents QtpChartZoomedOut EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpChartPanningEventHandler">
            <summary>
            Represents QtpChartPanning EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpChartZoomResetEventHandler">
            <summary>
            Represents QtpChartZoomedReset EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpChartZoomSectorEventHandler">
            <summary>
            Represents for QtpChartZoomSector EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpLegendLocationChangedEventHandler">
            <summary>
            Represents for QtpLegendLocationChanged EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.QtpInteracitveCursorLocationChangedEventHandler">
            <summary>
            Represents QtpInteracitveCursorLocationChanged EventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisRangeArgs">
            <summary>
            Represents chart axis range event arguments.
            </summary>
            <remarks>
            Both Primary and Secondary Axis comes with Rangechanged event. This event occurs
            when the Range of the axis is changed. We could get the old and new range from
            the RangeChanged event.
            </remarks>
            <example>
            <code language="C#">
             Chart1.Areas[0].PrimaryAxis.RangeChanged +=new
            ChartAxisRangeEventHandler(PrimaryAxis_RangeChanged);
            void PrimaryAxis_RangeChanged(object sender, ChartAxisRangeArgs e)
             {
                  Console.WriteLine (e.NewValue.ToString();
             }
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisRangeArgs"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisRangeArgs.m_oldValue">
            <summary>
            Initializes DoubleRange m_oldValue
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisRangeArgs.m_newValue">
            <summary>
            Initializes DoubleRange m_newValue
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisRangeArgs.m_axis">
            <summary>
            Initializes ChartAxis m_axis
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisRangeArgs.#ctor(Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAxisRangeArgs"/> class.
            </summary>
            <param name="axis">The axis value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisRangeArgs.OldValue">
            <summary>
            Gets the old range value.
            </summary>
            <value>The range old value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisRangeArgs.NewValue">
            <summary>
            Gets the range new value.
            </summary>
            <value>The new range value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartToolBarArgs">
            <summary>
            Represents Chart ToolBar event arguments.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarArgs.m_oldValue">
            <summary>
            Initializes m_oldValue
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarArgs.m_newValue">
            <summary>
            Initializes m_newValue
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarArgs.m_toolBar">
            <summary>
            Initializes m_toolBar
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBarArgs.#ctor(Syncfusion.Windows.Chart.ChartToolBar,Syncfusion.Windows.Chart.ToolBarItem,Syncfusion.Windows.Chart.ToolBarItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartToolBarArgs"/> class.
            </summary>
            <param name="chartToolBar">The ChartToolBar.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarArgs.OldValue">
            <summary>
            Gets the old ToolBarItem value.
            </summary>
            <value>The ToolBarItem old value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarArgs.NewValue">
            <summary>
            Gets the ToolBarItem new value.
            </summary>
            <value>The new ToolBarItem value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertyWindowEventArgs">
            <summary>
            Class implementation for ChartPropertyWindowEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyWindowEventArgs.#ctor(Syncfusion.Windows.Chart.PropertyWindow)">
            <summary>
            Called when instance created for ChartPropertyWindowEventArgs
            </summary>
            <param name="_chartPropertyWindow"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPropertyWindowEventArgs.PropertyWindow">
            <summary>
            Get and Set PropertyWindowProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertyWindowCancelEventArgs">
            <summary>
            Class implementation for ChartPropertyWindowCancelEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyWindowCancelEventArgs.#ctor(Syncfusion.Windows.Chart.PropertyWindow)">
            <summary>
            Called when instance created for ChartPropertyWindowCancelEventArgs
            </summary>
            <param name="_chartPropertyWindow"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPropertyWindowCancelEventArgs.PropertyWindow">
            <summary>
            Get and Set PropertyWindow Property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMouseEventArgs">
            <summary>
            Represents chart mouse click event arguments.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMouseEventArgs.m_segment">
            <summary>
            Initializes m_segment
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMouseEventArgs.m_mouseArgs">
            <summary>
            Initializes m_mouseArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMouseEventArgs.#ctor(System.Windows.Input.MouseEventArgs,Syncfusion.Windows.Chart.ChartSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartMouseEventArgs"/> class.
            </summary>
            <param name="args">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
            <param name="segment">The segment.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartMouseEventArgs"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartMouseEventArgs.Segment">
            <summary>
            Gets the segment.
            </summary>
            <value>The segment.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartMouseEventArgs.MouseEventArgs">
            <summary>
            Gets the mouse event args.
            </summary>
            <value>The mouse event args.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TypeChangingEventArgs">
            <summary>
            Class implementation for TypeChangingEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.TypeChangingEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Contructor implementation for TypeChangingEventArgs
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TypeChangingEventArgs.OldValue">
            <summary>
            Get and Set OldValue property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.TypeChangingEventArgs.NewValue">
            <summary>
            Get and Set NewValue property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisChangedEventArgs">
            <summary>
            Represents ChartAxis changed event arguments class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisChangedEventArgs.m_propertyChangedArgs">
            <summary>
            Initializes m_propertyChangedArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.AxisChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.AxisChangedEventArgs.#ctor(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.AxisChangedEventArgs"/> class.
            </summary>
            <param name="dependencyPropertyChangedEventArgs">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.AxisChangedEventArgs.DependencyPropertyEventArgs">
            <summary>
            Gets the dependency property event args.
            </summary>
            <value>The dependency property event args.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationDragEventArgs">
            <summary>
            Class implementation for ChartAnnotationDragEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationDragEventArgs.#ctor(Syncfusion.Windows.Chart.ChartAnnotationLabel)">
            <summary>
            Constructor for ChartAnnotationDragEventArgs
            </summary>
            <param name="annotLabel"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationDragEventArgs.label">
            <summary>
            Get and Set label property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAnnotationDropEventArgs">
            <summary>
            Class implementation for ChartAnnotationDropEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAnnotationDropEventArgs.#ctor(Syncfusion.Windows.Chart.ChartAnnotationLabel)">
            <summary>
            Constructor for ChartAnnotationDropEventArgs
            </summary>
            <param name="annotLabel"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAnnotationDropEventArgs.label">
            <summary>
            Get and Set label property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SegmentDragEventArgs">
            <summary>
            Class implementation for SegmentDragEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SegmentDragEventArgs.#ctor(Syncfusion.Windows.Chart.ChartSegment)">
            <summary>
            Constructor implementation for SegmentDragEventArgs
            </summary>
            <param name="argSegment"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SegmentDragEventArgs.segment">
            <summary>
            Get or Set segment property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SegmentDropEventArgs">
            <summary>
            Class implementation for SegmentDropEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SegmentDropEventArgs.#ctor(Syncfusion.Windows.Chart.ChartSegment)">
            <summary>
            Constructor implementaion for SegmentDropEventArgs
            </summary>
            <param name="oldSegment"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SegmentDropEventArgs.OldSegment">
            <summary>
            Get and Set OldSegment property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartScrollEventArgs">
            <summary>
            Class implementation for ChartScrollEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartScrollEventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Construtor for ChartScrollEventArgs
            </summary>
            <param name="area"></param>
            <param name="axis"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartScrollEventArgs.chartarea">
            <summary>
            Get and Set Chartarea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartScrollEventArgs.chartaxis">
            <summary>
            get and Set chartaxis property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomedEventArgs">
            <summary>
            Class implementation for ChartZoomedEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomedEventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            constructor for ChartZoomedEventArgs
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomedEventArgs.chartarea">
            <summary>
            Get and Set chartarea property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomedOutEventArgs">
            <summary>
            Class implementation for ChartZoomedOutEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomedOutEventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Constructor for ChartZoomedOutEventArgs
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomedOutEventArgs.chartarea">
            <summary>
            Get and Set chartarea property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPanningEventArgs">
            <summary>
            Class implementation for ChartPanningEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPanningEventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Called when instance created for ChartPanningEventArgs
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPanningEventArgs.chartarea">
            <summary>
            Get and Set chartarea property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomReseteventArgs">
            <summary>
            Class implementation for ChartZoomReseteventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomReseteventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea)">
            <summary>
            Called when instance created for ChartZoomReseteventArgs
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomReseteventArgs.chartarea">
            <summary>
            Get and Set chartarea property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartZoomSectorEventArgs">
            <summary>
            Class implementation for ChartZoomSectorEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartZoomSectorEventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea,System.Windows.Rect)">
            <summary>
            Called when instance created for ChartZoomSectorEventArgs
            </summary>
            <param name="area"></param>
            <param name="sectorargs"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomSectorEventArgs.chartarea">
            <summary>
            Gets or Sets the chartarea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartZoomSectorEventArgs.SectorArgs">
            <summary>
            Gets or Sets the SectorArgs property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LegendLocationChangedeventArgs">
            <summary>
            RoutedEvent Class implementation for LegendLocationChangedeventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LegendLocationChangedeventArgs.#ctor(Syncfusion.Windows.Chart.ChartLegend)">
            <summary>
            Get or Set 
            </summary>
            <param name="legend"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.LegendLocationChangedeventArgs.legend">
            <summary>
            Get or Set legend property 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.CursorLocationChangedeventArgs">
            <summary>
            Class implementation for CursorLocationChangedeventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.CursorLocationChangedeventArgs.#ctor(Syncfusion.Windows.Chart.ChartArea,Syncfusion.Windows.Chart.InteractiveCursor,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Called when instance created for CursorLocationChangedeventArgs
            </summary>
            <param name="area"></param>
            <param name="cursor"></param>
            <param name="axis"></param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.CursorLocationChangedeventArgs.area">
            <summary>
            Gets or Sets area property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.CursorLocationChangedeventArgs.cursor">
            <summary>
            Gets or Sets the cursorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.CursorLocationChangedeventArgs.axis">
            <summary>
            Gets or sets the  axis property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartListData">
            <summary>
            Represents Chart List data class. The ChartListData observable collection is used to add data points to chart series
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartListData.m_xValueType">
            <summary>
            Initializes m_xValueType
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListData.AddPoint(System.Double,System.Double)">
            <summary>
            Adds the point.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListData.AddPoint(System.Double,System.Double[])">
            <summary>
            Adds the point.
            </summary>
            <param name="x">The x value.</param>
            <param name="yValues">The y values.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListData.AddPoint(System.DateTime,System.Double)">
            <summary>
            Adds the point.
            </summary>
            <param name="xDate">The x date.</param>
            <param name="y">The y value.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListData.AddPoint(System.DateTime,System.Double[])">
            <summary>
            Adds the point.
            </summary>
            <param name="xDate">The x date.</param>
            <param name="yValues">The y values.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartListData"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartListData.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartListData.XValueType">
            <summary>
            Gets the type of the X value.
            </summary>
            <value>The type of the X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartListData.ChartXValueType">
            <summary>
            Gets or Sets the type of the Chart X value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPoint">
            <summary>
            Represents Chart point class. The chart point that WPF chart system uses to build series.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPoint"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.VisibleProperty">
            <summary>
            Identifies the Visible dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.m_StringItem">
            <summary>
            Initializes m_StringItem
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.m_label">
            <summary>
            Initializes m_label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.m_x">
            <summary>
            Initializes m_x
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.m_values">
            <summary>
            Initializes m_values
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.m_item">
            <summary>
            Initializes m_item
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPoint.m_emptyPoint">
            <summary>
            Declared m_emptyPoint
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPoint"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.#ctor(System.Double,System.Double[],System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPoint"/> class.
            </summary>
            <param name="x">The x value.</param>
            <param name="values">The values.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.#ctor(System.Double,System.Double,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPoint"/> class.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.#ctor(System.Double,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPoint"/> class.
            </summary>
            <param name="x">The X value.</param>
            <param name="values">Array of values that correspond to X.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPoint"/> class.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.#ctor(System.Double,System.Double,System.Double[])">
            <summary>
            Called when instance created for ChartPoint
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="values"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.DisposePoint">
            <summary>
            Remove All elements from the ChartPoint
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPoint.OnVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when Visible property changes. Invalidates parent series.
            </summary>
            <param name="dObj">The DependencyObject dObj</param>
            <param name="args">The DependencyPropertyChangedEventArgs args</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.Tag">
            <summary>
            Gets object initially wrapped by this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.ParentSegment">
            <summary>
            Gets or sets parent segment for point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.Visible">
            <summary>
            Gets or sets visibility of point. Affects Pie, Doughnut, Pyramid and Funel chart types only. This is dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.Values">
            <summary>
            Gets or sets the values array that correspond to X.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.StringItem">
            <summary>
            Gets or sets the item that points represents string values.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.IsEmpty">
            <summary>
            Gets a value indicating whether this point is empty.
            </summary>
            <value><c>true</c> if this point is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.Label">
            <summary>
            Gets or sets the Label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPoint.EmptyPoint">
            <summary>
            Gets or sets a value indicating whether empty point.
            </summary>
            <value><c>true</c> if empty point otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartPoint.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartIndexedDataPoint">
            <summary>
            Represents indexed chart point
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartIndexedDataPoint.m_index">
            <summary>
            Initializes m_index
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartIndexedDataPoint.m_dataPoint">
            <summary>
            Initializes m_dataPoint
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartIndexedDataPoint.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartIndexedDataPoint">ChartIndexedDataPoint</see> structure. 
            </summary>
            <param name="chartPoint">The chart point.</param>
            <param name="index">Index of point.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartIndexedDataPoint.Index">
            <summary>
            Gets index of point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartIndexedDataPoint.DataPoint">
            <summary>
            Gets chart point.
            </summary>
            <value>The data point.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastReflectionCaches">
            <summary>
            Class implementation for FastReflectionCaches
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastReflectionCaches.MethodInvokerCache">
            <summary>
            Get or Set MethodInvokerCache
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastReflectionCaches.PropertyAccessorCache">
            <summary>
            Get or Set PropertyAccessorCache property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MethodInvokerCache">
            <summary>
            Class implementation for MethodInvokerCache
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastReflectionCache`2">
            <summary>
            Class implementation for FastReflectionCache 
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IFastReflectionCache`2">
            <summary>
            Interface implementation for IFastReflectionCache
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IFastReflectionCache`2.Get(`0)">
            <summary>
            Get method declaration for IFastReflectionCache method 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastReflectionCache`2.Get(`0)">
            <summary>
            Get method declaration for IFastReflectionCache method 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.FastReflectionCache`2.Create(`0)">
            <summary>
            FastReflectionCache(TKey, TValue).Create Method 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MethodInvokerCache.Create(System.Reflection.MethodInfo)">
            <summary>
            Return the IMethodInvoker Value from the given MethodInfo
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.FastReflectionFactories">
            <summary>
            Class implementation for FastReflectionFactories
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.FastReflectionFactories.MethodInvokerFactory">
            <summary>
            Get or Set MethodInvokerFactory property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MethodInvokerFactory">
            <summary>
            Class implementation for MethodInvokerFactory
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IFastReflectionFactory`2">
            <summary>
            Interface implementation for IFastReflectionFactory
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IFastReflectionFactory`2.Create(`0)">
            <summary>
            Create method declaration for IFastReflectionFactory interface
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MethodInvokerFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Return IMethodInvoker value from the given MethodInfo
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IPropertyAccessor">
            <summary>
            Interface IPropertyAccessor implementation 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IPropertyAccessor.GetValue(System.Object)">
            <summary>
            GetValue method declaration in IPropertyAccessor interface
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IPropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            SetValue method declaration in IPropertyAccessor interface
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PropertyAccessorCache">
            <summary>
            Represents PropertyAccessorCache class 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyAccessorCache.Create(System.Reflection.PropertyInfo)">
            <summary>
            Return the IPropertyAccessor Value from the given PropertyInfo
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.PropertyAccessor">
            <summary>
             Represents PropertyAccessor class 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Called when instance created for PropertyAccessor
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyAccessor.GetValue(System.Object)">
            <summary>
            return object value from the given object
            </summary>
            <param name="o"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            Non-return method implementation for Setvalue
            </summary>
            <param name="o"></param>
            <param name="value"></param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Syncfusion.Windows.Chart.PropertyAccessor.PropertyInfo">
            <summary>
            Get and Set PropertyInfoProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IMethodInvoker">
            <summary>
            Interface implementation for IMethodInvoker
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IMethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            Invoke Method declaration for IMethodInvoker Interface
            </summary>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MethodInvoker">
            <summary>
            Class implementation for MethodInvoker
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MethodInvoker.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Called when instance created for MethodInvoker
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            Return object from the given objects
            </summary>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.MethodInvoker.MethodInfo">
            <summary>
            Get or Set MethodInfo property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IChartTransformer">
            <summary>
            Represents IChartTransformer
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IChartTransformer.TransformToVisible(System.Double,System.Double)">
            <summary>
            Transforms chart cordinates to real coordinates.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>Visible point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.IChartTransformer.TransformToVisible(System.Double,System.Double,System.Double)">
            <summary>
            Transforms chart cordinates to real coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.IChartTransformer.Viewport">
            <summary>
            Gets the viewport.
            </summary>
            <value>The viewport.</value>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTransform">
            <summary>
            Represents ChartTransform
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.CreateSimple(System.Windows.Rect)">
            <summary>
            Creates the Cartesian transformer.
            </summary>
            <param name="viewport">The viewport.</param>
            <returns>The Chart Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.CreateCartesian(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Creates the Cartesian transformer.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="series">The series.</param>
            <returns>The Cartesian Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.CreateCartesian(System.Windows.Rect,Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Creates the Cartesian transformer.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param> 
            <returns>The Cartesian Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.CreatePolar(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Creates the polar.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="series">The series.</param>
            <returns>The Polar Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.CreateTransformer(Syncfusion.Windows.Chart.ChartAxesType,System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Creates the transformer.
            </summary>
            <param name="axesType">Type of the axes.</param>
            <param name="viewport">The viewport.</param>
            <param name="series">The series.</param>
            <returns>The Transformer</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.CoefficientToVector(System.Double)">
            <summary>
            Coefficients to vector.
            </summary>
            <param name="coefficient">The coefficient.</param>
            <returns>The vector value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ValueToAngle(Syncfusion.Windows.Chart.ChartAxis,System.Double)">
            <summary>
            Values to angle.
            </summary>
            <param name="axis">The axis value.</param>
            <param name="value">The double value.</param>
            <returns>Returns the angle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ValueToVector(Syncfusion.Windows.Chart.ChartAxis,System.Double)">
            <summary>
            Values to vector.
            </summary>
            <param name="axis">The axis value.</param>
            <param name="value">The value.</param>
            <returns>The vector value</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTransform.ChartSimpleTransformer">
            <summary>
            Represents ChartSimpleTransformer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartSimpleTransformer.m_viewport">
            <summary>
            Initializes m_viewport
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartSimpleTransformer.#ctor(System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartTransform.ChartSimpleTransformer"/> class.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartSimpleTransformer.TransformToVisible(System.Double,System.Double)">
            <summary>
            Transforms chart cordinates to real coordinates.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>visible point</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTransform.ChartSimpleTransformer.Viewport">
            <summary>
            Gets the viewport.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer">
            <summary>
            Represents ChartCartesianTransformer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.m_viewport">
            <summary>
            Initializes m_viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.m_xAxis">
            <summary>
            Initializes m_xAxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.m_yAxis">
            <summary>
            Initializes m_yAxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.m_isRotated">
            <summary>
            Initializes m_isRotated
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.#ctor(System.Windows.Rect,Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer"/> class.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.#ctor(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer"/> class.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.TransformToVisible(System.Double,System.Double)">
            <summary>
            Transforms chart cordinates to real coordinates.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The visible point</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTransform.ChartCartesianTransformer.Viewport">
            <summary>
            Gets the viewport.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer">
            <summary>
            Represents ChartPolarTransformer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.m_viewport">
            <summary>
            Initializes m_viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.m_xAxis">
            <summary>
            Initializes m_xAxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.m_yAxis">
            <summary>
            Initializes m_yAxis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.m_center">
            <summary>
            Initializes m_center
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.m_radius">
            <summary>
            Initializes m_radius
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.#ctor(System.Windows.Rect,Syncfusion.Windows.Chart.ChartAxis,Syncfusion.Windows.Chart.ChartAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer"/> class.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.#ctor(System.Windows.Rect,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer"/> class.
            </summary>
            <param name="viewport">The viewport.</param>
            <param name="series">The series.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.TransformToVisible(System.Double,System.Double)">
            <summary>
            Transforms chart cordinates to real coordinates.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>The visible point</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTransform.ChartPolarTransformer.Viewport">
            <summary>
            Gets the viewport.
            </summary>
            <value>The viewport.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeatMapControl">
            <summary>
            Control that lays out bound child items in rectangles whose area is based on
            their "weight" and whose color is based on their "color weight". Can also be
            bound to hierarchical data.
            </summary>
            <example>
            <code language="XAML">
             &lt;syncfusion:HeatMapControl Name="heatMap"
                                          LowestWeightColor="ForestGreen"
                                          MedianWeightColor="YellowGreen"
                                          HighestWeightColor="IndianRed" Margin="20"&gt;
                  &lt;!--Adding HeatMapItem--&gt;
                         &lt;syncfusion:HeatMapItem Weight="1000" ColorWeight="400"
            Level="0"&gt;
                                &lt;syncfusion:HeatMapItem Weight="500" Header="US:New York"
            ColorWeight="200" Level="1"&gt;
                                     &lt;syncfusion:HeatMapItem Header="NY : Albany"
            Weight="50" ColorWeight="15" Level="2" /&gt;
                                     &lt;syncfusion:HeatMapItem Header="NY : Buffalo"
            Weight="60" ColorWeight="20" Level="2" /&gt;
                                     &lt;syncfusion:HeatMapItem Header="NY : Rochester"
            Weight="55" ColorWeight="12" Level="2" /&gt;
                                &lt;/syncfusion:HeatMapItem&gt;
                                &lt;syncfusion:HeatMapItem Weight="200" Header="US:North
            Carolina" ColorWeight="100" Level="1" /&gt;
                                &lt;syncfusion:HeatMapItem Weight="100"
            Header="US:Louisiana" ColorWeight="90" Level="1" /&gt;
                                &lt;syncfusion:HeatMapItem Weight="280" Header="US:Florida"
            ColorWeight="65" Level="1" /&gt;
                         &lt;/syncfusion:HeatMapItem&gt;
                         &lt;syncfusion:HeatMapItem Weight="800" Header="Canada"
            ColorWeight="600" Level="0" /&gt;
                         &lt;syncfusion:HeatMapItem Weight="400" Header="Mexico"  Level="0"
            ColorWeight="200" /&gt;
                         &lt;syncfusion:HeatMapItem Weight="300" Header="Brazil" Level="0" 
            ColorWeight="100" /&gt;
                    &lt;/syncfusion:HeatMapControl&gt;
                    </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.HeatMapItem"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.TextIntersectActionProperty">
            <summary>
             Identifies the TextIntersectAction dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.IsGradientBrushProperty">
            <summary>
             Identifies the IsGradientBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.LowestWeightGradientProperty">
            <summary>
             Identifies the LowestWeightGradient dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightGradientProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.HighestWeightGradientProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.HighestWeightColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.LabelFontSizeProperty">
            <summary>
             Identifies the LabelFontSize dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.WeightValuePathProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.WeightValuePath"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.ColorValuePathProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.ColorValuePath"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.PreferredItemsPanelWidthProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.PreferredItemsPanelWidth"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.PreferredItemsPanelHeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.PreferredItemsPanelHeight"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.LowestWeightColorProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.LowestWeightColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightColorProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.HighestWeightColorProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.HighestWeightColor"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeight"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.ColorCalculationLevelProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.ColorCalculationLevel"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapControl.ItemsLayoutModeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.ItemsLayoutMode"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.HeatMapControl">HeatMapControl</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.HeatMapControl">HeatMapControl</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.GetContainerForItemOverride">
            <summary>
            Get Container For Item Override
            </summary>
            <returns>The HeatMapItem</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Method to check whether Is Item Its Own Container Override
            </summary>
            <param name="item">The object item</param>
            <returns>The HeatMapItem</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when OnItemsSourceChanged
            </summary>
            <param name="oldValue">The old value</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.OnMedianWeightChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The OnMedianWeightChanged method
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="args">The DependencyPropertyChangedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.OnColorCalculationLevelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The OnColorCalculationLevelChanged method
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="args">The DependencyPropertyChangedEventArgs args</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapControl.ClearColorAvailability(System.Windows.Controls.ItemCollection)">
            <summary>
            The ClearColorAvailability method
            </summary>
            <param name="items">The ItemCollection items</param>
            <remarks></remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.HeatMapControl"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.TextIntersectAction">
            <summary>
            Get and Set TextIntersectActionProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.IsGradientBrush">
            <summary>
            Get and Set IsGradientBrushProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.LowestWeightGradient">
            <summary>
            Get and Set LowestWeightGradientProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightGradient">
            <summary>
            Get and Set MedianWeightGradientProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.HighestWeightGradient">
            <summary>
            Get and Set HighestWeightGradientProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.LabelFontSize">
            <summary>
            Get and Set LabelFontSizeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.WeightValuePath">
            <summary>
            Gets or sets a path to a value on the source object to serve as the "weight" of the object. 
            This is a dependency property. This is used for items at all levels. 
            Can be overriden for items at specific levels through the corresponding HeatMapItem's setting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.ColorValuePath">
            <summary>
            Gets or sets a path to a value on the source object to serve as the "color weight" of the object. 
            This is a dependency property. This is used for items at all levels. 
            Can be overriden for items at specific levels through the corresponding HeatMapItem's setting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.PreferredItemsPanelWidth">
            <summary>
            Gets or sets a value indicating the preferred width you want to use for groups when bound to a grouped CollectionViewSource.
            Default is 300. This is a dependency property.
            </summary>
            <remarks>Normally, this control simply divides the available space between all the items. But, when bound
            to a CollectionViewSource with groups, the ItemsControl implementation requires you to specify
            a width and height for displaying a group. This property is used for that.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.PreferredItemsPanelHeight">
            <summary>
            Gets or sets a value indicating the preferred height you want to use for groups when bound to a grouped CollectionViewSource.
            Default is 300. This is a dependency property.
            </summary>
            <remarks>Normally, this control simply divides the available space between all the items. But, when bound
            to a CollectionViewSource with groups, the ItemsControl implementation requires you to specify
            a width and height for displaying a group. This property is used for that.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.LowestWeightColor">
            <summary>
            Gets or sets a value indicating the color that will be used on the item with the lowest color weight. This is a dependency property.
            Default is Cornsilk.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.HighestWeightColor">
            <summary>
            Gets or sets a value indicating the color that will be used on the item with the highest color weight. This is a dependency property.
            Default is Green.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightColor">
            <summary>
            Gets or sets a value indicating the color that will be used on the item with the median color weight (see <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeight"/>. 
            This is a dependency property. Default is Yellow.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.ColorCalculationLevel">
            <summary>
            Gets or sets a value indicating the items at a level (when bound to hierarchical data) for which the ColorWeight should be processed.
            Default is -1, indicating this will be processed for all leaf nodes in the hierarchy. 0 indicates the top level of items
            in the bound hierarchy and so on. If adding HeatMapItems manually, make sure to set their Level property appropriately.
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeight">
            <summary>
            Gets or sets a value indicating the "median color weight" on which the <see cref="P:Syncfusion.Windows.Chart.HeatMapControl.MedianWeightColor"/> will be applied. The
            valid values for this property are between 0 to 100. Default is 50. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.ItemsLayoutMode">
            <summary>
            Gets or sets a value indicating the mode in which items should be laid out. This setting will be applied at all levels. To customize this
            for specific level, check the corresponding HeatMapItem setting. Default value is HeatMapLayoutMode.Squarified.
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapControl.ColorWeightsInfo">
            <summary>
            Gets or sets a value indicating the computed information about the low and high colors in the bound items.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeatMapItem">
            <summary>
            Represents an item hosted within a <see cref="T:Syncfusion.Windows.Chart.HeatMapControl"/>. You can add child items to this type as well. When
            a HeatMapControl's ItemsSource property is set, these types are automatically created for each bound item.
            </summary>
            <example>
            <code language="XAML">
             &lt;syncfusion:HeatMapControl Name="heatMap"
                                          LowestWeightColor="ForestGreen"
                                          MedianWeightColor="YellowGreen"
                                          HighestWeightColor="IndianRed" Margin="20"&gt;
                  &lt;!--Adding HeatMapItem--&gt;
                         &lt;syncfusion:HeatMapItem Weight="1000" ColorWeight="400"
            Level="0"/&gt;
                                &lt;syncfusion:HeatMapItem Weight="500" Header="US:New York"
            ColorWeight="200" Level="1"/&gt;   
                    &lt;/syncfusion:HeatMapControl&gt;
                    </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.HeatMapItem"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.HeaderPartName">
            <summary>
            Initializes constant HeaderPartName
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.WeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.Weight"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.ItemVisibilityProperty">
            <summary>
             Identifies the ItemVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.ColorWeightProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.ColorWeight"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.WeightValuePathProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.WeightValuePath"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.ColorWeightValuePathProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.ColorWeightValuePath"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.IsColorInfoAvailableProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.IsColorInfoAvailable"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.LevelProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.Level"/> property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItem.ItemsLayoutModeProperty">
            <summary>
            Identifies the <see cref="P:Syncfusion.Windows.Chart.HeatMapItem.ItemsLayoutMode"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.HeatMapItem">HeatMapItem</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.HeatMapItem">HeatMapItem</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.HeatMapItem">HeatMapItem</see> class. Constructor used to specify the level property of this item.
            </summary>
            <param name="level">Specifies the level property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.GetWeightedBGColor">
            <summary>
            The GetWeightedBGColor method
            </summary>
            <returns>The color value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            The OnHeaderChanged method
            </summary>
            <param name="oldHeader">The old header</param>
            <param name="newHeader">The new header</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.GetContainerForItemOverride">
            <summary>
            Method to Get Container For Item Override
            </summary>
            <returns>The HeatMapItem</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Method to check whether Is Item Its Own Container Override
            </summary>
            <param name="item">The object item</param>
            <returns>The HeatMapItem</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.OnWeightValuePathChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The OnWeightValuePathChanged method
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="args">The DependencyPropertyChangedEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.OnColorWeightValuePathChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The OnColorWeightValuePathChanged method
            </summary>
            <param name="d">The DependencyObject d</param>
            <param name="args">The DependencyPropertyChangedEvent arguments</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.SetupWeightBinding">
            <summary>
            The SetupWeightBinding method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.SetupColorWeightBinding">
            <summary>
            The SetupColorWeightBinding method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItem.SetupContentBinding(System.String,System.Windows.DependencyProperty)">
            <summary>
            The SetupContentBinding method
            </summary>
            <param name="sourceProp">The source property</param>
            <param name="destProp">The destination property</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.Level">
            <summary>
            Gets or sets a value that specifies the level within the hierarchy. This value will be automatically generated if and only if this control is data bound.
            The top most level is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.WeightValuePath">
            <summary>
            Gets or sets a value that specifies the property name in the bound items from which to retrieve the weight info for that item.
            By default, this value is derived from the corresponding setting in the parent HeatMapControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.ColorWeightValuePath">
            <summary>
            Gets or sets a value that specifies the property name in the bound items from which to retrieve the weight info for that item.
            By default, this value is derived from the corresponding setting in the parent HeatMapControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.IsColorInfoAvailable">
            <summary>
            Gets or sets a value indicating whether enough color info is available to determine the background color for this item. This is typically
            used in your custom HeatMapItem style definitions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.ItemsLayoutMode">
            <summary>
            Gets or sets a value indicating whether the layout mode for the child items. By default, this value is derived from the 
            corresponding setting in the parent HeatMapControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.ItemVisibility">
            <summary>
            Get and Set ItemVisibilityProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.Weight">
            <summary>
            Gets or sets a value indicating whether the weight of the item based on which the area it occupies in the resultant layout is determined.
            This is usually set indirectly via the WeightValuePath property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.ColorWeight">
            <summary>
            Gets or sets a value indicating whether the background color weight of the item based on which the background of the item is determined.
            This is usually set indirectly via the ColorWeightValuePath property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.ParentHeatMapControl">
            <summary>
            Gets the Parent HeatMapControl
            </summary>  
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItem.ItemMeasure">
            <summary>
            Gets or sets a value indicating more info about the position and size of the item.
            </summary>
            <remarks>
            This property can be accessed in the ItemTemplates as shown below.
            <example>
            First setup an ItemTemplate as follows
            <code>
                        &lt;DataTemplate x:Key="itemDataTemplate"&gt;
                          &lt;Grid Background="Wheat"&gt;
                            &lt;TextBlock  TextWrapping="Wrap" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource myConverter}}" /&gt;
                          &lt;/Grid>
                        &lt;/DataTemplate&gt;
            </code>
            Then in your custom converter:
            <code>
                public class MyConverter : IValueConverter
                {
                    object IValueConverter.Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)
                    {
                        ContentPresenter cp = value as ContentPresenter;
                        HeatMapItem item = cp.TemplatedParent as HeatMapItem;
                        // Show the Area occupied by the item:
                        return "Area is: " + item.ItemMeasure.AreaByWeight.ToString();
                    }
                }
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MyItemContentProvider">
            <summary>
            Represents MyItemContentProvider
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MyItemContentProvider.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
             <seealso cref="T:Syncfusion.Windows.Chart.MyItemContentProvider"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MyItemContentProvider.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.MyItemContentProvider"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.MyBGColorConverter">
            <summary>
            Represents MyBGColorConverter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MyBGColorConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The Convert method
            </summary>
            <param name="values">The object values</param>
            <param name="targetType">The targetType</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.MyBGColorConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.MyBGColorConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The ConvertBack method
            </summary>
            <param name="value">The object value</param>
            <param name="targetTypes">The targetTypes</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Returns the value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.MyBGColorConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeatMapsPanel">
            <summary>
            The base container panel for the HeatMapControl and HeatMapItem. Derive your custom panels from this type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapsPanel.m_totalWeight">
            <summary>
            Initializes _totalWeight
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapsPanel.m_items">
            <summary>
            Initializes _items
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Calls Arrange on all the "visible" child items. "Visible" items are in the <see cref="P:Syncfusion.Windows.Chart.HeatMapsPanel.SortedItemMeasuresList"/>.
            </summary>
            <param name="arrangeSize">The available size.</param>
            <returns>Simply returns the arrangeSize param value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            calculates the bounds for the items (this information will be stored in the <see cref="P:Syncfusion.Windows.Chart.HeatMapsPanel.SortedItemMeasuresList"/>).
            Calls Measure on all the "visible" items.
            </summary>
            <param name="constraint">The constraint within which to layout the items.</param>
            <returns>Returns the passed in constraint in most cases. If the constraint is Double.Infinity* (as in some cases),
            then it would return a size based on the HeatMapControl.PreferredItemsPanelWidth and PreferredItemsPanelHeight.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.ComputeItemBounds">
            <summary>
            Override this method to compute the item bounds. Update AvailableArea as you allocate space between the children
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.GetOrientation">
            <summary>
            Could be used for slice and dice type layouts to determine the orientation to use for children layout.
            </summary>
            <returns>The orientation</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.GetRectangle(System.Windows.Controls.Orientation,Syncfusion.Windows.Chart.HeatMapItemMeasure,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the rect for a child based on the orientation.
            </summary>
            <param name="orientation">The orientation</param>
            <param name="item">The item value</param>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <param name="width">The width value</param>
            <param name="height">The height value</param>
            <returns>The rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.ComputeNextPosition(System.Windows.Controls.Orientation,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            Increments x or y based on the orientation.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="xPos">The X position.</param>
            <param name="yPos">The Y position.</param>
            <param name="width">The width value</param>
            <param name="height">The height value</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.ComputeBySlicing(System.Collections.Generic.List{Syncfusion.Windows.Chart.HeatMapItemMeasure})">
            <summary>
            Slices the items based on orientation.
            </summary>
            <param name="items">The HeatMapItemMeasure items</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.ShouldProcessColorWeights(Syncfusion.Windows.Chart.HeatMapItem)">
            <summary>
            Method to indicate whether color Weights should be processed
            </summary>
            <param name="item">The HeatMapItem item</param>
            <returns>The bool value whether to process color weights</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.IsValidSize(System.Windows.Size)">
            <summary>
            The IsValidSize method
            </summary>
            <param name="size">The size value</param>
            <returns>If any dim is NaN, return false;</returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapsPanel.m_control">
            <summary>
            Initializes HeatMapControl _control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.GetHeatMapControl">
            <summary>
            The GetHeatMapControl method
            </summary>
            <returns>The HeatMapControl</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.IsValidItem(Syncfusion.Windows.Chart.HeatMapItem)">
            <summary>
            The IsValidItem method
            </summary>
            <param name="item">The HeatMapItem item.</param>
            <returns>bool value indicating whether valid item</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapsPanel.PrepareChildren(Syncfusion.Windows.Chart.HeatMapControl)">
            <summary>
            The PrepareChildren method
            </summary>
            <param name="control">The HeatMapControl control</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapsPanel.AvailableArea">
            <summary>
            Gets or sets the remaining area available for children.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapsPanel.SortedItemMeasuresList">
            <summary>
            Gets the list of item measures sorted by weight. This list is available after a call to MeasureOverride.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapsPanel.ShorterSideLength">
            <summary>
            Gets the shortest (of the remaining area) side's length.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HorizontalSlicesPanel">
            <summary>
            Panel that simply lays out it's children horizontally
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HorizontalSlicesPanel.GetOrientation">
            <summary>
            The GetOrientation method
            </summary>
            <returns>Returns Orientation.Horizontal.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.VerticalSlicesPanel">
            <summary>
            Panel that simply lays out it's children horizontally
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.VerticalSlicesPanel.GetOrientation">
            <summary>
            The GetOrientation method
            </summary>
            <returns>Returns Orientation.Horizontal.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeatMapItemMeasure">
            <summary>
            Provides additional information about a HeatMapItem that you can use within your DataTemplates. 
            See HeatMapItem.ItemMeasure property class reference for more info on how to use this type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItemMeasure.item">
            <summary>
            Initializes HeatMapItem item
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapItemMeasure.colorWeightsInfo">
            <summary>
            Initializes colorWeightsInfo
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItemMeasure.#ctor(Syncfusion.Windows.Chart.HeatMapItem,Syncfusion.Windows.Chart.ColorWeightsInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.HeatMapItemMeasure">HeatMapItemMeasure</see> class. 
            </summary>
            <param name="item">The HeatMapItem item</param>
            <param name="colorWeightsInfo">ColorWeightsInfo colorWeightsInfo</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItemMeasure.CompareByWeightDescendingOrder(Syncfusion.Windows.Chart.HeatMapItemMeasure,Syncfusion.Windows.Chart.HeatMapItemMeasure)">
            <summary>
            Used by the implementation to compare the weights of 2 items.
            </summary>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <returns>The int order</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.HeatMapItemMeasure.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItemMeasure.Item">
            <summary>
            Gets the underlying HeatMapItem instance.
            </summary>
            <value>The item value</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItemMeasure.ComputedSize">
            <summary>
            Gets or sets the Computed size for the item.
            </summary>
            <value>The computed size</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItemMeasure.ComputedLocation">
            <summary>
            Gets or sets the Computed Location for the item.
            </summary>
            <value>The computed location point</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItemMeasure.ColorWeightsInfo">
            <summary>
            Gets the ColorWeightsInfo
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.HeatMapItemMeasure.AreaByWeight">
            <summary>
            Gets or sets the calculated area occupied by the item based on it's Weight and the size of the container.
            </summary>
            <value>The Area by weight</value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ColorWeightsInfo">
            <summary>
            Global info pertaining to the full bound list.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ColorWeightsInfo"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ColorWeightsInfo.rtb">
            <summary>
            Initializes RenderTargetBitmap rtb
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ColorWeightsInfo">ColorWeightsInfo</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ColorWeightsInfo">ColorWeightsInfo</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.GetWeightValueForPercentile(System.Int32)">
            <summary>
            Returns a value between the <see cref="P:Syncfusion.Windows.Chart.ColorWeightsInfo.LowestValue"/> and <see cref="P:Syncfusion.Windows.Chart.ColorWeightsInfo.HighestValue"/> based on the percentile specified.
            </summary>
            <param name="percentile">A value between 0 and 100.</param>
            <returns>A value between LowestValue and HighestValue.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.GetGradientFromValue(System.Double,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Return brush value from the given double value
            </summary>
            <param name="value"></param>
            <param name="lowColor"></param>
            <param name="medianColor"></param>
            <param name="highColor"></param>
            <param name="median"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.GetColorFromValue(System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Int32)">
            <summary>
            Provides the color for a weight value based on the low, median and high colors.
            </summary>
            <param name="value">The weight value that is between a low and high range.</param>
            <param name="lowColor">The color for the lowest value in the range.</param>
            <param name="medianColor">The color for the median value in the range.</param>
            <param name="highColor">The color for the high value in the range.</param>
            <param name="median">The median percentage (a value between 0 and 100).</param>
            <returns>The color value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.ClearLowAndHigh">
            <summary>
            Clears the <see cref="P:Syncfusion.Windows.Chart.ColorWeightsInfo.LowestValue"/> setting and the <see cref="P:Syncfusion.Windows.Chart.ColorWeightsInfo.HighestValue"/> setting. These will be recalculated
            the next time the HeatMapItem's layout is updated.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ColorWeightsInfo"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.GetColorFromValueX(System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Int32)">
            <summary>
            The GetColorFromValueX method. Currently not used.
            </summary>
            <param name="value">The double value</param>
            <param name="lowColor">The Color lowColor</param>
            <param name="medianColor">The Color medianColor</param>
            <param name="highColor">The Color highColor</param>
            <param name="median">The int median</param>
            <returns>The color value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ColorWeightsInfo.GetColorFromPerc(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            The get color from percentage method.
            </summary>
            <param name="left">The left color</param>
            <param name="right">The right color</param>
            <param name="per">The double percentage</param>
            <returns>The color value</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ColorWeightsInfo.LowestValue">
            <summary>
            Gets or sets the lowest value in the bound list.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ColorWeightsInfo.HighestValue">
            <summary>
            Gets or sets the highest value in the bound list.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel">
            <summary>
            Uses the squarified pattern to position the child items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel.ComputeItemBounds">
            <summary>
            Computes Item Bounds
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel.GetRectangle(System.Windows.Controls.Orientation,Syncfusion.Windows.Chart.HeatMapItemMeasure,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Method to Get Rectangle
            </summary>
            <param name="orientation">The orientation</param>
            <param name="item">The item value.</param>
            <param name="x">The x value</param>
            <param name="y">The Y value</param>
            <param name="width">The Width value</param>
            <param name="height">The height value</param>
            <returns>The Rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel.ComputeNextPosition(System.Windows.Controls.Orientation,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            Method to Compute Next Position
            </summary>
            <param name="orientation">The orientation</param>
            <param name="xPos">The X position</param>
            <param name="yPos">The Y position</param>
            <param name="width">The Width value</param>        
            <param name="height">The height value</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel.Squarify(System.Collections.Generic.List{Syncfusion.Windows.Chart.HeatMapItemMeasure},System.Collections.Generic.List{Syncfusion.Windows.Chart.HeatMapItemMeasure},System.Double)">
            <summary>
            The Squarify method
            </summary>
            <param name="items">The items value</param>
            <param name="row">The row value</param>
            <param name="sideLength">The side length</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel.AddRowToLayout(System.Collections.Generic.List{Syncfusion.Windows.Chart.HeatMapItemMeasure})">
            <summary>
            The AddRowToLayout method
            </summary>
            <param name="row">The HeatMapItemMeasure row</param>
            <remarks></remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SquarifiedHeatMapsPanel.Worst(System.Collections.Generic.List{Syncfusion.Windows.Chart.HeatMapItemMeasure},System.Double)">
            <summary>
            The Worst value method
            </summary>
            <param name="row">The HeatMapItemMeasure row</param>
            <param name="sideLength">The side length</param>
            <returns>The double value</returns>      
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLegend">
            <summary>
            Represents WPF chart legend class.
            </summary>
            <remarks>
            Chart legend can be added either as chart's child or as <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>'s child. <para/> Per legend's default template, it represents <see cref="T:Syncfusion.Windows.Chart.ChartSeries"/> except of cases when series' type is set to one of
            following <see cref="T:Syncfusion.Windows.Chart.ChartTypes"/>: <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Pie"/>, <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Doughnut"/>, <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Pyramid"/> and <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Funnel"/>. For such chart types legend represents <see cref="T:Syncfusion.Windows.Chart.ChartSegment"/>. <para/> As either child of <see cref="T:Syncfusion.Windows.Chart.Chart"/> or <see cref="T:Syncfusion.Windows.Chart.ChartArea"/>, legend has all abilities: such as docking and enabling or
            disabling corresponding series (segments).
            </remarks>
            <example>
            C#: <code language="C#">
            //Window's constructor.
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding 2 areas on chart.
            chart.Areas.Add(new ChartArea());
            chart.Areas.Add(new ChartArea());
            //Assigning second area's Legend property.
            chart.Areas[1].Legend = new ChartLegend();
            ChartDockPanel.SetDock(chart.Areas[1].Legend, ChartDock.Right);
            //Creating series reference.
            ChartSeries series;
            //Creating collection of chart points.
            ChartListData data = new ChartListData();
            //Adding 3 series with have 2 points for each to first chart area.
            for (int i=1;i&lt;=6;i++)
            {
            //Adding point with X == i and Y == i;
            data.Add(new ChartPoint(i, i));
            if (i % 2 == 0)
            {
            //Creating a new chart series.
            series = new ChartSeries(ChartTypes.Area);
            //Setting series' label;
            series.Label = "Series " + i/2;
            //Setting datapoints.
            series.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series);
            //Creating new data points.
            data = new ChartListData();
            }
            }
            //Creating new data points.
            data = new ChartListData();
            //Creating a new series type of Pie.
            series = new ChartSeries(ChartTypes.Pie);
            //Setting Label property as representation of series on legend.
            series.Label = "Series 4";
            //Adding 9 data points.
            for (int i = 1; i &lt; 10; i++)
            {
            data.Add(new ChartPoint(i,i));
            }
            //Assigning data to Pie series.
            series.Data = data;
            //Adding Pie series to area.
            chart.Areas[1].Series.Add(series);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Legends sample" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend syncfusion:ChartDockPanel.Dock="Left"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 1 2 2" Type="Area"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="3 3 4 4" Type="Area"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="5 5 6 6" Type="Area"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartArea.Legend&gt;
            &lt;syncfusion:ChartLegend syncfusion:ChartDockPanel.Dock="Right"/&gt;
            &lt;/syncfusion:ChartArea.Legend&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 1 2 2 3 3 4 4 5 5 6 6 7 7 8
            8 9 9" Type="Pie"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDockPanel">ChartDockPanel</seealso>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnCreateAutomationPeer">
            <summary>
            Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Windows Presentation Foundation (WPF) infrastructure.
            </summary>
            <returns>
            The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementation.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.OrientationSealedOnDockProperty">
            <summary>
            Identifies the OrientationSealedOnDock dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.RowsCountProperty">
            <summary>
            Identifies the RowsCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.ColumnsCountProperty">
            <summary>
            Identifies the ColumnsCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.CheckBoxVisibilityProperty">
            <summary>
            Identifies the CheckBoxVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.IconVisibilityProperty">
            <summary>
            Identifies the IconVisibility dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.IconWidthProperty">
            <summary>
            Identifies the IconWidth dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.IconHeightProperty">
            <summary>
            Identifies the IconHeight dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.ElementMarginProperty">
            <summary>
            Identifies the ElementMargin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.TextAlignmentProperty">
            <summary>
            Identifies the TextAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.IsLegacyLegendStyleEnabledProperty">
            <summary>
            Identifies the LegacyLegendStyleEnabled dependency property
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.ItemMarginProperty">
            <summary>
            Identifies the ItemMargin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.ShowSymbolProperty">
            <summary>
            Identifies the ShowSymbol dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.HorizontalContentAlignmentProperty">
            <summary>
            Identifies the HorizontalContentAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.VerticalContentAlignmentProperty">
            <summary>
            Identifies the VerticalContentAlignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.LegendPanelProperty">
            <summary>
            Using a DependencyProperty as the backing store for LegendPanel.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnPanelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method implementation for Panel assigned to legend
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.OffsetXProperty">
            <summary>
            Identifies the OffsetX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.OffsetYProperty">
            <summary>
            Identifies the OffsetY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.IsSegmentsLegendProperty">
            <summary>
            Identifies the IsSegmentsLegend dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.m_highlightedElement">
            <summary>
            Initializes m_highlightedElement
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegend.LegendItemsPanelProperty">
            <summary>
            Dependency Property for LegendItemsPanel
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnLegendItemsPanelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when LegendItemsPanel property is changed.
            </summary>
            <param name="d">The d value.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"></see>  event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnOffsetXChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when OffsetX is changed.
            </summary>
            <param name="d">The d value.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnOffsetYChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when OffsetY is changed.
            </summary>
            <param name="d">The d value.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.OnItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when items source is changed.
            </summary>
            <param name="d">The d value.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.ShowLegendSettings">
            <summary>
            Shows the legend settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.FilterByName(System.Object)">
            <summary>
            Filters the name of the by.
            </summary>
            <param name="obj">The obj value.</param>
            <returns>Bool value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegend.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.HorizontalContentAlignment">
            <summary>
            Gets or sets the HorizontalContentAlignment.
            </summary>
            <value>Horizontal Alignement</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.VerticalContentAlignment">
            <summary>
            Gets or sets VerticalContentAlignement.
            </summary>
            <value>ertical Alignment</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.LegendPanel">
            <summary>
            Get or Set LegendPanelProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.IsLegacyLegendStyleEnabled">
            <summary>
            Gets or sets a value whether the LegacyLegendStyle remains unchanged. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.ItemMargin">
            <summary>
            Gets or sets the legend items' margin. This is a dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.OrientationSealedOnDock">
            <summary>
            Gets or sets a value indicating whether legend's orientation remains unchanged
            during dock. This is a dependency property.
            </summary>
            <remarks>
            By default, legend's items orientation will change with respect to legend's <see cref="T:Syncfusion.Windows.Chart.ChartDockPanel">dock</see> attached property. For legend's <see cref="F:Syncfusion.Windows.Chart.ChartDock.Top"/> or <see cref="F:Syncfusion.Windows.Chart.ChartDock.Bottom"/> dock state, items
            will be placed horizontally, for <see cref="F:Syncfusion.Windows.Chart.ChartDock.Right"/> or <see cref="F:Syncfusion.Windows.Chart.ChartDock.Left"/> - vertically.
            </remarks>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="300" Width="300" WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend OrientationSealedOnDock="True"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDockPanel">ChartDockPanel</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.RowsCount">
            <summary>
            Gets or sets the number of rows to be used for items in the legend. This is a dependency property.
            </summary>
            <value>The rows count.</value>
            <example>
            XAML:
            <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="500" Width="500" WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
               &lt;syncfusion:Chart.Legends&gt;
                   &lt;syncfusion:ChartLegend RowsCount="2" ColumnsCount="3"/&gt;
               &lt;/syncfusion:Chart.Legends&gt;
               &lt;syncfusion:Chart.Areas&gt;
                   &lt;syncfusion:ChartArea&gt;
                       &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
                       &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
                       &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
                       &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
                       &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
                       &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
                   &lt;/syncfusion:ChartArea&gt;
               &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.ColumnsCount">
            <summary>
            Gets or sets the number of columns to be used for items in the legend. This is a
            dependency property.
            </summary>
            <value>
            The columns count.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.RowsCount = legend.ColumnsCount = 2;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Height="500" Width="500" WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend RowsCount="2" ColumnsCount="3"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.Orientation">
            <summary>
            Gets or sets the orientation of items in the legend. This is a dependency
            property.
            </summary>
            <value>
            The orientation.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.RowsCount = legend.ColumnsCount = 2;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend Orientation="Horizontal"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartLegend.OrientationSealedOnDock">ChartLegend.OrientationSealedOnDock</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.Items">
            <summary>
            The serialization using xaml writer will include the ChartSeries (ChartLegend's Item property) in the serialized string, if this property is not included with DesignerSerializationVisibility attribute. 
            the absence of this attribute may result in conflicting with default series of Chart Area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.CornerRadius">
            <summary>
            Gets or sets the CornerRadius of legend's border. This is a dependency property.
            </summary>
            <value>
            The corner radius.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.CornerRadius = new CornerRadius(10,3,10,2);
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend CornerRadius="10,3,10,2"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.CheckBoxVisibility">
            <summary>
            Gets or sets a value indicating whether the checkbox of the legend items are
            visible. This is a dependency property.
            </summary>
            <remarks>
            Double clicking on legend will make a legend's window appear that can also be
            used to change checkboxes visibility.
            </remarks>
            <value>
            The check box visibility.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.CheckBoxVisibility = Visibility.Visible;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend CheckBoxVisibility="Visible"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.IconVisibility">
            <summary>
            Gets or sets a value indicating whether the icons of the legend items is
            visible. This is a dependency property.
            </summary>
            <remarks>
            Double clicking on legend will make a legend's dialog window appear that can
            also be used to change icons visibility.
            </remarks>
            <value>
            The icon visibility.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.IconVisibility = Visibility.Visible;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend IconVisibility="Visible"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.IconWidth">
            <summary>
            Gets or sets the width of the icon that represents series (segment). This is a
            dependency property.
            </summary>
            <value>
            The width of the icon.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.IconWidth = 20;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend IconWidth="20"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.IconHeight">
            <summary>
            Gets or sets the height of the icon that represents series (segment). This is a
            dependency property.
            </summary>
            <value>
            The height of the icon.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.IconHeight = 20;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend IconHeight="20"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.ElementMargin">
            <summary>
            Gets or sets the legend's items margin. This is a dependency property.
            </summary>
            <value>
            The element margin.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.ElementMargin = new Thickness(10,3,2,5);
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend ElementMargin="10,3,2,5"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.TextAlignment">
            <summary>
            Gets or sets the text alignment. This is a dependency property.
            </summary>
            <value>
            The text alignment.
            </value>
            <example>
            C#: <code language="C#">
            public Window1()
            {
            InitializeComponent();
            //Creating a new chart instance.
            Chart chart = new Chart();
            //Creating a chart legend.
            ChartLegend legend = new ChartLegend();
            //Setting rows and columns count.
            legend.TextAlignment = VerticalAlignment.Bottom;
            //Setting legend's attached ChartDock property.
            ChartDockPanel.SetDock(legend, ChartDock.Left);
            //Adding legend to chart.
            chart.Legends.Add(legend);
            //Adding area to chart.
            chart.Areas.Add(new ChartArea());
            //Creating new chart data points.
            ChartListData data = new ChartListData();
            data.Add(new ChartPoint(1, 3));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 2));
            //Creating new series.
            ChartSeries series1 = new ChartSeries();
            //Assigning series' label.
            series1.Label = "Series 1";
            //Assigning data.
            series1.Data = data;
            //Adding series to area.
            chart.Areas[0].Series.Add(series1);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 5));
            data.Add(new ChartPoint(2, 7));
            data.Add(new ChartPoint(3, 6));
            //Creating second series.
            ChartSeries series2 = new ChartSeries();
            //Assigning series' label.
            series2.Label = "Series 2";
            series2.Data = data;
            chart.Areas[0].Series.Add(series2);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 2));
            data.Add(new ChartPoint(2, 3));
            data.Add(new ChartPoint(3, 7));
            //Creating second series.
            ChartSeries series3 = new ChartSeries();
            //Assigning series' label.
            series3.Label = "Series 3";
            series3.Data = data;
            chart.Areas[0].Series.Add(series3);
            //Making a new data points.
            data = new ChartListData();
            data.Add(new ChartPoint(1, 7));
            data.Add(new ChartPoint(2, 2));
            data.Add(new ChartPoint(3, 5));
            //Creating second series.
            ChartSeries series4 = new ChartSeries();
            //Assigning series' label.
            series4.Label = "Series 4";
            series4.Data = data;
            chart.Areas[0].Series.Add(series4);
            //Setting window's content.
            this.Content = chart;
            }
            </code> XAML: <code language="XAML">
            &lt;Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            Title="Window1" Height="500" Width="500"
            WindowStartupLocation="CenterScreen"&gt;
            &lt;syncfusion:Chart
            xmlns:syncfusion="http://www.syncfusion.com/WpfChart.xsd"&gt;
            &lt;syncfusion:Chart.Legends&gt;
            &lt;syncfusion:ChartLegend TextAlignment="Bottom"/&gt;
            &lt;/syncfusion:Chart.Legends&gt;
            &lt;syncfusion:Chart.Areas&gt;
            &lt;syncfusion:ChartArea&gt;
            &lt;syncfusion:ChartSeries Label="Series 1" Data="1 3 2 7 3 2"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 2" Data="1 5 2 7 3 6"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 3" Data="1 2 2 6 3 1"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 4" Data="1 5 2 3 3 8"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 5" Data="1 7 2 3 3 4"/&gt;
            &lt;syncfusion:ChartSeries Label="Series 6" Data="1 5 2 2 3 3"/&gt;
            &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart.Areas&gt;
            &lt;/syncfusion:Chart&gt;
            &lt;/Window&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea">ChartArea</seealso>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries">ChartSeries</seealso>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.ShowSymbol">
            <summary>
            Gets or sets the show symbol.
            </summary>
            <value>The show symbol.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.OffsetX">
            <summary>
            Gets or sets the OffsetX value.
            </summary>
            <value>The OffsetX.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.OffsetY">
            <summary>
            Gets or sets the OffsetY value.
            </summary>
            <value>The OffsetY.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.IsSegmentsLegend">
            <summary>
            Get or Set IsSegmentsLegendProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartLegend.LegendItemsPanel">
            <summary>
            Gets or sets the Custom Legend ItemsPanel.
            </summary>
            <value>The LegendItemsPanel</value>
            <remarks></remarks>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartLegend.LocationChanged">
            <summary>
            Represents event for QtpLegendLocationChangedEventHandler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartBarType">
            <summary>
            Represents ChartBarType
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBarType"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartBarType.ToString">
            <summary>
            ChartBarType ToString method
            </summary>
            <returns>The string</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartBarType"/>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartBarType.Flags">
            <summary>
            Gets chart type flags. This is a dependency property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStackingColumnSegment">
            <summary>
            Represents column chart type segment.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartStackingColumnType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingColumnSegment.IsLowerProperty">
            <summary>
            Identifies the IsLower dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStackingColumnSegment.IsUpperProperty">
            <summary>
            Identifies the IsUpper dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartStackingColumnSegment.#ctor(Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.IChartDataPoint,Syncfusion.Windows.Chart.ChartIndexedDataPoint,Syncfusion.Windows.Chart.ChartSeries)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartStackingColumnSegment"/> class.
            </summary>
            <param name="bottomLeftPnt">The bottom left PNT.</param>
            <param name="topRightPnt">The top right PNT.</param>
            <param name="correspondingPoint">The corresponding point.</param>
            <param name="series">The series.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingColumnSegment.IsLower">
            <summary>
            Gets or sets a value indicating whether this segment is lower part of stack.
            </summary>
            <value><c>true</c> if this instance is lower; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartStackingColumnSegment.IsUpper">
            <summary>
            Gets or sets a value indicating whether this instance is upper part of stack.
            </summary>
            <value><c>true</c> if this instance is upper; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisLabelInfo">
            <summary>
            Represents ChartAxisLabelInfo
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelInfo.m_position">
            <summary>
            Initializes m_position
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelInfo.m_valueToPresent">
            <summary>
            Initializes m_valueToPresent
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartAxisLabelInfo.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartAxisLabelInfo"/> struct.
            </summary>
            <param name="pos">The position.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisLabelInfo.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartAxisLabelInfo.ValueToPresent">
            <summary>
            Gets or sets the value to pesent.
            </summary>
            <value>The value to pesent.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTypeTemplateSelector">
            <summary>
            Represents the ChartTypeTemplateSelector class
            </summary>
            <remarks>
            Selects the Template required for the chart types
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypeTemplateSelector.m_default">
            <summary>
            Initializes m_default
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartTypeTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Overrides <see cref="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)"/> method.
            </summary>
            <param name="item">The data object for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>
            Returns a <see cref="T:System.Windows.DataTemplate"></see> or null. The default value is null.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartTypeTemplateSelector.Default">
            <summary>
            Gets the default.
            </summary>
            <value>The default.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartResourceWrapper">
            <summary>
            Class implementation for ChartResourceWrapper
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartResourceWrapper.#ctor">
            <summary>
            Called when instance created for ChartResourceWrapper
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Chart">
            <summary>
            Get or Set Chart property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Pastel">
            <summary>
            Get and Set Pastel property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ToolbarPrint">
            <summary>
            Gets or Sets the ToolbarPrint
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ToolbarSwitchPrint">
            <summary>
            Gets or Sets ToolbarSwitchPrintproperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Save">
            <summary>
            Get or Set Save property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Copy">
            <summary>
            Get or Set Copy property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ToolbarLegend">
            <summary>
            gets or sets the ToolbarLegend
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EnableZooming">
            <summary>
            Get or Set enableZooming property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Header">
            <summary>
            Get or Set header property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ColorPalette">
            <summary>
            Get or Set Colorpalette property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChangeType">
            <summary>
            Get or Set ChangeType
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.HeaderSettings">
            <summary>
            Get or Set Headersettings
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Properties">
            <summary>
            Get or Set Properties property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ZoomIn">
            <summary>
            Gets or Sets the ZoomInProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ZoomOut">
            <summary>
            Gets or Sets the ZoomOut property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ResetZoom">
            <summary>
            Get or Set ResetZoom Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Panning">
            <summary>
            Get or Set Panning Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Close">
            <summary>
            Get or Set Close property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.FastColumn">
            <summary>
            Get or Set FastColumn property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.FastScatter">
            <summary>
            Get or Set FastScatter property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.FastStackingColumn">
            <summary>
            Get or Set FastStackingColumn
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.FastHiLoOpenClose">
            <summary>
            Get or Set FastHiLoOpenclose property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.FastBar">
            <summary>
            Get or Set FastBar Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogCancel">
            <summary>
            Get and Set PrintDialogCancel property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendWindowTitle">
            <summary>
            Get or Set LegendWindowTitle
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendWindowIcon">
            <summary>
            Get or Set LegendWindowIcon property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendWindowCheckBox">
            <summary>
            Get or Set LegendWindowCheckBox property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendWindowOK">
            <summary>
            Get or Set LegendWindowOK property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendWindowCancel">
            <summary>
            Get or Set LegendWindowCancel property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ContextMenuZooming">
            <summary>
            Get or Set ContextMenuZooming property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ContextMenuZoomAll">
            <summary>
            Get or set ContextMenuZoomAll property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ContextMenuSeries">
            <summary>
            Get or Set ContextMenuSeries property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ContextMenuPalettes">
            <summary>
            Get or Set ContextMenupalettes
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogPrint">
            <summary>
            Get or Set PrintDialogPrint Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Style">
            <summary>
            Gets or Sets the Style property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Analog">
            <summary>
            Get or Set analog property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Area">
            <summary>
            Get or Set Area property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Bar">
            <summary>
            Get or Set bar Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.BoxAndWhisker">
            <summary>
            Get or Set BoxAndWhisker property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Bubble">
            <summary>
            Get or Set Bubble property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Candle">
            <summary>
            Get or Set Candle property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Colorful">
            <summary>
            Get or Set Colorful property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Column">
            <summary>
            Get or Set Column property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Custom">
            <summary>
            Get or Set Custom property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Default">
            <summary>
            Get or Set default property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.DefaultAlpha">
            <summary>
            Get or Set DefaultAlpha property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.DefaultDark">
            <summary>
            Get or set DefaultDark
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Doughnut">
            <summary>
            Get or Set Doughnut property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EarthTone">
            <summary>
            Get or Set EarthTone property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.FastLine">
            <summary>
            Get or Set FastLine property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Funnel">
            <summary>
            Get or Set Funnel property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Gantt">
            <summary>
            Get or Set Gantt property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Gradient">
            <summary>
            Get or Set Gradient property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Grayscale">
            <summary>
            Get or Set Grayscale property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.HiLo">
            <summary>
            Get or Set HiLo property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.HiLoArea">
            <summary>
            Get or Set HiLoArea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.HiLoOpenClose">
            <summary>
            Get or Set HiLoOpenClose property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Histogram">
            <summary>
            Get or Set Histogram property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Kagi">
            <summary>
            Get or Set Kagi property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Line">
            <summary>
            Get or Set line property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Nature">
            <summary>
            Get or Set Nature Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Office2007Black">
            <summary>
            Get or Set Office2007Black Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Office2007Blue">
            <summary>
            Get or Set Office2007Blue Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Office2007Silver">
            <summary>
            Get or Set Office2007SilverProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.MixedGray">
            <summary>
            Get or Set MixedGray
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.BlueScale">
            <summary>
            Get or Set BlueScale property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.MaroonRed">
            <summary>
            Get or Set MaroonRedProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.GreenScale">
            <summary>
            Get or Set GreenScale property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.MixedViolet">
            <summary>
            Get or Set MixedViolet
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.CoolBlueScale">
            <summary>
            Get or Set CoolBlueScale property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Metro">
            <summary>
            Get or Set MetroProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChocolateOrange">
            <summary>
            Get or Set ChocolateOrange property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.MixedFantasy">
            <summary>
            Get or Set MixedFantasy property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Pie">
            <summary>
            Get and Set Pie property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PointAndFigure">
            <summary>
            Get and Set PointAndFigure property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Polar">
            <summary>
            Get and Set Polar Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogAdvanced">
            <summary>
            Get or Set PrintDialogAdvanced property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogBWMode">
            <summary>
            Get and Set PrintDialogBWMode property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogColorMode">
            <summary>
            Get or Set PrintDialogColorMode property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogPrintStretch">
            <summary>
            Get or Set PrintDialogPrintStretch property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.PrintDialogPrintMode">
            <summary>
            Get or Set PrintDialogPrintMode property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Pyramid">
            <summary>
            Get or Set Pyramid property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Radar">
            <summary>
            Get or Set Radar Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.RangeArea">
            <summary>
            Get or Set RangeArea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.RangeColumn">
            <summary>
            Get or Set RangeColumn property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Renko">
            <summary>
            Get or Set renko property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.RotatedSpline">
             <summary>
            Get or Set RotatedSpline Property
             </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Scatter">
            <summary>
            Get or Ser Scatter Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Spline">
            <summary>
            Gets or Sets the spline proeprty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SplineArea">
            <summary>
            Gets or Sets the SplineArea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingArea">
            <summary>
            Gets or Sets the StackingArea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingArea100">
            <summary>
            Gets or Sets the StackingArea100 property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingLine">
            <summary>
            Gets or Sets the StackingLine property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingLine100">
            <summary>
            Gets or Sets the StackingLine100 property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingSpline">
            <summary>
            Gets or Sets the Stackingspline property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingSpline100">
            <summary>
            Gets or Sets the StackingSpline100 property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingSplineArea">
            <summary>
            Gets or sets the StackingSplineArea
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingSplineArea100">
            <summary>
            Gets or Sets the StackingSplineArea100 property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingBar">
             <summary>
            Gets or Sets StackingBar property
             </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingBar100">
            <summary>
            Gets or Sets the StackingBar100
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingColumn">
            <summary>
            Gets or Sets the StackingColumn
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StackingColumn100">
            <summary>
            Gets or Sets the StackingColumn100 property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StepArea">
            <summary>
            Gets or Sets stepArea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StepLine">
            <summary>
            Gets or Sets the Stepline property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Surface3D">
            <summary>
            Gets or Sets the Surface3D
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ThreeLineBreak">
            <summary>
            Gets or Sets the ThreeLineBreak property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Tornado">
            <summary>
            Gets or Sets the Tornado property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Triad">
            <summary>
            Gets or Sets the Triad Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.WarmCold">
            <summary>
            Gets or Sets the Warmcold
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SmallTickSize">
            <summary>
            Get and Set SmallTickSize property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Appearance">
            <summary>
            Get or Set Appearance property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Background">
            <summary>
            Get or Set BackGround property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.BorderBrush">
            <summary>
            Get or Set BorderBrush property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.BorderThickness">
            <summary>
            Get or Set BorderThickness property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.CornerRadius">
            <summary>
            Get or Set CornerRadius Property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Foreground">
            <summary>
            Get or Set Foreground property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Margin">
            <summary>
            Get or Set Margin property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Padding">
            <summary>
            Get or Set Padding property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.VisualStyle">
            <summary>
            Gets or Sets VisualStyleProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartVisualStyle">
            <summary>
            Get or Set ChartVisualStyle property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Settings">
            <summary>
            Get or Set Settings property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartArea">
            <summary>
            Get or Set ChartArea property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SelectChartArea">
            <summary>
            Get or Set selectionChartArea
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.GridRegionProperties">
            <summary>
            Get or Set GridRegionProperties
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.GridBackground">
            <summary>
            Get or Set GridBackGround property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AlternativeGridBackground">
            <summary>
            Get or Set AlternativeGridBackground
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AlternatingBackgoundMode">
            <summary>
            Get or Set AlternatingBackgoundMode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AlternatingBackgoundDirection">
            <summary>
            Get or set AlternatingBackgoundDirection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.InteractiveFeatures">
            <summary>
            Get or Set InteractiveFeatures
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EnableZoomOnScroll">
            <summary>
            Get or Set EnableZoomOnScroll
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EnableContextMenu">
            <summary>
            Get or Set EnableContextMenu property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartAreaLegend">
            <summary>
            Get or Set ChartAreaLegend property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.CheckBoxVisibility">
            <summary>
            Get or Set CheckBoxVisibility property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IconVisibility">
            <summary>
            Get or Set IconVisibility
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ShowSymbol">
            <summary>
            Get or Set ShowSymbolProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartSeries">
            <summary>
            Get or Set ChartSeries property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SelectChartSeries">
            <summary>
            Get or Set SelectChartSeries property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Interior">
            <summary>
            Get or Set Interior property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Stroke">
            <summary>
            gets or Sets the Stroke property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.StrokeThickness">
            <summary>
            Gets or Sets the StrokeThickness proeprty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Type">
            <summary>
            Gets or Sets the Type property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Legend">
            <summary>
            Gets or Sets the Legend property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IsVisibleOnLegend">
            <summary>
            Get or Set IsVisibleOnLegend property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendLabel">
            <summary>
            Get or Set LegendLabel property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendIcon">
            <summary>
            Gets or Sets LegendIcon property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Data">
            <summary>
            get or Set Data property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IsZoomable">
            <summary>
            Get or Set IsZoomable property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IsRotated">
            <summary>
            Get or Set IsRotated Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IsSorted">
            <summary>
            Get or Set IsSorted property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ShowSeriesEmptyPoints">
            <summary>
            Get or Set ShowSeriesEmptyPoints
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EmptyPointsInterior">
            <summary>
            Get or Set EmptyPointsInterior property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EmptyPointsStyle">
            <summary>
            Get or Set EmptyPointsStyle property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AnimationOption">
            <summary>
            Get or Set AnimationOption property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AnimateSeriesonebyone">
            <summary>
            Get or Set AnimateSeriesonebyone property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartAxis">
            <summary>
            Get or Set ChartAxis property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SelectChartAxis">
            <summary>
            Get or Set SelectionChartAxis property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AxisType">
            <summary>
            Get or Set AxisType.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AxisPosition">
            <summary>
            Get or Set AxisPosition property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AxisHeader">
            <summary>
            Get or Set AxisHeader property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.RangeAndInterval">
            <summary>
            Get or Set RangeAndInterval property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelSettings">
            <summary>
            Gets or sets LabelSettings property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EnableAnimation">
            <summary>
            Get or Set EnableAnimation property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ValueType">
            <summary>
            Gets or Sets the ValueTypeproperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.OpposedPosition">
            <summary>
            Get or Set OpposedPosition property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartType">
            <summary>
            get or set ChartType property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartTypeHeader">
            <summary>
            Get or Set ChartTypeHeader property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Orientation">
            <summary>
            Get or Set Orientation property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.HeaderAlignment">
            <summary>
            Get or Set HeaderAlignment Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Origin">
            <summary>
            Get or Set Origin property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.AutoSetRange">
            <summary>
            Get or Set AutoSet Range
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Range">
            <summary>
            Get or Set Range property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.RangeCalculationMode">
            <summary>
            Get or Set RangeCalculationMode property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.RangePadding">
            <summary>
            Get or Set RangePaddding property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.Interval">
            <summary>
            Get or Set Interval property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.DesiredIntervalCount">
            <summary>
            Get or Set DesiredIntervalCount property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelBackground">
            <summary>
            Get or Set LabelBackground property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelForeground">
            <summary>
            Gets or sets the LabelForeground property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelBorderBrush">
            <summary>
            Get or Set LabelBorderBrush property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelBorderThickness">
            <summary>
            Get or Set labelBorderThickness
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelCornerRadius">
            <summary>
            Gets or Sets LabelcornerRadius Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.HidePartialLabels">
            <summary>
            Get or Set HidePartialLabels property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IntersectAction">
            <summary>
            Get or Set IntersectAction property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelFormat">
            <summary>
            Gets or Sets the LabelFormat Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelRotateAngle">
            <summary>
            Gets or Sets the LabelRotateAngle Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelsMode">
            <summary>
            Gets or Sets the LabelsMode property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.EdgeLabelDrawingMode">
            <summary>
            Get or Set EdgeLabelDrawingMode property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LineStroke">
            <summary>
            Get or Set the linestroke property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SmallTickLinesStroke">
            <summary>
            Get or Set SmallTickLinesStroke
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SmallTicksPerInterval">
            <summary>
            Get and Set SmallTicksPerInterval Property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.TickLineStroke">
            <summary>
            Gets or Sets the TickLineStroke property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.TickSize">
            <summary>
            Gets or Sets the TickSize property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.IsLograthimic">
            <summary>
            Get or Set IsLograthimic property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LograthimicRange">
            <summary>
            Get or Set LograthimicRange property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LograthimicBase">
            <summary>
            Get or Set LograthimicBase property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.DateTimeRange">
            <summary>
            Get or Set DateTimeRange property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.DateTimeInterval">
            <summary>
            Get or Set DateTimeInterval property 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LabelDateTimeFormat">
            <summary>
            Gets or Sets the LabelDatetimeFormat property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartLegend">
            <summary>
            Get or Set ChartLegend property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartProperties">
            <summary>
            Get or Set ChartProperties
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.ChartPropertiesDialogTitle">
            <summary>
            Get or Set ChartPropertiesDialogTitle property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.SelectChartLegend">
            <summary>
            Get or Set SelectChartLegend property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResourceWrapper.LegendPosition">
            <summary>
            Get or Set LegendPosition property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AlternatingGridBackground">
            <summary>
              Looks up a localized string similar to Background :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AlternatingGridBackgrounDirection">
            <summary>
              Looks up a localized string similar to Background Direction :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AlternatingGridBackgrounMode">
            <summary>
              Looks up a localized string similar to Background Mode :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Analog">
            <summary>
              Looks up a localized string similar to Analog.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AnimateSeriesonebyone">
            <summary>
              Looks up a localized string similar to Animate Series one by one.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AnimationOption">
            <summary>
              Looks up a localized string similar to Animation Option :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Appearance">
            <summary>
              Looks up a localized string similar to Appearance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Area">
            <summary>
              Looks up a localized string similar to Area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AutoSetRange">
            <summary>
              Looks up a localized string similar to Auto Set Range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AxisHeader">
            <summary>
              Looks up a localized string similar to Axis Header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AxisPosition">
            <summary>
              Looks up a localized string similar to Axis Position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.AxisType">
            <summary>
              Looks up a localized string similar to Axis Type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Background">
            <summary>
              Looks up a localized string similar to Background :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Bar">
            <summary>
              Looks up a localized string similar to Bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.BlueScale">
            <summary>
              Looks up a localized string similar to BlueWave.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.BorderBrush">
            <summary>
              Looks up a localized string similar to Border Brush :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.BorderThickness">
            <summary>
              Looks up a localized string similar to Border Thickness :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.BoxAndWhisker">
            <summary>
              Looks up a localized string similar to Box And Whisker.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Bubble">
            <summary>
              Looks up a localized string similar to Bubble.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Candle">
            <summary>
              Looks up a localized string similar to Candle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChangeType">
            <summary>
              Looks up a localized string similar to Change Type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Chart">
            <summary>
              Looks up a localized string similar to Chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartArea">
            <summary>
              Looks up a localized string similar to Chart Area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartAreaLegend">
            <summary>
              Looks up a localized string similar to Chart Area Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartAxis">
            <summary>
              Looks up a localized string similar to Chart Axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartLegend">
            <summary>
              Looks up a localized string similar to Chart Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartProperties">
            <summary>
              Looks up a localized string similar to Chart Properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartPropertiesDialogTitle">
            <summary>
              Looks up a localized string similar to Chart Properties Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartSeries">
            <summary>
              Looks up a localized string similar to Chart Series.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartType">
            <summary>
              Looks up a localized string similar to Chart Type :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartTypeHeader">
            <summary>
              Looks up a localized string similar to Chart Type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChartVisualStyle">
            <summary>
              Looks up a localized string similar to Chart Visual Style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.CheckBoxVisibility">
            <summary>
              Looks up a localized string similar to Checkbox Visibility :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ChocolateOrange">
            <summary>
              Looks up a localized string similar to ChocolateOrange.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Colorful">
            <summary>
              Looks up a localized string similar to Colorful.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ColorPalette">
            <summary>
              Looks up a localized string similar to Color Palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Column">
            <summary>
              Looks up a localized string similar to Column.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.contextMenuPalettes">
            <summary>
              Looks up a localized string similar to Palettes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.contextMenuSeries">
            <summary>
              Looks up a localized string similar to Series.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.contextMenuZoomAll">
            <summary>
              Looks up a localized string similar to Zoom All.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.contextMenuZooming">
            <summary>
              Looks up a localized string similar to Zooming.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.CoolBlueScale">
            <summary>
              Looks up a localized string similar to CoolBlue.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Copy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.CornerRadius">
            <summary>
              Looks up a localized string similar to Corner Radius :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Custom">
            <summary>
              Looks up a localized string similar to Custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Data">
            <summary>
              Looks up a localized string similar to Data.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.DateTimeInterval">
            <summary>
              Looks up a localized string similar to DateTime Interval :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.DateTimeRange">
            <summary>
              Looks up a localized string similar to DateTime Range :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Default">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.DefaultAlpha">
            <summary>
              Looks up a localized string similar to DefaultAlpha.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.DefaultDark">
            <summary>
              Looks up a localized string similar to DefaultDark.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.DesiredIntervalCount">
            <summary>
              Looks up a localized string similar to Desired Interval Count :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Doughnut">
            <summary>
              Looks up a localized string similar to Doughnut.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EarthTone">
            <summary>
              Looks up a localized string similar to EarthTone.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EdgeLabelDrawingMode">
            <summary>
              Looks up a localized string similar to Edge Label DrawingMode :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EmptyPointsInterior">
            <summary>
              Looks up a localized string similar to Empty Points Interior :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EmptyPointsStyle">
            <summary>
              Looks up a localized string similar to Empty Point Style :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EnableAnimation">
            <summary>
              Looks up a localized string similar to Enable Animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EnableContextMenu">
            <summary>
              Looks up a localized string similar to Enable ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EnableZooming">
            <summary>
              Looks up a localized string similar to Enable Zooming.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.EnableZoomOnScroll">
            <summary>
              Looks up a localized string similar to Enable Zoom On Scroll.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.FastBar">
            <summary>
              Looks up a localized string similar to FastBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.FastColumn">
            <summary>
              Looks up a localized string similar to FastColumn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.FastHiLoOpenClose">
            <summary>
              Looks up a localized string similar to FastHiLoOpenClose.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.FastLine">
            <summary>
              Looks up a localized string similar to FastLine.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.FastScatter">
            <summary>
              Looks up a localized string similar to FastScatter.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.FastStackingColumn">
            <summary>
              Looks up a localized string similar to FastStackingColumn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Foreground">
            <summary>
              Looks up a localized string similar to Foreground :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Funnel">
            <summary>
              Looks up a localized string similar to Funnel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Gantt">
            <summary>
              Looks up a localized string similar to Gantt.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Gradient">
            <summary>
              Looks up a localized string similar to Gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Grayscale">
            <summary>
              Looks up a localized string similar to Grayscale.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.GreenScale">
            <summary>
              Looks up a localized string similar to SpringGreen.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.GridBackground">
            <summary>
              Looks up a localized string similar to Grid Background :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.GridRegionProperties">
            <summary>
              Looks up a localized string similar to Alternative Background .
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Header">
            <summary>
              Looks up a localized string similar to Header  :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.HeaderAlignment">
            <summary>
              Looks up a localized string similar to Header Alignment :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.HeaderSettings">
            <summary>
              Looks up a localized string similar to Header.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.HidePartialLabels">
            <summary>
              Looks up a localized string similar to Hide Partial Labels.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.HiLo">
            <summary>
              Looks up a localized string similar to HiLo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.HiLoArea">
            <summary>
              Looks up a localized string similar to HiLoArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.HiLoOpenClose">
            <summary>
              Looks up a localized string similar to HiLoOpenClose.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Histogram">
            <summary>
              Looks up a localized string similar to Histogram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IconVisibility">
            <summary>
              Looks up a localized string similar to Icon Visibility :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.InteractiveFeatures">
            <summary>
              Looks up a localized string similar to Interactive Features.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Interior">
            <summary>
              Looks up a localized string similar to Interior :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IntersectAction">
            <summary>
              Looks up a localized string similar to Intersect Action :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Interval">
            <summary>
              Looks up a localized string similar to Interval :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IsLograthimic">
            <summary>
              Looks up a localized string similar to Is Lograthimic.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IsRotated">
            <summary>
              Looks up a localized string similar to Is Rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IsSorted">
            <summary>
              Looks up a localized string similar to Is Sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IsVisibleOnLegend">
            <summary>
              Looks up a localized string similar to Is Visible on Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.IsZoomable">
            <summary>
              Looks up a localized string similar to Is Zoomable.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Kagi">
            <summary>
              Looks up a localized string similar to Kagi.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelBackground">
            <summary>
              Looks up a localized string similar to Label Background :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelBorderBrush">
            <summary>
              Looks up a localized string similar to Label Border Brush :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelBorderThickness">
            <summary>
              Looks up a localized string similar to Label Border Thickness :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelCornerRadius">
            <summary>
              Looks up a localized string similar to Label Corner Radius :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelDateTimeFormat">
            <summary>
              Looks up a localized string similar to Label DateTime Format :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelForeground">
            <summary>
              Looks up a localized string similar to Label Foreground :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelFormat">
            <summary>
              Looks up a localized string similar to Label Format :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelRotateAngle">
            <summary>
              Looks up a localized string similar to Label Rotate Angle :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelSettings">
            <summary>
              Looks up a localized string similar to Label Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LabelsMode">
            <summary>
              Looks up a localized string similar to Labels Mode :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LagrathimicRange">
            <summary>
              Looks up a localized string similar to Lagrathimic Range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Legend">
            <summary>
              Looks up a localized string similar to Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendIcon">
            <summary>
              Looks up a localized string similar to Legend Icon :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendLabel">
            <summary>
              Looks up a localized string similar to Legend Label :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendPosition">
            <summary>
              Looks up a localized string similar to Legend Position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendWindowCancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendWindowCheckBox">
            <summary>
              Looks up a localized string similar to CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendWindowIcon">
            <summary>
              Looks up a localized string similar to Icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendWindowOK">
            <summary>
              Looks up a localized string similar to Ok.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LegendWindowTitle">
            <summary>
              Looks up a localized string similar to Chart Legend Properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Line">
            <summary>
              Looks up a localized string similar to Line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LineStroke">
            <summary>
              Looks up a localized string similar to Line Stroke :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LograthimicBase">
            <summary>
              Looks up a localized string similar to Lograthimic Base :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.LograthimicRange">
            <summary>
              Looks up a localized string similar to Lograthimic Range :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Margin">
            <summary>
              Looks up a localized string similar to Margin :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.MaroonRed">
            <summary>
              Looks up a localized string similar to MaroonRed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.MixedFantasy">
            <summary>
              Looks up a localized string similar to MixedFantasy.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.MixedGray">
            <summary>
              Looks up a localized string similar to BrightGray.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.MixedViolet">
            <summary>
              Looks up a localized string similar to MixedViolet.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Nature">
            <summary>
              Looks up a localized string similar to Nature.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Office2007Black">
            <summary>
              Looks up a localized string similar to Office2007Black.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Office2007Blue">
            <summary>
              Looks up a localized string similar to Office2007Blue.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Office2007Silver">
            <summary>
              Looks up a localized string similar to Office2007Silver.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.OpposedPosition">
            <summary>
              Looks up a localized string similar to Opposed Position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Orientation">
            <summary>
              Looks up a localized string similar to Orientation :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Origin">
            <summary>
              Looks up a localized string similar to Origin :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Padding">
            <summary>
              Looks up a localized string similar to Padding :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Panning">
            <summary>
              Looks up a localized string similar to Panning.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Pastel">
            <summary>
              Looks up a localized string similar to Pastel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Pie">
            <summary>
              Looks up a localized string similar to Pie.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.PointAndFigure">
            <summary>
              Looks up a localized string similar to PointAndFigure.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Polar">
            <summary>
              Looks up a localized string similar to Polar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogAdvanced">
            <summary>
              Looks up a localized string similar to Advanced....
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogBWMode">
            <summary>
              Looks up a localized string similar to Black And White Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogCancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogColorMode">
            <summary>
              Looks up a localized string similar to Color Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogPrint">
            <summary>
              Looks up a localized string similar to Print.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogPrintMode">
            <summary>
              Looks up a localized string similar to Print Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.printDialogPrintStretch">
            <summary>
              Looks up a localized string similar to Print Stretch.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Pyramid">
            <summary>
              Looks up a localized string similar to Pyramid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Radar">
            <summary>
              Looks up a localized string similar to Radar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Range">
            <summary>
              Looks up a localized string similar to Range :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.RangeAndInterval">
            <summary>
              Looks up a localized string similar to Range and Interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.RangeArea">
            <summary>
              Looks up a localized string similar to Range Area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.RangeCalculationMode">
            <summary>
              Looks up a localized string similar to Range Calculation Mode :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.RangeColumn">
            <summary>
              Looks up a localized string similar to Range Column.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.RangePadding">
            <summary>
              Looks up a localized string similar to Range Padding :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Renko">
            <summary>
              Looks up a localized string similar to Renko.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ResetZoom">
            <summary>
              Looks up a localized string similar to Reset Zoom.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.RotatedSpline">
            <summary>
              Looks up a localized string similar to RotatedSpline.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Save">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Scatter">
            <summary>
              Looks up a localized string similar to Scatter.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SelectChartArea">
            <summary>
              Looks up a localized string similar to Select Chart Area:.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SelectChartAxis">
            <summary>
              Looks up a localized string similar to Select Chart Axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SelectChartLegend">
            <summary>
              Looks up a localized string similar to Select Chart Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SelectChartSeries">
            <summary>
              Looks up a localized string similar to Select Chart Series.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Settings">
            <summary>
              Looks up a localized string similar to Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ShowSeriesEmptyPoints">
            <summary>
              Looks up a localized string similar to Show Series Empty Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ShowSymbol">
            <summary>
              Looks up a localized string similar to Show Symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SmallTickLinesStroke">
            <summary>
              Looks up a localized string similar to Small Tick Lines Stroke :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SmallTickSize">
            <summary>
              Looks up a localized string similar to Small Tick Size :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SmallTicksPerInterval">
            <summary>
              Looks up a localized string similar to Small Ticks Per Interval :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Spline">
            <summary>
              Looks up a localized string similar to Spline.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.SplineArea">
            <summary>
              Looks up a localized string similar to SplineArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingArea">
            <summary>
              Looks up a localized string similar to StackingArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingArea100">
            <summary>
              Looks up a localized string similar to StackingArea100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingBar">
            <summary>
              Looks up a localized string similar to StackingBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingBar100">
            <summary>
              Looks up a localized string similar to StackingBar100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingColumn">
            <summary>
              Looks up a localized string similar to StackingColumn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingColumn100">
            <summary>
              Looks up a localized string similar to StackingColumn100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingLine">
            <summary>
              Looks up a localized string similar to StackingLine.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingLine100">
            <summary>
              Looks up a localized string similar to StackingLine100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingSpline">
            <summary>
              Looks up a localized string similar to StackingSpline.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingSpline100">
            <summary>
              Looks up a localized string similar to StackingSpline100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingSplineArea">
            <summary>
              Looks up a localized string similar to StackingSplineArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StackingSplineArea100">
            <summary>
              Looks up a localized string similar to StackingSplineArea100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StepArea">
            <summary>
              Looks up a localized string similar to StepArea.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StepLine">
            <summary>
              Looks up a localized string similar to StepLine.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Stroke">
            <summary>
              Looks up a localized string similar to Stroke :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.StrokeThickness">
            <summary>
              Looks up a localized string similar to Stroke Thickness :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.style">
            <summary>
              Looks up a localized string similar to Style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ThreeLineBreak">
            <summary>
              Looks up a localized string similar to ThreeLineBreak.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.TickLineStroke">
            <summary>
              Looks up a localized string similar to Tick Line Stroke :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.TickSize">
            <summary>
              Looks up a localized string similar to Tick Size :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ToolbarLegend">
            <summary>
              Looks up a localized string similar to Show/Hide Legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ToolbarPrint">
            <summary>
              Looks up a localized string similar to Print.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ToolbarSwitchPrint">
            <summary>
              Looks up a localized string similar to Switch Print Mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Tornado">
            <summary>
              Looks up a localized string similar to Tornado.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Triad">
            <summary>
              Looks up a localized string similar to Triad.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.Value_Type">
            <summary>
              Looks up a localized string similar to Value Type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ValueType">
            <summary>
              Looks up a localized string similar to Value Type :.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.VisualStyle">
            <summary>
              Looks up a localized string similar to Visual Style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.WarmCold">
            <summary>
              Looks up a localized string similar to WarmCold.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ZoomIn">
            <summary>
              Looks up a localized string similar to Zoom In.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.Resources.Syncfusion_Chart_WPF.ZoomOut">
            <summary>
              Looks up a localized string similar to Zoom Out.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SparkLine">
             <summary>
             Follow steps 1a or 1b and then 2 to use this custom control in a XAML file.
            
             Step 1a) Using this custom control in a XAML file that exists in the current project.
             Add this XmlNamespace attribute to the root element of the markup file where it is 
             to be used:
            
                 xmlns:MyNamespace="clr-namespace:SparkLine"
            
            
             Step 1b) Using this custom control in a XAML file that exists in a different project.
             Add this XmlNamespace attribute to the root element of the markup file where it is 
             to be used:
            
                 xmlns:MyNamespace="clr-namespace:SparkLine;assembly=SparkLine"
            
             You will also need to add a project reference from the project where the XAML file lives
             to this project and Rebuild to avoid compilation errors:
            
                 Right click on the target project in the Solution Explorer and
                 "Add Reference"->"Projects"->[Select this project]
            
            
             Step 2)
             Go ahead and use your control in the XAML file.
            
              
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.#ctor">
            <summary>
            Constructor for SparkLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsHighPointHighlightedProperty">
            <summary>
             Identifies the IsHighPointHighlighted dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.BandRangeProperty">
            <summary>
             Identifies the BandRange dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.RangeBandInteriorProperty">
            <summary>
            Dependency proeprty for RangeBandInterior
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsEnableRangeBandProperty">
            <summary>
            dependency property for Check RangeBand is enabled or not
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsLowPointHighlightedProperty">
            <summary>
            Dependency property for IsLowPointHighlighted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsFirstPointHighlightedProperty">
            <summary>
            Dependency property for IsFirstPointHighlighted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsLastPointHighlightedProperty">
            <summary>
            Dependency property for IsLastPointHighlighted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsNegativePointsHighlightedProperty">
            <summary>
            Dependency property for IsNegativePointsHighlighted
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.IsMarkerEnabledProperty">
            <summary>
            Dependency property for IsMarkerEnabled
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.HighPointHighlightBrushProperty">
            <summary>
             Identifies the HighPointHighlightBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.LowPointHighlightBrushProperty">
            <summary>
             Identifies the LowPointHighlightBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.FirstPointHighlightBrushProperty">
            <summary>
             Identifies the FirstPointHighlightBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.LastPointHighlightBrushProperty">
            <summary>
             Identifies the LastPointHighlightBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.NegativePointsHighlightBrushProperty">
            <summary>
             Identifies the NegativePointsHighlightBrush dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.LineMarkerTypeProperty">
            <summary>
            Using a DependencyProperty as the backing store for LineMarkerType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.MarkerColorProperty">
            <summary>
            DependencyProperty for MarkerColorProperty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.InteriorProperty">
            <summary>
            DependencyProperty for Sparkline Interior
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.StrokeProperty">
            <summary>
            DependencyProperty for Sparkline Stroke
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.StrokeThicknessProperty">
            <summary>
            DependencyProperty for Sparkline StrokeThickness
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.SparkLineTypeProperty">
            <summary>
            DependencyProperty for Type for Sparkline
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.OriginProperty">
            <summary>
            Using a DependencyProperty as the backing store for Origin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.ShowAxisProperty">
            <summary>
            Using a DependencyProperty as the backing store for ShowAxis.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.OriginLineStrokeProperty">
            <summary>
            Using a DependencyProperty as the backing store for OriginLineStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.VerticalAxisEndPointModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalAxisEndPointMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.VerticalAxisMinimumValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalAxisMinimumValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.VerticalAxisMaximumValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalAxisMaximumValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.DataMemberPathProperty">
            <summary>
            Dependency property for DataMemberPath
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.ItemsSourceProperty">
            <summary>
            Dependency property for ItemsSource for Sparkline
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.OnItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method for Itemssource changes in Sparkline
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.ValueToPoint(System.Double,System.Int32)">
            <summary>
            Return the point value from double value
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.ValueToCoefficient(System.Double)">
            <summary>
            Return double value of Coefficient 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.ValueToIndex(System.Int32)">
            <summary>
            Return double value from int value
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLine.Data">
            <summary>
            Declaration of collection variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLine.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsHighPointHighlighted">
            <summary>
            Get and Set IsHighPointHighlightedProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.BandRange">
            <summary>
            Get and Set BandRangeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.RangeBandInterior">
            <summary>
            Get and Set the RangeBandInteriorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsEnableRangeBand">
            <summary>
            Get and Set IsEnableRangeBand
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsLowPointHighlighted">
            <summary>
            Get and Set the IsLowPointHighlightedProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsFirstPointHighlighted">
            <summary>
            get and Set IsFirstPointHighlightedProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsLastPointHighlighted">
            <summary>
            Get and Set the IsLastPointHighlightedProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsNegativePointsHighlighted">
            <summary>
            Get and set IsNegativePointsHighlightedProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.IsMarkerEnabled">
            <summary>
            Get and Set IsMarkerEnabledProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.HighPointHighlightBrush">
            <summary>
            Get and Set HighPointHighlightBrushProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.LowPointHighlightBrush">
            <summary>
            Get and Set LowPointHighlightBrushProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.FirstPointHighlightBrush">
            <summary>
            Get and Set FirstPointHighlightBrushProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.LastPointHighlightBrush">
            <summary>
            Get and Set LastPointHighlightBrushProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.NegativePointsHighlightBrush">
            <summary>
            Get and Set NegativePointsHighlightBrushProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.LineMarkerType">
            <summary>
            Get and Set LineMarkerTypeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.MarkerColor">
            <summary>
            Get and Set MarkerColorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.Interior">
            <summary>
            Get and Set InteriorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.Stroke">
            <summary>
            Get and Set StrokeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.StrokeThickness">
            <summary>
            Get and Set StrokeThicknessProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.SparkLineType">
            <summary>
            Get and Set SparkLineTypeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.ShowAxis">
            <summary>
            Get and Set ShowAxisProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.OriginLineStroke">
            <summary>
            Get and Set OriginLineStrokeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.VerticalAxisEndPointMode">
            <summary>
            Get and Set VerticalAxisEndPointModeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.VerticalAxisMinimumValue">
            <summary>
            Get and Set VerticalAxisMinimumValueProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.VerticalAxisMaximumValue">
            <summary>
            Get and set VerticalAxisMaximumValueProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.DataMemberPath">
            <summary>
            Get and Set DataMemberPathProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLine.ItemsSource">
            <summary>
            Get and Set ItemsSourceProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SparkLinePresenter">
            <summary>
            Represents the Class SparkLinePresenter for draw SparkLine
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLinePresenter.IndexProperty">
            <summary>
             Using a DependencyProperty as the backing store for Index.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLinePresenter.PenProperty">
            <summary>
             Identifies the Pen dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLinePresenter.DrawingPointsProperty">
            <summary>
            Using a DependencyProperty as the backing store for DrawingPoints.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLinePresenter.StrokeThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for StrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLinePresenter.StrokeProperty">
            <summary>
             Using a DependencyProperty as the backing store for Stroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLinePresenter.InteriorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Interior.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.GetIndex(System.Windows.DependencyObject)">
            <summary>
            Method implemetation for getindex from DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.SetIndex(System.Windows.DependencyObject,System.Int32)">
            <summary>
            method implementation for setindex from the given integer value
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.GetPen(System.Windows.DependencyObject)">
            <summary>
            Method implementation for return pen value from given DependencyObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.SetPen(System.Windows.DependencyObject,System.Windows.Media.Pen)">
            <summary>
            Method implemetation for Set pen value to given DependencyObject
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.#ctor">
            <summary>
            Called when instance created for SparkLinePresenter
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.OnDrawingPointsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Virtual method created for OnDrawingPointsChanged
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.SparkLinePresenter.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
            <remarks>GetVisualChild is the Override method used to get the visual child from the visual collection based on the index value.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.PointView">
            <summary>
            CLR property PointView defiinition
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.VisualCollection">
            <summary>
            Get and Set VisualCollectioProeprty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.DrawingPoints">
            <summary>
            Get and Set DrawingPointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.Interior">
            <summary>
            Get and Set InteriorProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.AffectRender">
            <summary>
            Get and Set AffectRenderProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.Stroke">
            <summary>
            Get and Set StrokeProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.StrokeThickness">
            <summary>
            Get and Set StrokeThicknessProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.SparkLinePresenter.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements.
            </summary>
            <returns>
            The number of visual child elements for this element.
            </returns>
            <remarks>VisualChildrenCount is the Override method used to get the count of the visual child from the visual collection.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SparkLineTypes">
            <summary>
            Enum values for SparkLineTypes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLineTypes.Line">
            <summary>
            Enum value for Line type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLineTypes.Column">
            <summary>
            Enum value for column type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SparkLineTypes.WinLoss">
            <summary>
            Enum value for WinLoss type
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LineMarkerTypes">
            <summary>
            Enum values for LineMarker types
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LineMarkerTypes.Square">
            <summary>
            Enum value for square type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LineMarkerTypes.Circle">
            <summary>
            Enum value for Circle type
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisEndPointMode">
            <summary>
            Enum values for AxisEndPointMode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisEndPointMode.Auto">
            <summary>
            Enum value for Auto Mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisEndPointMode.Custom">
            <summary>
            Enum value for Custom Mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LinePresenter">
            <summary>
            Class represents the LineSegments implemetation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LinePresenter.PointsProperty">
            <summary>
             Identifies the Points dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LinePresenter.SparkLineProperty">
            <summary>
             Identifies the SparkLine dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LinePresenter.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. 
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.LinePresenter.Points">
            <summary>
            Get and Set the PointsProperty
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.LinePresenter.SparkLine">
            <summary>
            Get and Set SparkLineProperty
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TimeLineStyles">
            <summary>
            Enum values for Timeline control style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineStyles.Default">
            <summary>
            Enum value for Default Style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineStyles.Office2007Black">
            <summary>
            Enum value for Office2007Black style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineStyles.Office2007Silver">
            <summary>
            Enum value for Office2007Silver style,
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineStyles.Office2007Blue">
            <summary>
            Enum value for Office2007Blue style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TimeLineStyles.Blend">
            <summary>
            Enum value for Blend style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartToolBarCommands">
            <summary>
            Represents commands that can be invoked in <see cref="T:Syncfusion.Windows.Chart.ChartToolBar"/>.
            </summary>
            <remarks>
            Commanding is an input mechanism in Windows Presentation Foundation 
            which provides input handling at a more semantic level than device input.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_switchPrinting">
            <summary>
            Initializes c_switchPrinting
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_changeChartType">
            <summary>
            Initializes c_changeChartType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_showHideLegend">
            <summary>
            Initializes c_showHideLegend
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_switch3DMode">
            <summary>
            Initializes c_switch3DMode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_ChangeColorPalette">
            <summary>
            Initializes c_ChangeColorPalette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_EnableZooming">
            <summary>
            Initializes c_EnableZooming
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBarCommands.c_propertiesDialogue">
            <summary>
            Initializes c_ShowPropertiesDialogue
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.SwitchPrinting">
            <summary>
            Gets the switch printing.
            </summary>
            <value>The switch printing.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.EnableZooming">
            <summary>
            Gets the enable zooming.
            </summary>
            <value>The enable zooming.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.ChangeChartType">
            <summary>
            Gets the type of the change chart.
            </summary>
            <value>The type of the change chart.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.ShowHideLegend">
            <summary>
            Gets the show hide legend.
            </summary>
            <value>The show hide legend.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.Switch3DMode">
            <summary>
            Gets the switch3 D mode.
            </summary>
            <value>The switch3 D mode.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.ChangeColorPalette">
            <summary>
            Gets the change color palette.
            </summary>
            <value>The change color palette.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBarCommands.PropertiesDialogue">
            <summary>
            Gets the Properties Dialogue.
            </summary>
            <value>The Properties Dialogue.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartToolBar">
            <summary>
            Represents ChartToolBar Class.
            </summary>
            <remarks>
            Chart Toolbar hosts various items to perform Chart functions such as Print,
            Save, Change chart type and so on.
            </remarks>
            <example>
            <code language="XAML">
            &lt;syncfusion:Chart.ToolBar &gt; &lt;syncfusion:ChartToolBar
            CloseButtonVisibility="True" TitleBarVisibility="True" Header="True" /&gt;
            &lt;/syncfusion:Chart.ToolBar&gt;
            </code>
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartToolBar"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBar.ItemsOrientationProperty">
            <summary>
            Identifies the ItemsOrientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBar.HeaderBackgroundProperty">
            <summary>
            Identifies the HeaderBackground dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBar.CloseButtonVisibilityProperty">
            <summary>
            Identifies the CloseButtonVisibility dependency property.
            </summary>     
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBar.TitleBarVisibilityProperty">
            <summary>
            Identifies the TitleBarVisibility dependency property.
            </summary>  
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBar.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>  
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartToolBar.closeButton">
            <summary>
            Declares the ToolBar CloseButton
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartToolBar"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartToolBar"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"></see>.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartToolBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.AddItems">
            <summary>
            Adds the items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.SetChartPalette(System.Windows.UIElement)">
            <summary>
            Sets the chart palette.
            </summary>
            <param name="item">The UIElement item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.SetCharttype(System.Windows.UIElement)">
            <summary>
            Sets the charttype.
            </summary>
            <param name="item">The UIElement item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnSelectedItemChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the Selected Item is changed.
            </summary>
            <param name="d">The DependencyObject.</param>
            <param name="e">The DependencyPropertyChangedEventArgs instance containing the event data.</param> 
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnSelectedItemChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when <see cref="P:Syncfusion.Windows.Chart.ChartToolBar.SelectedItem"/> property is changed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.ToolBarItemType_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonDown event of the toolBarItemType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.ToolBarItemType_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyDown event of the toolBarItemType control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.ToolBarItemPalette_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonDown event of the toolBarItemPalette control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.ToolBarItemPalette_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyDown event of the toolBarItemPalette control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.ToolBarItemProperties_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the KeyDown event of the toolBarItemProperties control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnSwitch3DModeCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the ChartCommands.Switch3DMode routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnEnableZoomingCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartToolBarCommands.EnableZooming"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnShowHideLegendCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartToolBarCommands.ShowHideLegend"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OncolorPaletteCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartToolBarCommands.ChangeColorPalette"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnChangeChartTypeCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartToolBarCommands.ChangeChartType"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnSwitchPrintingCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartToolBarCommands.SwitchPrinting"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.OnPropertiesDialogueCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the <see cref="P:Syncfusion.Windows.Chart.ChartToolBarCommands.PropertiesDialogue"/> routed command;
            </summary>
            <param name="target">The target.</param>
            <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.Serialize">
            <summary>
            Method declaration for Serialize
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartToolBar.Deserialize(System.String)">
            <summary>
            Method declaration for DeSerialize
            </summary>
            <param name="xamlString"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBar.CloseButton">
            <summary>
            Gets or sets the ToolBar CloseButton
            </summary>
            <value>The CloseButton.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBar.ItemsOrientation">
            <summary>
            Gets or sets the Items Orientation. 
            </summary>
            <value>The ItemsOrientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBar.HeaderBackground">
            <summary>
            Gets or sets the Header Background. 
            </summary>
            <value>The HeaderBackground.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBar.CloseButtonVisibility">
            <summary>
            Gets or sets the Close Button Visibility
            </summary>
            <value>The CloseButtonVisibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBar.TitleBarVisibility">
            <summary>
            Gets or sets the TitleBar Visibility
            </summary>
            <value>The TitleBarVisibility.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartToolBar.SelectedItem">
            <summary>
            Gets or sets the Selected Item
            </summary>
            <value>The SelectedItem.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartToolBar.SelectedItemChanged">
            <summary>
            Represents Selected Item changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ToolBarItem">
            <summary>
            Represents Chart ToolBarItem class
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartToolBar"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.IsPressedProperty">
            <summary>
            Identifies the IsPressed dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.IsDropDownProperty">
            <summary>
            Identifies the IsDropDown dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.ItemImageSourceProperty">
            <summary>
            Identifies the ItemImageSource dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.IsOpenProperty">
            <summary>
            Identifies the IsOpen dependency property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ToolBarItem"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.MoveFocusToNextItem">
            <summary>
            Moves the focus to next item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.MoveFocusToPreviousItem">
            <summary>
            Moves the focus to previous item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnIsSelectedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ToolBarItem is selected changed.
            </summary>
            <param name="d">The ToolBarItem DependencyObject.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave"/>�attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles MouseLeftButtonDown event.
            </summary>
            <param name="e">The MouseButtonEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when the <see cref="E:System.Windows.UIElement.KeyDown"/> event is received.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ToolBarItem.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus"/>�attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs"/> that contains event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.CommandProperty">
            <summary>
            Represents the Command dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.CommandTargetProperty">
            <summary>
            Represents the Commandtarget dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ToolBarItem.CommandParameterProperty">
            <summary>
            Gets or sets the CommandParameter dependency property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.ItemImageSource">
            <summary>
            Gets or sets the Item ImageSource
            </summary>
            <value>The ItemImageSource.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.Text">
            <summary>
            Gets or sets the Item's text
            </summary>
            <value>The Text value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.IsOpen">
            <summary>
            Gets or sets a value indicating whether the popup is kept opened
            </summary>
            <value>The IsOpen.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.IsPressed">
            <summary>
            Gets or sets a value indicating whether this instance is pressed.
            </summary>
            <value>
               <c>true</c> if this instance is pressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
              <c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.IsDropDown">
            <summary>
            Gets or sets a value indicating whether this instance is drop down.
            </summary>
            <value>
              <c>true</c> if this instance is drop down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.Command">
            <summary>
            Gets or sets the command that will be executed when the command source is invoked.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.CommandTarget">
            <summary>
            Gets or sets a value indicating the object that the command is being executed on.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ToolBarItem.CommandParameter">
            <summary>
            Gets or sets a user defined data value that can be passed to the command when it is executed.
            </summary>
            <value></value>
            <returns>The command specific data.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertyMetadataOptions">
            <summary>
            Represents ChartPropertyMetadataOptions
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPropertyMetadataOptions.None">
            <summary>
            No options are specified.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPropertyMetadataOptions.AffectsUpdate">
            <summary>
            The update is affected by value changes to this dependency property. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPropertyMetadataOptions.AffectsRedraw">
            <summary>
            The redraw is affected by value changes to this dependency property. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPropertyMetadata">
            <summary>
            Represents ChartPropertyMetadata
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPropertyMetadata.m_options">
            <summary>
            Initializes m_options
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="propertyChangedCallback">The property changed callback.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="propertyChangedCallback">The property changed callback.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
            <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
            <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></see> against this property.</param>
            <exception cref="T:System.ArgumentException">defaultValue cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see>; see Remarks.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Object,Syncfusion.Windows.Chart.ChartPropertyMetadataOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,Syncfusion.Windows.Chart.ChartPropertyMetadataOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="propertyChangedCallback">The property changed callback.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,Syncfusion.Windows.Chart.ChartPropertyMetadataOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="propertyChangedCallback">The property changed callback.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,Syncfusion.Windows.Chart.ChartPropertyMetadataOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPropertyMetadata"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
            <param name="propertyChangedCallback">The property changed callback.</param>
            <param name="coerceValueCallback">The coerce value callback.</param>
            <param name="options">The options.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPropertyMetadata.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartResources">
            <summary>
            Represents ChartResources class. Contains resources used in chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.m_actions">
            <summary>
            Initializes m_actions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.m_annotation">
            <summary>
            Initializes m_annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.m_series">
            <summary>
            Initializes m_series
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.m_palettes">
            <summary>
            Initializes m_palettes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemSave">
            <summary>
            Initializes toolBarItemSave
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemPrint">
            <summary>
            Initializes toolBarItemPrint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemSwitchPrint">
            <summary>
            Initializes toolBarItemSwitchPrint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemCopy">
            <summary>
            Initializes toolBarItemCopy
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemColorPalette">
            <summary>
            Initializes toolBarItemColorPalette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemLegend">
            <summary>
            Initializes toolBarItemLegend
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemType">
            <summary>
            Initializes toolBarItemType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemZoom">
            <summary>
            Initializes toolBarItemZoom
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartResources.toolBarItemProperties">
            <summary>
            Initializes toolBarItemProperties
            </summary>        
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartResources.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Chart.ChartResources"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartResources.LoadImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the image.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="imagename">The imagename.</param>
            <returns>The image to load</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartResources.LoadCursor(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the cursor.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="cursorname">The cursorname.</param>
            <returns>The cursor</returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.Actions">
            <summary>
            Gets the actions image.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.annotation">
            <summary>
            Gets the actions image.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.Series">
            <summary>
            Gets the series image.
            </summary>
            <value>The series.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.Palettes">
            <summary>
            Gets the palettes image.
            </summary>
            <value>The palettes.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemSave">
            <summary>
            Gets the ToolBarItem Save image.
            </summary>
            <value>The ToolBarItemSave.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemZoom">
            <summary>
            Gets the ToolBarItem Zoom image.
            </summary>
            <value>The ToolBarItemZoom.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemSwitchPrint">
            <summary>
            Gets the ToolBarItem SwitchPrint image.
            </summary>
            <value>The ToolBarItemSwitchPrint.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemPrint">
            <summary>
            Gets the ToolBarItem Print image.
            </summary>
            <value>The ToolBarItemPrint.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemCopy">
            <summary>
            Gets the ToolBarItem Copy image.
            </summary>
            <value>The ToolBarItemCopy.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemColorPalette">
            <summary>
            Gets the ToolBarItem ColorPalette image.
            </summary>
            <value>The ToolBarItemColorPalette.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemLegend">
            <summary>
            Gets the ToolBarItem Legend image.
            </summary>
            <value>The ToolBarItemLegend.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemType">
            <summary>
            Gets the ToolBarItem Type image.
            </summary>
            <value>The ToolBarItemType.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartResources.ToolBarItemProperties">
            <summary>
            Gets the ToolBarItem Properties image.
            </summary>
            <value>The ToolBarItemProperties.</value>
        </member>
        <member name="T:Syncfusion.ChartWPFAssembly">
            <summary>
            Represents ChartWPFAssembly
            </summary>
        </member>
        <member name="F:Syncfusion.ChartWPFAssembly.Name">
            <summary>
            Initializes Name
            </summary>
        </member>
        <member name="F:Syncfusion.ChartWPFAssembly.Assembly">
            <summary>
            Initializes Assembly
            </summary>
        </member>
        <member name="F:Syncfusion.ChartWPFAssembly.RootNamespace">
            <summary>
            Initializes RootNamespace
            </summary>
        </member>
        <member name="M:Syncfusion.ChartWPFAssembly.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.ChartWPFAssembly"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.ChartWPFAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as a eventhandler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
            <remarks>
            Use this handler when reading back types from a serialization stread
            saved with an earlier version of this assembly.
            </remarks>
        </member>
        <member name="T:Syncfusion.AssemblyInfo">
            <summary>
            Represents AssemblyInfo
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDockPanel">
            <summary>
            Represents main chart docking panel.Chart docking panel provides docking abilities for chart elements.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDockPanel"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.DockProperty">
            <summary>
            Identifies the Dock dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.AlignmentProperty">
            <summary>
            Identifies the Alignment dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.FloatingOffsetProperty">
            <summary>
            Identifies the FloatingOffset dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.ElementMarginProperty">
            <summary>
            Identifies the ElementMargin dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.RootElementProperty">
            <summary>
            Identifies the RootElement dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.FloatAlignmentXProperty">
            <summary>
            Identifies the FloatAlignmentX dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.FloatAlignmentYProperty">
            <summary>
            Identifies the FloatAlignmentY dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.m_movedElement">
            <summary>
            Initializes m_movedElement
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.m_rootElement">
            <summary>
            Initializes m_rootElement
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.m_controlsThickness">
            <summary>
            Initializes m_controlsThickness
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.m_resultDockRect">
            <summary>
            Initializes m_resultDockRect
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDockPanel.m_mouseOffset">
            <summary>
            Initializes m_mouseOffset
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.SetDock(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartDock)">
            <summary>
            Sets the dock of Chart Dock panel's child element.
            </summary>
            <param name="element">The element.</param>
            <param name="dock">The docking value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.GetDock(System.Windows.UIElement)">
            <summary>
            Gets the dock attached property on passed <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>DOcking value for element.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.SetAlignment(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartAlignment)">
            <summary>
            Sets the alignment of Chart Dock panel's child element.
            </summary>
            <param name="element">The element.</param>
            <param name="alignment">The alignment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.GetAlignment(System.Windows.UIElement)">
            <summary>
            Gets the alignment attached property on passed <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The element.</param>
            <returns>The ChartAlignment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Invoked when the <see cref="T:System.Windows.Media.VisualCollection"></see> of a visual object is modified.
            </summary>
            <param name="visualAdded">The <see cref="T:System.Windows.Media.Visual"></see> that was added to the collection.</param>
            <param name="visualRemoved">The <see cref="T:System.Windows.Media.Visual"></see> that was removed from the collection.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDockPanel"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"></see> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"></see>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnDockChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when dock is changed.
            </summary>
            <param name="d">The DependencyObject d value.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when alignment is changed.
            </summary>
            <param name="dpObj">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnFloatAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when float alignment is changed.
            </summary>
            <param name="dpObj">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnRootElementChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when root element is changed.
            </summary>
            <param name="dpObj">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.EnsureRectIsInside(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Ensures the rectangle is inside specified bounds.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="rect">The rectangle.</param>
            <returns>Returns the Rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnElementMouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when mouse button released over panel's element.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnElementMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when mouse button is presssed over panel's element.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.OnElementMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse is moved over panel's element.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.MoveDockingElement(Syncfusion.Windows.Chart.ChartDock,System.Windows.Point)">
            <summary>
            Moves the docking element.
            </summary>
            <param name="currentDock">The current dock.</param>
            <param name="point">The point.</param>
            <returns>Returns the docking point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.MoveFloatingElement(Syncfusion.Windows.Chart.ChartDock,System.Windows.Point)">
            <summary>
            Moves the floating element.
            </summary>
            <param name="currentDock">The current dock.</param>
            <param name="point">The point value.</param>
            <returns>The floating point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.ArrangeElement(System.Windows.UIElement,Syncfusion.Windows.Chart.ChartDock,System.Windows.Rect)">
            <summary>
            Arranges the element.
            </summary>
            <param name="element">The element.</param>
            <param name="dock">The dock value.</param>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDockPanel.BringToFront(System.Windows.UIElement)">
            <summary>
            Brings element to front.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDockPanel.Orientation">
            <summary>
            Gets or sets the panel's orientation. This is a dependency property.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDockPanel.FloatingOffset">
            <summary>
            Gets or sets the floating offset. This is a dependency property.
            </summary>
            <value>The floating offset.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDockPanel.ElementMargin">
            <summary>
            Gets or sets the element margin. This is a dependency property.
            </summary>
            <value>The element margin.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDockPanel.RootElement">
            <summary>
            Gets or sets the root element. This is a dependency property.
            </summary>
            <value>The root element.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDockPanel.FloatAlignmentX">
            <summary>
            Gets or sets the float alignment X. This is a dependency property.
            </summary>
            <value>The float alignment X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartDockPanel.FloatAlignmentY">
            <summary>
            Gets or sets the float alignment Y. This is a dependency property.
            </summary>
            <value>The float alignment Y.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartGrid">
            <summary>
            Represents ChartGrid class.
            </summary>
            <remarks>Class instance is created automatically by WPF Chart building system.</remarks>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartGrid"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGrid.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGrid.CalcTypeProperty">
            <summary>
            Identifies the CalcType dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGrid.AutoRowsCountProperty">
            <summary>
            Identifies the AutoRowsCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGrid.AutoColumnsCountProperty">
            <summary>
            Identifies the AutoColumnsCount dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGrid.CalcCoefficientProperty">
            <summary>
            Identifies the CalcCoefficient dependency property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGrid.m_isAutoSetInvalidate">
            <summary>
            Initializes m_isAutoSetInvalidate
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartGrid">ChartGrid</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartGrid.MeasureOverride(System.Windows.Size)">
            <summary>
            Computes the desired size of the <see cref="T:System.Windows.Controls.Primitives.UniformGrid"></see> by measuring all of the child elements.
            </summary>
            <param name="constraint">The <see cref="T:System.Windows.Size"></see> of the available area for the grid.</param>
            <returns>
            The desired <see cref="T:System.Windows.Size"></see> based on the child content of the grid and the constraint parameter.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartGrid.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Invoked when the <see cref="T:System.Windows.Media.VisualCollection"></see> of a visual object is modified.
            </summary>
            <param name="visualAdded">The <see cref="T:System.Windows.Media.Visual"></see> that was added to the collection.</param>
            <param name="visualRemoved">The <see cref="T:System.Windows.Media.Visual"></see> that was removed from the collection.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartGrid"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartGrid.OnAutoCalcChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises on AutoCalcChanged
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">DependencyPropertyChangedEvent arguments e.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartGrid.Orientation">
            <summary>
            Gets or sets the Orientation
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartGrid.CalcType">
            <summary>
            Gets or sets the ChartGrid CalcCellType
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartGrid.AutoRowsCount">
            <summary>
            Gets or sets the AutoRowsCount
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartGrid.AutoColumnsCount">
            <summary>
            Gets or sets the AutoColumnsCount
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartGrid.CalcCoefficient">
            <summary>
            Gets or sets the CalcCoefficient
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.UniformWrapPanel">
            <summary>
            Custom panel implementation for UniformWrapPanel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UniformWrapPanel.#ctor">
            <summary>
            Empty constructor for UniformWrapPanel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UniformWrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.WrapPanel"/> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)"/> pass.
            </summary>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.
            </returns>
            <param name="constraint">An upper limit <see cref="T:System.Windows.Size"/> that should not be exceeded.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.UniformWrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.WrapPanel"/> element.
            </summary>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the arranged size of this <see cref="T:System.Windows.Controls.WrapPanel"/> element and its children.
            </returns>
            <param name="finalSize">The <see cref="T:System.Windows.Size"/> that this element should use to arrange its child elements.</param>
        </member>
        <member name="T:Syncfusion.Windows.Chart.BinarySearchUtils">
            <summary>
            Represents BinarySearchUtils
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BinarySearchUtils.GetIndexRangeByRealRange(System.Collections.Generic.IList{Syncfusion.Windows.Chart.IChartDataPoint},Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Gets the index range by real range.
            </summary>
            <param name="points">The points.</param>
            <param name="range">The range.</param>
            <returns>The ChartIndexRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BinarySearchUtils.SerializeCollection``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Serializes the collections.
            </summary>
            <typeparam name="T">The type param</typeparam>
            <param name="xList">The x list.</param>
            <param name="yList">The y list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.BinarySearchUtils.GetClosestSmallestEqualToValue(System.Collections.Generic.IList{Syncfusion.Windows.Chart.ChartSegment},System.Int32,System.Int32,System.Double,Syncfusion.Windows.Chart.ChartSegment@)">
            <summary>
            Gets the closest, smallest and equal value to specified value.
            </summary>
            <param name="sortedList">The sorted list.</param>
            <param name="from"> The From value.</param>
            <param name="to">The To value.</param>
            <param name="value">The value.</param>
            <param name="drawing">The drawing.</param>
            <returns>The Closest Smallest Equal Value</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartIndexRange">
            <summary>
            Represents chart indexed range struct.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartIndexRange.m_start">
            <summary>
            Initializes m_start
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartIndexRange.m_interval">
            <summary>
            Initializes m_interval
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartIndexRange.m_end">
            <summary>
            Initializes m_end
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartIndexRange.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartIndexRange"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end value.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartIndexRange.Start">
            <summary>
            Gets the start of range.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartIndexRange.Interval">
            <summary>
            Gets the range interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartIndexRange.End">
            <summary>
            Gets the endof range.
            </summary>
            <value>The end value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartIndexRange.Count">
            <summary>
            Gets the points count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartMath">
            <summary>
            Represents class for specific chart mathematical values.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMath.ToDegree">
            <summary>
            Initializes ToDegree
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMath.ToRadial">
            <summary>
            Initializes ToRadial
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMath.Percent">
            <summary>
            Initializes Percent
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMath.DoublePI">
            <summary>
            Initializes DoublePI
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMath.HalfPI">
            <summary>
            Initializes HalfPI
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartMath.OneAndHalfPI">
            <summary>
            Initializes OneAndHalfPI
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.SolveQuadraticEquation(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solves quadratic equation in form a*x^2 + b*x + c = 0
            </summary>
            <param name="a">The A component</param>
            <param name="b">The B component</param>
            <param name="c">The C component</param>
            <param name="root1">First root.</param>
            <param name="root2">Second root.</param>
            <returns>Bool value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.SolveSimultaneousEquations(System.Windows.Vector,System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Solves the simultaneous equations in from a*x1 + b*x2 = c.
            </summary>
            <param name="a">The a parameters.</param>
            <param name="b">The b parameters.</param>
            <param name="c">The c parameters.</param>
            <returns>The Vector</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.MinMax(System.Double,System.Double,System.Double)">
            <summary>
            Gets minimal value from <c>value</c> or <c>min</c> and maximal from <c>value</c> or <c>max</c>.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimal value.</param>
            <param name="max">The maximal value.</param>
            <returns>The MinMax value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.Min(System.Double[])">
            <summary>
            Gets minimal value from parameters.
            </summary>
            <param name="values">The parameters</param>
            <returns>The minimal value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.Max(System.Double[])">
            <summary>
            Gets maximal value from parameters.
            </summary>
            <param name="values">The parameters</param>
            <returns>The maximal value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.MaxZero(System.Double)">
            <summary>
            Gets maximal value from parameter or zero.
            </summary>
            <param name="value">The value.</param>
            <returns>The double value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.MinZero(System.Double)">
            <summary>
            Gets minimal value from parameter or zero.
            </summary>
            <param name="value">The value.</param>
            <returns>The MinZero value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartMath.Round(System.Double,System.Double,System.Boolean)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="x">The x value.</param>
            <param name="div">The divider.</param>
            <param name="up">if set to <c>true</c> value will be rounded up.</param>
            <returns>The Round off value</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLayoutUtils">
            <summary>
            Represents chart layout utils class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLayoutUtils.C_half">
            <summary>
            Initializes c_half
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetCenter(System.Windows.Size)">
            <summary>
            Gets the center.
            </summary>
            <param name="size">The size value.</param>
            <returns>The vector center value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetCenter(System.Windows.Rect)">
            <summary>
            Gets the center.
            </summary>
            <param name="rect">The rect value.</param>
            <returns>The center point value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetRectByCenter(System.Windows.Point,System.Windows.Size)">
            <summary>
            Gets the rect by center.
            </summary>
            <param name="center">The center.</param>
            <param name="size">The size value.</param>
            <returns>The Rect value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetRectByCenter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the rect by center.
            </summary>
            <param name="cx">The cx value.</param>
            <param name="cy">The cy value.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The Rect value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.Subtractthickness(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            Subtracts the thickness.
            </summary>
            <param name="rect">The rect value.</param>
            <param name="thickness">The thickness.</param>
            <returns>The Rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.Subtractthickness(System.Windows.Size,System.Windows.Thickness)">
            <summary>
            Subtracts the thickness.
            </summary>
            <param name="size">The size value.</param>
            <param name="thickness">The thickness.</param>
            <returns>Returns the size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.Addthickness(System.Windows.Rect,System.Windows.Thickness)">
            <summary>
            The Addthickness method
            </summary>
            <param name="rect">The Rect value</param>
            <param name="thickness">The thickness</param>
            <returns>The rectangle</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartLayoutUtils"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.Addthickness(System.Windows.Size,System.Windows.Thickness)">
            <summary>
            The Addthickness method
            </summary>
            <param name="size">The size value</param>
            <param name="thickness">The thickness value</param>
            <returns>Returns the size</returns>
             <seealso cref="T:Syncfusion.Windows.Chart.ChartLayoutUtils"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetUIElementBounds(System.Windows.UIElement)">
            <summary>
            The GetUIElementBounds method
            </summary>
            <param name="element">The element</param>
            <returns>The Rect value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.CalcTransform(System.Windows.Point,System.Windows.Vector,System.Windows.Point,System.Windows.Vector)">
            <summary>
            The CalcTransform method
            </summary>
            <param name="oldLoc">The old location</param>
            <param name="oldDir">The old direction</param>
            <param name="newLoc">The new location</param>      
            <param name="newDir">The new direction</param>  
            <returns>The matrix</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetStartPointBy(System.Windows.Size,System.Windows.Rect,Syncfusion.Windows.Chart.ChartAlignment,Syncfusion.Windows.Chart.ChartAlignment)">
            <summary>
            Gets the start point by.
            </summary>
            <param name="realSize">Size of the real.</param>
            <param name="fullRect">The full rect.</param>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>The start point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetStartPointBy(System.Windows.Size,System.Windows.Size,Syncfusion.Windows.Chart.ChartAlignment,Syncfusion.Windows.Chart.ChartAlignment)">
            <summary>
            Gets the start point by.
            </summary>
            <param name="realSize">Size of the real.</param>
            <param name="fullSize">The full size.</param>
            <param name="horizontal">The horizontal.</param>
            <param name="vertical">The vertical.</param>
            <returns>The start point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.GetStartValueBy(System.Double,System.Double,Syncfusion.Windows.Chart.ChartAlignment)">
            <summary>
            Gets the start value by.
            </summary>
            <param name="realSize">Size of the real.</param>
            <param name="fullSize">The full size.</param>
            <param name="alignment">The alignment.</param>
            <returns>The start value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLayoutUtils.CheckSize(System.Windows.Size)">
            <summary>
            Checks the members of size by infinity.
            </summary>
            <param name="size">The size value.</param>
            <returns>Returns the size</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDataUtils">
            <summary>
            Represents chart data utils class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.GetObjectByPath(System.Object,System.String)">
            <summary>
            Gets the object by path.
            </summary>
            <param name="obj">The obj value.</param>
            <param name="path">The path value.</param>
            <returns>Returns the object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.GetPropertyDescriptor(System.Object,System.String)">
            <summary>
            returns the value of the given path.
            </summary>
            <param name="obj"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.ConvertToDouble(System.Object)">
            <summary>
            Converts to double.
            </summary>
            <param name="obj">The obj value.</param>
            <returns>The double value</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDataUtils"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.GetDoubleByPath(System.Object,System.String)">
            <summary>
            Gets the double by path.
            </summary>
            <param name="obj">The obj value.</param>
            <param name="path">The path value.</param>
            <returns>The double value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.ResolveSegmentTemplate(System.Type)">
            <summary>
            Resolves the segment template.
            </summary>
            <param name="segmentType">Type of the segment.</param>
            <returns>Corresponding <see cref="T:System.Windows.DataTemplate"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.GetResourceByString(System.String)">
            <summary>
            Resolves the segment data template by string.
            </summary>
            <param name="key">string data.</param>
            <returns>Corresponding <see cref="T:System.Windows.DataTemplate"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartDataUtils.CloneVisualState(System.Windows.Media.Visual)">
            <summary>
            Clones the state of the target visual element.
            </summary>
            <param name="targetElement">The target element.</param>
            <returns>Returns the Visual</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DoubleRangeConverter">
            <summary>
            Represents DoubleRangeConverter 
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleRangeConverter.C_separator">
            <summary>
            Initializes c_separator
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.DoubleRangeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.DoubleRangeConverter"/>        
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <seealso cref="T:Syncfusion.Windows.Chart.DoubleRangeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DateTimeRangeConverter">
            <summary>
            Represents DateTimeRangeConverter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DateTimeRangeConverter.C_separator">
            <summary>
            Initializes c_separator
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DateTimeRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.DateTimeRangeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DateTimeRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <seealso cref="T:Syncfusion.Windows.Chart.DateTimeRangeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DateTimeRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <seealso cref="T:Syncfusion.Windows.Chart.DateTimeRangeConverter"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DateTimeRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"></see>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value parameter to.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null. </exception>
            <seealso cref="T:Syncfusion.Windows.Chart.DateTimeRangeConverter"/>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DoubleRange">
            <summary>
            Represents the DoubleRange structure
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleRange.c_empty">
            <summary>
            Initializes c_empty
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleRange.m_start">
            <summary>
            Initializes m_start
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleRange.m_end">
            <summary>
            Initializes m_end
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.DoubleRange"/> struct.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            DoubleRange method implementation for three arguments.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="isSort"></param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_Addition(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Union operator
            </summary>
            <param name="leftRange">First double range</param>
            <param name="rightRange">Second double range</param>
            <returns>The Union value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_Addition(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Union operator
            </summary>
            <param name="range">First double range</param>
            <param name="value">Second double range</param>
            <returns>The Union value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_GreaterThan(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            The operator
            </summary>
            <param name="range">The DoubleRange </param>
            <param name="value">The double value</param>
            <returns>The range value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_GreaterThan(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Return Bool value based upon the DoubleRange value.
            </summary>
            <param name="range"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_LessThan(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Return Bool value based upon the DoubleRange value.
            </summary>
            <param name="range"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_LessThan(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            The operator
            </summary>
            <param name="range">The DoubleRange </param>
            <param name="value">The double value</param>
            <returns>The range value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_Equality(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            The operator method
            </summary>
            <param name="leftRange">The left DoubleRange</param>
            <param name="rightRange">The right DoubleRange</param>
            <returns>The left range</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.op_Inequality(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            The operator method
            </summary>
            <param name="leftRange">The left range</param>
            <param name="rightRange">The right range</param>
            <returns>The inverse left range</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Union(System.Double[])">
            <summary>
            Create range by array of double.
            </summary>
            <param name="values">The values</param>
            <returns>The DoubleRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Union(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Unions the specified left range with right range.
            </summary>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns>The DoubleRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Union(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Unions the specified range with value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The DoubleRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Scale(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Scales the specified range by value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The DoubleRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Offset(Syncfusion.Windows.Chart.DoubleRange,System.Double)">
            <summary>
            Offsets the specified range by value.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value.</param>
            <returns>The DoubleRange</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Exclude(Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange,Syncfusion.Windows.Chart.DoubleRange@,Syncfusion.Windows.Chart.DoubleRange@)">
            <summary>
            Excludes the specified range.
            </summary>
            <param name="range">The range.</param>
            <param name="excluder">The excluder.</param>
            <param name="leftRange">The left range.</param>
            <param name="rightRange">The right range.</param>
            <returns>True if empty</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Intersects(Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Checks whether intersection region of two ranges is not empty.
            </summary>
            <param name="range">the DoubleRange</param>
            <returns><b>true</b> if  intersection is not empty</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Intersects(System.Double,System.Double)">
            <summary>
            Checks whether intersection region of two ranges is not empty.
            </summary>
            <param name="start">The start value</param>
            <param name="end">The end value</param>
            <returns> true if  intersection is not empty</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Inside(System.Double)">
            <summary>
            Checks whether the given value is inside the axis range
            </summary>
            <param name="value">The value.</param>
            <returns>True if value is inside</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Inside(Syncfusion.Windows.Chart.DoubleRange)">
            <summary>
            Checks whether the given range is inside the axis range
            </summary>
            <param name="range">The range.</param>
            <returns>True is range is inside</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DoubleRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DoubleRange.Empty">
            <summary>
            Gets the Empty value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DoubleRange.Start">
            <summary>
            Gets the Start value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DoubleRange.End">
            <summary>
            Gets the End value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DoubleRange.Delta">
            <summary>
            Gets the Delta value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DoubleRange.Median">
            <summary>
            Gets the median.
            </summary>
            <value>The median.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DoubleRange.IsEmpty">
            <summary>
            Gets a value indicating whether IsEmpty 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DateTimeRange">
            <summary>
            Ranging DataTime structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DateTimeRange.m_start">
            <summary>
            Initilaizes m_start
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DateTimeRange.m_end">
            <summary>
            Initilaizes m_end
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.DateTimeRange"/> struct.
            </summary>
            <param name="rangeStart">The range start.</param>
            <param name="rangeEnd">The range end.</param>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DateTimeRange.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DateTimeRange.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.DateTimeRange.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAlignment">
             <summary>
             Represents the chart alignment options.
            
             Enumeration represents value that can be set on <see cref="T:Syncfusion.Windows.Chart.CameraProjection"/> property 
             when ChartArea is in 3D mode
             </summary>  
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAlignment.Near">
            <summary>
            Sets element to the closest left top corner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAlignment.Center">
            <summary>
            Sets element to the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAlignment.Far">
            <summary>
            Sets element to the closest right bottom corner.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartGridCalcCellType">
            <summary>
            Represents ChartGridCalcCellType Enumeration
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGridCalcCellType.None">
            <summary>
            The none value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGridCalcCellType.Auto">
            <summary>
            The auto set value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartGridCalcCellType.Children">
            <summary>
            The children
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartValueType">
            <summary>
            Specifies the different values that are natively used.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartValueType.Double">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.ChartValueType.Double"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartValueType.DateTime">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.ChartValueType.DateTime"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartValueType.String">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.ChartValueType.String"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartValueType.TimeSpan">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.ChartValueType.TimeSpan"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartValueType.Logarithmic">
            <summary>
              Logarithmic value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartColorPalette">
            <summary>
            Pre-defined palettes for use with the ChartControl. Palettes are simply a group of colors that
            can be used to provide a better visual appearance when displaying multiple chart series.
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Default">
            <summary>
            Default palette.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.DefaultDark">
            <summary>
            Default dark palette.
            </summary> 
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.DefaultAlpha">
            <summary>
            Default palette with alpha blending.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.EarthTone">
            <summary>
            Palette containing earth tone colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Analog">
            <summary>
            Palette containing analog colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Colorful">
            <summary>
            Colorful palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Nature">
            <summary>
            Palette containing the colors of nature.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Pastel">
            <summary>
            Palette containing pastel colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Triad">
            <summary>
            Palette containing triad colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.WarmCold">
            <summary>
            Palette that contains mixed warm and cold colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Grayscale">
            <summary>
            GrayScale color palette which can be used for monochrome printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Office2007Blue">
            <summary>
            Office 2007 Blue palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Office2007Black">
            <summary>
            Office 2007 Black palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Office2007Silver">
            <summary>
            Office 2007 Silver palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Gradient">
            <summary>
            Gradient palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.MixedGray">
            <summary>
            MixedGray palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.BlueScale">
            <summary>
            BlueScale palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.MaroonRed">
            <summary>
            MaroonRed palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.GreenScale">
            <summary>
            GreenScale palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.MixedViolet">
            <summary>
            MixedViolet palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.CoolBlueScale">
            <summary>
            CoolBlueScale palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.ChocolateOrange">
            <summary>
            Chocolateorange palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.MixedFantasy">
            <summary>
            MixedFantasy palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Metro">
            <summary>
            Metro palette
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartColorPalette.Custom">
            <summary>
            Custom user assigned color palette.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartStyles">
            <summary>
            Enum values for ChartStyles
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GrayScale">
            <summary>
            GrayScale ChartStyles
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MixedFantacy">
            <summary>
            MixedFantasy ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BlueScale">
            <summary>
            blueScale ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MaroonRed">
            <summary>
            MaroonRed ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GreenScale">
            <summary>
            GreenScale ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MixedViolet">
            <summary>
            MixedViolet ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.CoolBlueScale">
            <summary>
            CoolBlueScale ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ChocolateOrange">
            <summary>
            ChocolateOrange ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GrayWithBorder">
            <summary>
            GrayWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MixedWithBorder">
            <summary>
            MixedWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BlueWithBorder">
            <summary>
            BluWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.RedWithBorder">
            <summary>
            RedWithBoder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GreenWithBorder">
            <summary>
            GreenWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.VioletWithBorder">
            <summary>
            VioletWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.CoolBlueWithBorder">
            <summary>
            CoolBlueWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ChocolateWithBorder">
            <summary>
            ChocolateWithBorder ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaGray">
            <summary>
            AlphaGray ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaFantacy">
            <summary>
            AlphaFantacy ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaBlue">
            <summary>
            AlphaBlue ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaRed">
            <summary>
            AlphaRed ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaGreen">
            <summary>
            AlphaGreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaViolet">
            <summary>
            AlphaViolet ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaCoolBlue">
            <summary>
            AlphaCoolBlue ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AlphaOrange">
            <summary>
            AlphaOrange ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledGray">
            <summary>
            EnabledGray ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledMixed">
            <summary>
            EnabledMixed ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledBlue">
            <summary>
            EnabledBlue ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledRed">
            <summary>
            Enabledred ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledGreen">
            <summary>
            EnabledGreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledViolet">
            <summary>
            EnabledGreen ChartStyle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledCoolBlue">
            <summary>
            EnabledCoolBlue ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.EnabledChocolate">
            <summary>
            EnabledChocolate ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GrayScreen">
            <summary>
            GrayScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MixedScreen">
            <summary>
            MixedScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BlueScreen">
            <summary>
            BlueScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.RedScreen">
            <summary>
            RedScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GreenScreen">
            <summary>
            GreenScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.VioletScreen">
            <summary>
            VioletScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.CoolBlueScreen">
            <summary>
            CoolBlueScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ChocolateScreen">
            <summary>
            ChocolateScreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BlendGray">
            <summary>
            BlendGray ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MixedBlend">
            <summary>
            MixedBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BlueBlend">
            <summary>
            BlueBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.RedBlend">
            <summary>
            RedBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.GreenBlend">
            <summary>
            GreenBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.VioletBlend">
            <summary>
            VioletBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.CoolBlueBlend">
            <summary>
            CoolBlueBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ChocolateBlend">
            <summary>
            ChocolateBlend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Default">
            <summary>
            Default ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.AeroNormalColor">
            <summary>
            AeroNormalColor ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.LunaMetallic">
            <summary>
            LunaMetallic ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.LunaNormalColor">
            <summary>
            LunaNormalColor ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.LunaHomestead">
            <summary>
            LunaHomestead ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.RoyaleNormalColor">
            <summary>
            RoyaleNormalColor ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ZuneNormalColor">
            <summary>
            ZuneNormalColor ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.CoolBlue">
            <summary>
            CoolBlue ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BlueWave">
            <summary>
            BlueWave ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ChocolateYellow">
            <summary>
            ChocolateYellow ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.SpringGreen">
            <summary>
            SpringGreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.BrightGray">
            <summary>
            BrightGray ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Blend">
            <summary>
            Blend ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.ForestGreen">
            <summary>
            ForestGreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.LawnGreen">
            <summary>
            LawnGreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.MixedGreen">
            <summary>
            MixedGreen ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.OrangeRed">
            <summary>
            OrangeRed ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Office2007Blue">
            <summary>
            Office2007Blue ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Office2007Black">
            <summary>
            Office2007Black ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Office2007Silver">
            <summary>
            Office2007Silver ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Office2003">
            <summary>
            Office2003 ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Vs2010">
            <summary>
            VS2010 ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.Metro">
            <summary>
            Metro  ChartStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartStyles.None">
            <summary>
            None ChartStyle
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.RangeCalculationMode">
            <summary>
             Specifies the options for the action that is to be taken when labels intersect each other.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.RangeCalculationMode.AdjustAcrossChartTypes">
            <summary>
            All series will have plus one range added
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.RangeCalculationMode.ConsistentAcrossChartTypes">
            <summary>
            All series segments will start from 0th point
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLabelIntersectAction">
            <summary>
             Specifies the options for the action that is to be taken when labels intersect each other.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.None">
            <summary>
            No special action is taken. Labels may intersect.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.Wrap">
            <summary>
            Labels are rotated to avoid intersection. <see cref="P:Syncfusion.Windows.Chart.ChartAxis.LabelRotateAngle"/> property doesn't make effect in this mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.MultipleRows">
            <summary>
            Labels are wrapped into multiple rows to avoid intersection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.Hide">
            <summary>
            Labels are hidden to avoid intersection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLabelIntersectAction.Rotate">
            <summary>
            Labels are rotated to avoid intersection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxesType">
            <summary>
            Identifies axes types enumeration.
            </summary>
            <example>
            Intended for internal use
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxesType.None">
            <summary>
            Represents No axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxesType.CartesianAxes">
            <summary>
            Cartesian axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxesType.PolarAxes">
            <summary>
            Polar axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Symbol">
            <summary>
            Symbol Enum to set Predefined and User-defined SymbolTemplates
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAdornmentInfo"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Custom">
            <summary>
            Custom option to set User-defined SymbolTemplates
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Ellipse">
            <summary>
            Renders Ellipse symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Cross">
            <summary>
            Renders Cross symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Diamond">
            <summary>
            Renders Diamond symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Hexagon">
            <summary>
            Renders Hexagon symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.HorizontalLine">
            <summary>
            Renders HorizontalLine symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.InvertedTriangle">
            <summary>
            Renders InvertedTriangle symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Pentagon">
            <summary>
            Renders Pentagon symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Plus">
            <summary>
            Renders Plus symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Square">
            <summary>
            Renders Square symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.Triangle">
            <summary>
            Renders Traingle symbol
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Symbol.VerticalLine">
            <summary>
            Renders VerticalLine symbol
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Mode">
            <summary>
            Enum values for Symbol Mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Mode.Fixed">
            <summary>
            Enum value for Fixed mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Mode.Relative">
            <summary>
            Enum values for relative Mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.EmptyPointStyle">
            <summary>
            EmptyPointStyle Enum to make difference for Empty Points
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EmptyPointStyle.Symbol">
            <summary>
            Sets a symbol for Empty Point Segment with the Series Interior.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EmptyPointStyle.Interior">
            <summary>
            Sets a different Brush for Empty Point Segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EmptyPointStyle.SymbolAndInterior">
            <summary>
            Sets a symbol and different Brush for Empty Point Segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisCap">
            <summary>
            Represents chart axis end line caps.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartCartesianAxisElement"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisCap.None">
            <summary>
            Represents No cap.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisCap.StartArrow">
            <summary>
            Start arrow is drawn at the end of axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisCap.EndArrow">
            <summary>
            End arrow is drawn at the end of axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisCap.Arrows">
            <summary>
            Start and end arrows are drawn at the ends of axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.EmptyPointValue">
            <summary>
            Enum values for Emplty point visual State
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EmptyPointValue.Zero">
            <summary>
            Enum value for Zero State
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EmptyPointValue.Average">
            <summary>
            Enum value for Average State
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartTypes">
            <summary>
            Enumeration represents all built-in chart types. Different sets of data are
            particularly suited to a certain chart type.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Area">
            <summary>
            A type of presentation graphic that emphasizes a change in values by filling in
            the portion of the graph beneath the line connecting various data points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Bar">
            <summary>
            A bar chart, also known as a bar graph, is a chart with rectangular bars of lengths 
            proportional to that value that they represent. 
            Bar charts are used for comparing two or more values.
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.BoxAndWhisker">
            <summary>
            A box and whisker chart type is a convenient way of graphically depicting groups of numerical data through their 
            five-number summaries (the smallest observation, lower quartile (Q1), median (Q2), upper quartile (Q3), 
            and largest observation). A box and whisker chart may also indicate which observations, if any, might be considered outliers.  
            </summary>
            <remarks>
            Box and whisker chart is helpful in Quality Analysis for interpreting the distribution of data since it 
            can easily show whether the data is skewed and if there are unusual observations (outliers) in the dataset. 
            Box and whisker chart is also very useful when large numbers of observations are involved and when two or more 
            datasets are being compared. 
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Bubble">
            <summary>
            A bubble chart draws bubbles for each point in a series. 
            The chart expects three values per bubble: the domain (commonly the X-axis) value and, 
            the range (commonly the y-axis) value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Candle">
            <summary>
            A candlestick chart is a style of bar-chart used primarily to describe price movements of an equity over time.
            It is a combination of a line-chart and a bar-chart, in that each bar represents the range of price movement 
            over a given time interval. It is most often used in technical analysis of equity and currency price patterns. 
            It appears superficially similar to error bars, but are unrelated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Column">
            <summary>
            Compares values across categories. The series values are displayed as individual columns, grouped by category. The height of each column is determined by the series value.
            </summary>
            <remarks>
            There are three types of column charts: column, <see cref="F:Syncfusion.Windows.Chart.ChartTypes.StackingColumn"/>, 
            and <see cref="F:Syncfusion.Windows.Chart.ChartTypes.RangeColumn"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Doughnut">
            <summary>
            A doughnut chart displays value data as percentages of the whole. 
            Categories are represented by individual slices. Doughnut charts are typically used to show percentages. 
            Doughnut charts are functionally identical to pie charts.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastLine">
            <summary>
            When performance is critical, the FastLine chart type is a good alternative to the Line chart. 
            FastLine chart significantly reduce the drawing time of a series that contains a very large number of data points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastBar">
            <summary>
            When performance is critical, the FastBar chart type is a good alternative to the Bar chart. 
            FastBar chart significantly reduce the drawing time of a series that contains a very large number of data points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastSpline">
            <summary>
            When performance is critical, the FastSpline chart type is a good alternative to the Spline chart. 
            FastSpline chart significantly reduce the drawing time of a series that contains a very large number of data points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Funnel">
            <summary>
            The Funnel Chart type displays data that equals 100% when totalled. 
            This type of chart is a single series chart representing the data as portions of 100%, 
            and this chart does not use any axes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Gantt">
            <summary>
            A Gantt chart is a type of bar chart that shows a project schedule. 
            Gantt charts show the start and finish dates of the terminal elements and summary elements of a project. 
            Terminal elements and summary elements comprise the work breakdown structure of the project. 
            Gantt charts can be used to show current schedule status using percent-complete shadings and a 
            vertical "TODAY" line (also called "TIME NOW" or "DATA DATE"). It is an instrument or tool of the 
            Project management invented by the engineer Henry L. Gannt.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.HiLo">
            <summary>
            HiLo chart is a sophisticated chart type, that finds its place in stock analysis. 
            </summary>
            <remarks>
            Key Features:
            <para/>* Display of Error Bars.
            <para/>* Trading range of stock and its closing value, for each period.
            <para/>* Displays Y - value for each X - value.
            <para/>* In special cases, displays a range of Y - values for a given X value.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.HiLoArea">
            <summary>
            Represents the HiLoArea chart type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.HiLoOpenClose">
            <summary>
            HiLo OpenClose Chart is a HiLo chart with four Y values for each point.
            </summary>
            <remarks>
            The functionality of each Y value is given below:
            <para/>* One representing the high value of the plotted stock, for the time period for which the chart is being rendered.
            <para/>* One representing the low values for the same period.
            <para/>* One representing the opening value for that period.
            <para/>* One representing the closing value for that period.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Histogram">
            <summary>
            Represents a graphical display of tabulated frequencies. 
            A histogram is the graphical version of a table that shows what proportion of cases fall into each of 
            several or many specified categories. The histogram differs from a bar chart in that it is the area 
            of the bar that denotes the value, not the height, a crucial distinction when the categories are not 
            of uniform width. The categories are usually specified as non-overlapping intervals of some variable. 
            The categories (bars) must be adjacent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Kagi">
            <summary>
            A Kagi chart is created with a series of vertical lines connected by short horizontal lines. 
            The thickness and direction of the lines is based on the price of the underlying stock or asset
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Line">
            <summary>
            A style of chart that is created by connecting a series of data points together with a line. 
            This is the most basic type of chart used in finance and it is generally created by connecting a 
            series of past prices together with a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Pie">
            <summary>
            A pie chart (or a circle graph) is a circular chart divided into sectors, illustrating relative magnitudes 
            or frequencies or percents. In a pie chart, the arc length of each sector (and consequently its central 
            angle and area), is proportional to the quantity it represents. Together, the sectors create a full disk. 
            It is named for its resemblance to a pie which has been sliced.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.PointAndFigure">
            <summary>
            A point and figure chart is used for technical analysis of securities. Unlike most other investment charts, 
            point and figure charts do not present a linear representation of time. Instead, they show trends in price.
            <para/>The aim of point and figure charting is to filter out the "noise" (unimportant price movement) and 
            focus on the main direction of the price trend. 
            <para/>Point and figure charts are usually used for longer term price movements, but may be used to day 
            trade by trying to identify the key points of "supply and demand." Point and figure charts are close 
            relatives to <see cref="F:Syncfusion.Windows.Chart.ChartTypes.ThreeLineBreak"/> , <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Renko"/> 
            and <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Kagi"/> charts which all do not have a fixed time frame.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Polar">
            <summary>
            Polar chart is used to display chart data points, connected with a line, in a polar co-ordinate system. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Pyramid">
            <summary>
            Pyramid charts are another type of accumulation chart which has a triangular upper surface that 
            converge at one point. Similar to a <see cref="F:Syncfusion.Windows.Chart.ChartTypes.Funnel"/> chart, 
            the height of a segment is proportional to the Y value of the corresponding point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Radar">
            <summary>
            A radar chart is two-dimensional chart of three or more quantitative variables represented on axes starting from the same point. The relative position and angle of the axes is uninformative.
            Radar charts are usually used to compare performance of different entities on a same set of axes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.RangeArea">
            <summary>
            Range Area Chart is a variation of Area Chart type that lets you plot bands of data in a chart, like Bollinger bands, weather patterns, etc. 
            Each point in the chart is specified by 2 Y values � the lower and higher end of the band. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.RangeColumn">
            <summary>
            Columns connecting minimum and maximum series points with the same respective X. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Renko">
            <summary>
            A renko chart is constructed by placing a brick in the next column once the price surpasses the top or 
            bottom of the previous brick by a pre-defined amount. Lighter bricks are used when the direction of the 
            trend is up, while darker bricks are used when the trend is down. This type of chart is very effective 
            for traders to identify key support/resistance levels. 
            Transaction signals are generated when the direction of the trend changes and the bricks alternate colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.RotatedSpline">
            <summary>
            Rotated Spline chart defines chart series points as interconnected rotated smooth curves.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Scatter">
            <summary>
            A scatter type contains one or more scatter plots each of which use Cartesian coordinates 
            to display values for two series values for a set of data. The data is displayed as a collection 
            of points, each having the value of one variable determining the position on the horizontal axis 
            and the value of the other variable determining the position on the vertical axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Spline">
            <summary>
            A spline chart is simply a line chart that plots a fitted curve through each data point in a series.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.SplineArea">
            <summary>
            Spline Chart is an Area chart in which each area is given a color to emphasize the relationships 
            between the pieces of charted information.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingArea">
            <summary>
            StackingArea is an area chart with Y values stacked over one another, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingArea100">
            <summary>
            StackingArea100 is an area chart with Y values stacked over one another for 100%, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingBar">
            <summary>
            A stacked bar chart displays the relationship of individual items to the whole, 
            comparing the contributions of each value to a total across categories. 
            The series values are stacked in a single column for each category. 
            The height of each column is determined by the total of all series values for the category.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingBar100">
            <summary>
            A bar chart where multiple series are stacked horizontally to fit 100% of the chart area. 
            If there is only one series in chart, all the bars will fit to 100% of area.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingColumn">
            <summary>
            A stacked column chart displays the relationship of individual items to the whole, 
            comparing the contributions of each value to a total across categories. 
            The series values are stacked in a single column for each category. 
            The height of each column is determined by the total of all series values for the category.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingColumn100">
            <summary>
            A column chart where multiple series are stacked vertically to fit 100% of the chart area. 
            If there is only one series in your chart, all the column bars will fit to 100% of the chart area.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingLine">
            <summary>
            StackingLine is a line chart with Y values stacked over one another, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingLine100">
            <summary>
            StackingLine100 is a line chart with Y values stacked over one another for 100%, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingSpline">
            <summary>
            StackingSpline is a spline chart with Y values stacked over one another, in series order.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingSpline100">
            <summary>
            StackingSpline100 is a spline chart with Y values stacked over one another for 100%, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingSplineArea">
            <summary>
            StackingSplineArea is a splinearea chart with Y values stacked over one another, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StackingSplineArea100">
            <summary>
            StackingSplineArea100 is a splinearea chart with Y values stacked over one another for 100%, in series order. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StepArea">
            <summary>
            The StepArea chart consists of pairs of values (plotted as points) on a line for each series in the given 
            dataset. Each pair of values consists of one date (value) and one numeric value. 
            This chart will have one date\time (value) based axis (the domain axis) and one numeric axis (the range axis).
            Each line is drawn at a 90 degree angle from point to point. Each line will fill the from the line to the 
            bottom of the plot with its series color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.StepLine">
            <summary>
            Step Line charts are line charts, with values drawn continuously, step by step without any gaps between them. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Surface3D">
            <summary>
            3D Surface Chart Type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.ThreeLineBreak">
            <summary>
            ThreeLineBreak displays a series of vertical boxes that are based on changes in prices. 
            It depicts rising and falling lines of varying heights. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Tornado">
            <summary>
            Tornado chart is a bar chart, which shows the variability of an outcome, as the result of several factors. 
            This variability is displayed using relative lengths of bars across a range. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastColumn">
            <summary>
            FastColumn Chart is a Column Chart, Which Comes under FastChartType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastStackingColumn">
            <summary>
            FastStackingColumn Chart is a Column Chart, Which Comes under FastChartType
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastScatter">
             <summary>
            FastScatter Chart is a Scatter Chart, Which Comes under FastChartType 
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.FastHiLoOpenClose">
            <summary>
            FastHiLoOpenClose Chart is a Fast Chart Type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartTypes.Custom">
            <summary>
            Custom Chart type
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPolarDrawType">
            <summary>
            Enum values for polarArea Charttypes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarDrawType.Area">
            <summary>
            Draw the Filled Area in the Polar Chart type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarDrawType.Line">
            <summary>
            Draw the Lines in the Polar chart type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPolarDrawType.Symbol">
            <summary>
            Draw the Symbol to plot the Polar chart points.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRadarDrawType">
            <summary>
            Enum values for Radar area Charttypes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRadarDrawType.Area">
            <summary>
            Draw the Filled Area in the Polar Chart type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRadarDrawType.Line">
            <summary>
            Draw the Lines in the Polar chart type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRadarDrawType.Symbol">
            <summary>
            Draw the Symbol to plot the Polar chart points.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.Direction">
            <summary>
            Enum values for Visual Direction
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Direction.Ascending">
            <summary>
            Enum values for Ascending Order
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.Direction.Descending">
            <summary>
            Enum values for Descending Order
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SortingAxis">
            <summary>
            Enum values for SortingAxis types.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SortingAxis.X">
            <summary>
            Enum value for X axis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SortingAxis.Y">
            <summary>
            Enum value for Y axis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SortingAxis.XY">
            <summary>
            Enum value for XY axis
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LocalizeEnumChartTypes">
            <summary>
            The class creates an extension method on the actual enum "ChartColorPalette" which then allows
            you to call a ToFriendlyString() on the instance of all enums of that type
            Which could be used for localization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.LocalizeEnumChartTypes.ToFriendlyString(Syncfusion.Windows.Chart.ChartTypes)">
            <summary>
            Returns a friendly enum name, used for localization
            </summary>
            <param name="chartTypeEnum">The chart type enum.</param>
            <returns>Returns string from ResourceDictionary</returns>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LabelContent">
            <summary>
            Enumeration represents series' adorner label content.
            </summary>
            <seealso>
                <cref>AdornmentInfo</cref>
            </seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelContent.XValue">
            <summary>
            Identifies that label should contain X value of series' point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelContent.YValue">
            <summary>
            Identifies that label should contain Y value of series' point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelContent.Percentage">
            <summary>
            Identifies that label should contain percentage value of series' point among other points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelContent.YofTot">
            <summary>
            Identifies that label should contain value of Y of total values.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelContent.DateTime">
            <summary>
            Identifies that label should contain <see cref="F:Syncfusion.Windows.Chart.LabelContent.DateTime"/> value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelContent.LabelContentPath">
            <summary>
            Label's content will be retrieved from the <see cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.LabelContentPath"/> property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ConnectorAlignment">
            <summary>
            Represents label's connector alignment.
            </summary>
            <seealso>
                <cref>AdornmentPresenter</cref>
            </seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ConnectorAlignment.Left">
            <summary>
            Connection to the left side of adorner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ConnectorAlignment.Top">
            <summary>
            Connection to the top side of adorner. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ConnectorAlignment.Right">
            <summary>
            Connection to the right side of adorner.  
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ConnectorAlignment.Bottom">
            <summary>
            Connection to the top bottom of adorner. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AlternatingFillMode">
            <summary>
            Enumeration represents value that can be set on <see cref="P:Syncfusion.Windows.Chart.ChartArea.AlternatingGridBackground"/> property 
            when alternating grid background lines are drawn.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AlternatingFillMode.Odd">
            <summary>
            Alternating gridlines are drawn for odd axis intervals only.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AlternatingFillMode.Even">
            <summary>
            Alternating gridlines are drawn for even axis intervals only.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.CameraProjection">
            <summary>
            Enumeration represents value that can be set on <see cref="T:Syncfusion.Windows.Chart.CameraProjection"/> property 
            when ChartArea is in 3D mode
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3D"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.CameraProjection.Perspective">
            <summary>
            Represents Perspective CameraProjection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.CameraProjection.Orthographic">
            <summary>
            Represents Orthographic CameraProjection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.EdgeLabelsDrawingMode">
            <summary>
            Represents EdgeLabelsDrawingMode enumeration that is used to set behavior of edged labels 
            of <see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EdgeLabelsDrawingMode.Center">
            <summary>
            Value indicating that the edge label should appear at the center of its GridLines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EdgeLabelsDrawingMode.Shift">
            <summary>
            Value indicating that edge Label should be shifted to either left or right so that it comes with in the Chart Area.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EdgeLabelsDrawingMode.Fit">
            <summary>
            Value indicating that edge Label should be fit with in the Chart Area.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.EdgeLabelsVisibilityMode">
            <summary>
            Represents the visibility for edge label<see cref="T:Syncfusion.Windows.Chart.ChartAxis"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EdgeLabelsVisibilityMode.Default">
            <summary>
            Value indicating that default behavior of axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EdgeLabelsVisibilityMode.AlwaysVisible">
            <summary>
            Value indicating that edge labels should be visible all cases.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.EdgeLabelsVisibilityMode.Visible">
            <summary>
            Value indicating that edge labels should be visible in non zoom mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AdornmentsPosition">
            <summary>
            Represents AdornmentsPosition enumeration that is used to set behavior 
            <see cref="T:Syncfusion.Windows.Chart.ChartAdornment"/>. 
            </summary>
            <seealso cref="P:Syncfusion.Windows.Chart.ChartAdornmentInfo.AdornmentsPosition"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentsPosition.Top">
            <summary>
            All adornments are positioned at the top of column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentsPosition.Bottom">
            <summary>
            All adornments are positioned at the bottom of column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentsPosition.TopAndBottom">
            <summary>
            Adornments will be positioned depending on Y value that is represented by column.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.GridSide">
            <summary>
            Represents Grid side
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.Chart3DGrid"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.GridSide.Left">
            <summary>
            The Left side
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.GridSide.Bottom">
            <summary>
            The Bottom side
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.GridSide.Back">
            <summary>
            The Back side
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.GridSide.Right">
            <summary>
            The Right side
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.GridSide.Top">
            <summary>
            The top side
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AutoDiscardType">
            <summary>
            Represents the Range behavior of the  Axis.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AutoDiscardType.None">
            <summary>
            Default behaviour
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AutoDiscardType.ExtendRange">
            <summary>
            When the data reaches the max range it externed the range .
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AutoDiscardType.ResetRange">
            <summary>
            When the data reaches the max range it reset the range to a new range. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLegendIcon">
            <summary>
            Represents the Icon for the Chartlegend
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.None">
            <summary>
            Default behaviour
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.SeriesType">
            <summary>
            Represents the Icon of Series type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Rectangle">
            <summary>
            Represents the Rectangular Icon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.StraightLine">
             <summary>
            Represents the Straight Line
             </summary>       
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Circle">
            <summary>
            Represents the Circle
            </summary>       
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Diamond">
            <summary>
            Represents the Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Pentagon">
            <summary>
            Represents the Pentagon
            </summary>      
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Triangle">
            <summary>
            Represents the Triangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.InvertedTriangle">
            <summary>
            Represents the Inverted Triangle
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Ellipse">
            <summary>
            Represents the Ellipse
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.Cross">
            <summary>
            Represents the Cross
            </summary>       
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendIcon.HorizontalLine">
             <summary>
            Represents the Horizontal Line
             </summary>       
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnnotationShapes">
            <summary>
            Represents the Shape for the Annotation
            </summary>
            <seealso>
                <cref>ChartLabelAnnotation</cref>
            </seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Ellipse">
            <summary>
            Represents the Ellipse
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Rectangle">
            <summary>
            Represents the Rectangle
            </summary>     
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.RoundedRectangle">
            <summary>
            Represents the RoundedRectangle
            </summary>
            
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Arrow">
            <summary>
            Represents the Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Circle">
            <summary>
            Represents the Circle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Cross">
            <summary>
            Represents the Cross
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.InverteredArrow">
            <summary>
            Represents the Inverted Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.HorizontalLine">
            <summary>
            Represents the Horizontal Line
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.VerticalLine">
            <summary>
            Represents the Vertical Line
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Diamond">
            <summary>
            Represents the Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Square">
            <summary>
            Represents the Square
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Hexagon">
            <summary>
            Represents the Hexagon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Pentagon">
            <summary>
            Represents the Pentagon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.Star">
            <summary>
            Represents the Star
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationShapes.None">
            <summary>
            Default shape
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SpliterVisibility">
            <summary>
            Represents the Splitter Viisbility
            </summary>  
            <seealso cref="T:Syncfusion.Windows.Chart.ChartArea"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SpliterVisibility.Hide">
            <summary>
            Hides the Splitter
            </summary>  
        </member>
        <member name="F:Syncfusion.Windows.Chart.SpliterVisibility.ShowAlways">
            <summary>
            Splitter is in Visibility mode always
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SpliterVisibility.ShowOnMouseHover">
            <summary>
            Splitter is visible when the Cursor is over the Splitter
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnimationOptions">
            <summary>
            Display the different Animation options to animate Chart series Segment
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartSeries"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Top">
            <summary>
            Move the segments from the Below to Top
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Left">
            <summary>
            Move the Segments from Left to Right
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Right">
            <summary>
            Move the Segments from the Right to Left
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Bottom">
            <summary>
            Move the segments from the Top to Bottom
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Rotate">
            <summary>
            Rotate the segments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Fade">
            <summary>
            change the Opacity of the segments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnimationOptions.Scaling">
            <summary>
            Perform the scalling of segments.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartAxisLabelsMode">
            <summary>
            Represents chart axis labels modes.
            </summary>
            <remarks>
            Apart from the default Labels displayed, you can also add Custom Labels to be
            displayed in the Chart. 
            </remarks>
            <example>
            Below given code example illustrates adding labels from custom source
            <code lang="XAML">
            &lt;syncfusion:Chart Name="Chart1" &gt;
                      &lt;syncfusion:ChartArea Name="area" &gt;
                                &lt;syncfusion:ChartArea.PrimaryAxis&gt;
                                   &lt;syncfusion:ChartAxis LabelsMode="Custom"
            RangeCalculationMode="AdjustAcrossChartTypes"&gt;
                                        &lt;syncfusion:ChartAxis.CustomLabels&gt;
                                            &lt;syncfusion:ChartAxisLabel Content="III place"
            Position="0" /&gt;
                                           &lt;syncfusion:ChartAxisLabel Content="I place"
            Position="1" /&gt;
                                            &lt;syncfusion:ChartAxisLabel Content="II place"
            Position="4" /&gt;
                                       &lt;/syncfusion:ChartAxis.CustomLabels&gt;
                                   &lt;/syncfusion:ChartAxis&gt;
                               &lt;/syncfusion:ChartArea.PrimaryAxis&gt;                 
                      &lt;/syncfusion:ChartArea&gt;
            &lt;/syncfusion:Chart&gt;    
            </code>
            <code lang="C#">
            // Indicates that the axis labels need to be taken from a custom source.
            area.PrimaryAxis.LabelsMode = ChartAxisLabelsMode.Custom;
            ChartAxisLabel customLabel1 = new ChartAxisLabel();
            customLabel1.Content = "III place";
            customLabel1.Position = 0;
            ChartAxisLabel customLabel2 = new ChartAxisLabel();
            customLabel2.Content = "I place";
            customLabel2.Position = 1;
            ChartAxisLabel customLabel3 = new ChartAxisLabel();
            customLabel3.Content = "II place";
            customLabel3.Position = 4;
            // Adding custom label to labels collection.
            area.PrimaryAxis.CustomLabels.Add(customLabel1);
            area.PrimaryAxis.CustomLabels.Add(customLabel2);
            area.PrimaryAxis.CustomLabels.Add(customLabel3); 
            </code>   
            </example>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxisLabel">ChartAxisLabel</seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelsMode.None">
            <summary>
            Labels values are taken from point's X-coordinate. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelsMode.Auto">
            <summary>
            Content is determined automatically.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelsMode.DataSource">
            <summary>
            External datasource is used for labels content.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelsMode.Custom">
            <summary>
            Custom values are used for labels content representation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartAxisLabelsMode.Default">
            <summary>
            Content for labels is either determined automatically, taken from external datasource or being set with custom values.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartRangePaddingType">
            <summary>
            Identifies range padding type enumeration.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRangePaddingType.None">
            <summary>
            Range is not getting changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRangePaddingType.Normal">
            <summary>
            Range will be rounded to the interval.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartRangePaddingType.Additional">
            <summary>
            If padding is less the half of an interval, range should be extended.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartFunnelMode">
            <summary>
            Lists the funnel mode options.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartFunnelType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelMode.YIsWidth">
            <summary>
            The specified Y value is used to compute the width of the corresponding block.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartFunnelMode.YIsHeight">
            <summary>
            The specified Y value is used to compute the height of the corresponding block.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPyramidMode">
            <summary>
            Specifies the mode in which the Y values should be interpreted in the Pyramid chart.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPyramidType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidMode.Linear">
            <summary>
            The Y values are proportional to the length of the sides of the pyramid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPyramidMode.Surface">
            <summary>
            The Y values are proportional to the surface area of the corresponding blocks.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPointAndFigure">
            <summary>
            Represents point and figure enumeration.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPointAndFigureType"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigure.Point">
            <summary>
            Determines that point should be drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPointAndFigure.Figure">
            <summary>
            Determines that figure should be drawn.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeatMapLayoutMode">
            <summary>
            Specifies the different layout modes that can be used to layout the items in a <see cref="T:Syncfusion.Windows.Chart.HeatMapControl"/>.
            </summary>
            <seealso>
                <cref>HeapMapControl</cref>
            </seealso>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapLayoutMode.SliceAndDiceAuto">
            <summary>
            Items will be laid out one after another vertically if there is more vertical space available or horizontally
            if there is more horizontal space available. The <see cref="T:Syncfusion.Windows.Chart.HeatMapsPanel"/> type is used to host the items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapLayoutMode.SliceAndDiceHorizontal">
            <summary>
            Items will be laid out horizontally one after another. The <see cref="T:Syncfusion.Windows.Chart.HorizontalSlicesPanel"/> type is used 
            to host the items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapLayoutMode.SliceAndDiceVertical">
            <summary>
            Items will be laid out vertically one after another. The <see cref="T:Syncfusion.Windows.Chart.VerticalSlicesPanel"/> type is used 
            to host the items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeatMapLayoutMode.Squarified">
            <summary>
            Lays out child items within the available space in rectangles with aspect ratio that is closer to 1.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartDock">
            <summary>
            Represents chart dock panel docking options.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartDockPanel"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDock.Left">
            <summary>
            Docks element at the left side of panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDock.Top">
            <summary>
            Docks element at the top side of panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDock.Right">
            <summary>
            Docks element at the right side of panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDock.Bottom">
            <summary>
            Docks element at the bottom side of panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartDock.Floating">
            <summary>
            Sets element to the floating mode on panel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ContextMenuTypes">
            <summary>
            Enum values for ContextMenuTypes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ContextMenuTypes.Default">
            <summary>
            Enum value for Default Mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ContextMenuTypes.DefaultWithCustom">
             <summary>
            Enum value for  DefaultWithCustom mode
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ContextMenuTypes.Custom">
            <summary>
            Enum value for Custom mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LegendPanelTypes">
            <summary>
            Enum values for LegendPanelTypes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LegendPanelTypes.Grid">
            <summary>
            Enum value for Grid panel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LegendPanelTypes.WrapPanel">
            <summary>
            Enum value for WrapPanel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LegendPanelTypes.Custom">
            <summary>
            Enum value for Custom panel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.IndicatorTypes">
            <summary>
            Enum values for Chart IndicatorTypes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.MACD">
            <summary>
            Enum value for MACD type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.BollingerBands">
            <summary>
            Enum value for BollingerBands,
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.ExponentialAverage">
            <summary>
            Enum value for ExponentialAverage type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.SimpleAverage">
            <summary>
            Enum value for SimpleAverage type
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.TriangularAverage">
            <summary>
            Enum value for TriangularAverage type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.Stochastics">
            <summary>
            Enum value for Stochastics type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.AccumulationDistribution">
            <summary>
            Enum value for Accumulationdistribution type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.RelativeStrengthIndex">
            <summary>
            Enum value for RelativeStrengthIndex type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.Momentum">
            <summary>
            Enum value for momentum type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.IndicatorTypes.AverageTrueRange">
            <summary>
            Enum value for AverageTrueRange type.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisLabels">
            <summary>
            enum for labels positions in axis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisLabels.Low">
            <summary>
            Enum value for low position
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisLabels.High">
            <summary>
            enum value for High position
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisLabels.NextToAxis">
            <summary>
            Enum value for NextToAxis
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AxisPositions">
            <summary>
            Represents axis panel elements' alignments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisPositions.Inside">
            <summary>
            Enum value for arrange label within the axis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisPositions.Outside">
            <summary>
            Enum value for arrange label outside the axis
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AxisPositions.Cross">
            <summary>
            Enum value for arrange label across the axis
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.SegmentPositions">
            <summary>
            arrange the Segments based on the ticks
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SegmentPositions.BetweenTicks">
            <summary>
            Enum value for set the segment within the Ticks
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.SegmentPositions.OnTicks">
            <summary>
            Enum value for set the segment on the Ticks
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AnnotationIntersectActions">
            <summary>
            Represents Annotation's Intersect Action.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationIntersectActions.None">
            <summary>
            Enum value for overlap the Annotations when get intersect
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AnnotationIntersectActions.Hide">
            <summary>
            Enum value for hide the annotations when get intersect
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.TextIntersectActions">
            <summary>
            Enum value for TextIntersectAction modes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextIntersectActions.Shrink">
            <summary>
            Enum value for Shrink
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.TextIntersectActions.Wrap">
            <summary>
            Enum value for Wrap
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AdornmentIntersectActions">
            <summary>
            Enum for AdornmentIntersectActions when Adornments get overlapped
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentIntersectActions.None">
            <summary>
            enum value for no other operations
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentIntersectActions.Hide">
            <summary>
            Enum value for Hide the labels
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentIntersectActions.AdjustAroundPoints">
            <summary>
            Enum value SmartAxis labels
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.AdornmentSegmentModes">
            <summary>
            To arrange pie and doughnut adornments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentSegmentModes.Radial">
            <summary>
            Enum value for Radial mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.AdornmentSegmentModes.Horizontal">
            <summary>
            Enum value for Horizontal Mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPrintMode">
            <summary>
            To select chart print mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintMode.Portrait">
            <summary>
            Enum value for Portrait
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintMode.Landscape">
            <summary>
            Enum value for Landscape
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.DoubleUnits">
            <summary>
            Specifies the different values that are natively used.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.AutoDetect">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.AutoDetect"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.None">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.None"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.Hundreds">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.Hundreds"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.Thousands">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.Thousands"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.TenThousands">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.TenThousands"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.HundredThousands">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.HundredThousands"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.Millions">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.Millions"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.TenMillions">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.TenMillions"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.HundredMillions">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.HundredMillions"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.Billions">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.Billions"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.Trillions">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.Trillions"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.DoubleUnits.Quadrillion">
            <summary>
              <see cref="F:Syncfusion.Windows.Chart.DoubleUnits.Quadrillion"/> value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LogarithmicType">
            <summary>
            Specifies the different values that are natively used.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartAxis"/>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LogarithmicType.Value">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.LogarithmicType.Value"/> value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LogarithmicType.Exponential">
            <summary>
             <see cref="F:Syncfusion.Windows.Chart.LogarithmicType.Exponential"/> value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.LabelPositions">
            <summary>
            Represents axis Label Positions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelPositions.Inside">
            <summary>
            Enum value for Inside mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.LabelPositions.Outside">
            <summary>
            Enum value for Outside mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.HeaderPositions">
            <summary>
            Represents axis Header Positions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeaderPositions.Inside">
            <summary>
            Enum value for Inside mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.HeaderPositions.Outside">
            <summary>
            Enum value for Outside mode
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartLegendEditor">
            <summary>
            Interaction logic for ChartLegendEditor.xaml
            </summary>
            <exclude/>
            <summary>
            ChartLegendEditor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendEditor.m_iconVisibility">
            <summary>
            Initializes m_iconVisibility
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartLegendEditor.m_checkboxVisibility">
            <summary>
            Initializes m_checkboxVisibility
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartLegendEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendEditor.ShowDialog(Syncfusion.Windows.Chart.ChartLegend)">
            <summary>
            Overloaded. Sets <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/> as window's data context and saves previous legend's state.
            </summary>
            <param name="legend">The <see cref="T:Syncfusion.Windows.Chart.ChartLegend"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendEditor.OnCancelClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancel click handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartLegendEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Chart.ChartPrintDialog">
            <summary>
            Interaction logic for ChartPrintDialog.xaml
            </summary>
            <exclude/>
            <summary>
            ChartPrintDialog
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.m_elementToPrint">
            <summary>
            Initializes m_elementToPrint
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.m_nativePrintDialog">
            <summary>
            Initializes m_nativePrintDialog
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.m_visualBrush">
            <summary>
            Initializes m_visualBrush
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.ChartHeight">
            <summary>
            Initializes ChartHeight
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.ChartWidth">
            <summary>
            Initializes ChartWidth
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.newFormatedBitmapSource">
            <summary>
            Initializes newFormatedBitmapSource
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.PrintStretchProperty">
            <summary>
            Using a DependencyProperty as the backing store for PrintStrech.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Chart.ChartPrintDialog.PrintModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for ChartPrintMode.  This enables to choose chart print mode...
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Chart.ChartPrintDialog"/> class.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPrintDialog"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.ShowPrintDialog(System.Windows.FrameworkElement)">
            <summary>
            Shows the print dialog.
            </summary>
            <param name="element">The element.</param>
            <returns>Returns ShowDialog</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.ShowPrintDialog(System.Windows.FrameworkElement,System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Shows the print dialog.
            </summary>
            <param name="element">The element.</param>
            <param name="printArea">The print area.</param>
            <param name="elem_height"></param>
            <param name="elem_width"></param>
            <returns>Returns ShowDialog</returns>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPrintDialog"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.StartPrint">
            <summary>
            Starts the print.
            </summary>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPrintDialog"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnPrintClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [print click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
            <seealso cref="T:Syncfusion.Windows.Chart.ChartPrintDialog"/>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnCancelClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [cancel click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnColorClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [color click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnBlackAndWhiteClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [black and white click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnAdvancedClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [advanced click].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.GetPrintSize(System.Windows.Media.Stretch,System.Windows.Size,System.Windows.Size)">
            <summary>
            Gets the size by specified stretch.
            </summary>
            <param name="stretch">The stretch.</param>
            <param name="viewport">The viewport.</param>
            <param name="original">The original.</param>
            <returns>The PRint size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnPrintStretchChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnPrintStretchChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnPrintModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calls OnPrintModeChanged method of the instance, notifies of the depencency property value changes.
            </summary>
            <param name="d">Dependency object, the change occures on.</param>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.SetViewport(System.Windows.Media.VisualBrush,System.Windows.Size)">
            <summary>
            Sets the viewport.
            </summary>
            <param name="brush">The brush.</param>
            <param name="size">The size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnPrintStretchChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises PrintStretchChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnPrintModeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates property value cache and raises PrintModeChanged event.
            </summary>
            <param name="e">Property change details, such as old value and new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.GetUIElementBounds(System.Windows.UIElement)">
            <summary>
            Method implementation for GetUIElementBounds
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.CloneVisualState(System.Windows.FrameworkElement)">
            <summary>
            Method implementation for CloneVisualState
            </summary>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Chart.ChartPrintDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPrintDialog.PrintMode">
            <summary>
            Gets or sets the print mode.
            </summary>
            <value>The print stretch.</value>
        </member>
        <member name="P:Syncfusion.Windows.Chart.ChartPrintDialog.PrintStretch">
            <summary>
            Gets or sets the print stretch.
            </summary>
            <value>The print stretch.</value>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartPrintDialog.PrintStretchChanged">
            <summary>
            Event that is raised when PrintStretch property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Chart.ChartPrintDialog.PrintModeChanged">
            <summary>
            Event that is raised when PrintMode property is changed.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
