<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfMaps.WPF</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.UI.Xaml.Maps.Bubble">
            <summary>
            Represents the Bubble class in the SfMap.
            </summary>
            <remarks>
            Bubbles are used to represent the under bound object member's value in the map. Bubbles are added in the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/> Bubbles read only collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Bubble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.Bubble">Bubble</see> class. 
            </summary>
            <remarks>
            Bubbles are internally added to the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/> Bubbles read only collection. All the members in the Bubbles will be internally set.
            </remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Bubble.BubbleValueProperty">
            <summary>
             // Using a DependencyProperty as the backing store for BubbleValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Bubble.BubbleItemProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BubbleItem.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Bubble.BubbleColorValueProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BubbleValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Bubble.MarginProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Margin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Bubble.BubbleDataProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BubbleValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Bubble.FillProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Fill.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Bubble.BubbleValue">
            <summary>
            Gets  values for the bubbles.
            </summary>
            <value>Type :<see cref="T:System.Object"/></value>
            <remarks>
            BubbleValue property used to represent the value to be bounded with Bubbles.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Bubble.BubbleItem">
            <summary>
            Gets the BubbleItem. This item will be determine bubble type.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Shapes.Shape"/>
            </value>
            <remarks>
            This property is used to determine the type of the bubble to be shown on the map. Currently it will be set as <see cref="T:System.Windows.Shapes.Ellipse"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Bubble.BubbleColorValue">
            <summary>
            Gets  values for the bubbles.
            </summary>
            <value>Type :<see cref="T:System.Object"/></value>
            <remarks>
            BubbleValue property used to represent the value to be bounded with Bubbles.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Bubble.Margin">
            <summary>
            Gets the Margin of a bubble in the map.
            </summary>
            <remarks>
            This is read only property to internally set the margin of the bubbles on the map. Based on the margin value bubbles are arranged on the shapes.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Bubble.BubbleData">
            <summary>
            Gets  Data for the bubbles.
            </summary>
            <value>Type :<see cref="T:System.Object"/></value>
            <remarks>
            BubbleData property used to represent the object to be bounded with Bubbles.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Bubble.Fill">
            <summary>
            Gets  values for the Fill.
            </summary>
            <value>Type :<see cref="T:System.Object"/></value>
            <remarks>
            Fill property used to represent the Color to be bounded with Bubbles.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting">
            <summary>
            Represent the BubbleMarkerSettings in the SfMap.
            </summary>
            <remarks>
            BubbleMarkerSetting class is used to set setting for the bubbles in the map.This class is used to set MaxSize, MinSize, Fill, Stoke, StokeThickness and the ValuePath for the Bubble.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;
                        bubbleSetting.Fill = new SolidColorBrush(Colors.Red);
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
            
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting">BubbleMarkerSetting</see> class. 
            </summary>
            <remarks>
            Initialize the object value for the BubbleMarkerSettings and it's property values.
            </remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.OpacityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BubbleOpacity.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.BubbleTypeProperty">
            <summary>
             // Using a DependencyProperty as the backing store for BubbleType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.CustomTemplateProperty">
            <summary>
             // Using a DependencyProperty as the backing store for CustomTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.SizeRatioProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ValueRatio.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ColorMappingsProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ColorMappings.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.AutoFillColorProperty">
            <summary>
            // Using a DependencyProperty as the backing store for AutoFillColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.MaxSizeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MaxSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.MinSizeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MinSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.FillProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Fill.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ValuePathProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ValuePath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ColorValuePathProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeValuePath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.StrokeProperty">
            <summary>
             // Using a DependencyProperty as the backing store for Stroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.StrokeThicknessProperty">
            <summary>
            // Using a DependencyProperty as the backing store for StrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.OnPropertyChanged">
            <summary>
            This method is called when the property is changed
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.Dispose">
            <summary>
            Dispose the bubbles settings
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.Opacity">
            <summary>
             Gets or Sets Opacity of Bubble
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.BubbleType">
            <summary>
            Gets or Sets BubbleType
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.CustomTemplate">
            <summary>
            Gets or Sets CustomTemplate for Bubble
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.SizeRatio">
            <summary>
            Gets the Size ratio for the bubbles based on the <see cref="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.MinSize"/> and <see cref="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.MaxSize"/>
            </summary>
            <remarks>
            This read only property get the ratio for the bubbles size. Ratio will be determined based on MinSize and MaxSize of the <see cref="T:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting"/>. 
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ColorMappings">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping"/> to provide tree map like support for bubbles.
            </summary>
            <remarks>
            This property contain collection of <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping"/> which contains Range and the Corresponding color of the Range. This property is used to provide the Tree map like support for bubbles.
            </remarks>
            <value>
            ObservableCollection of <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping"/>.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = false;
                        bubbleSetting.ColorMappings.Add(new RangeColorMapping { Range=0, Color=Colors.White });
                        bubbleSetting.ColorMappings.Add(new RangeColorMapping { Range = 50, Color = Colors.Thistle });
                        bubbleSetting.ColorMappings.Add(new RangeColorMapping { Range = 100, Color = Colors.Violet });
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.AutoFillColor">
            <summary>
            Gets or sets a value indicating whether fill color of bubbles from "Fill" property or "ColorMapping".
            </summary>      
            <remarks>
            This property is used to determine fill of the bubble. Bubbles fill color will be determined by "Fill" property if "True" or determined by ColorMappings if "False".
            </remarks>
            <value>
            Type :<see cref="T:System.Boolean"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.MaxSize">
            <summary>
            Gets or sets the Maximum size of the bubble in the map.
            </summary>
            <remarks>
            MaxSize property set the Maximum height and width for the bubble which a bubble has maximum "BubbleValue" in the map.
            </remarks>
            Type :<see cref="T:System.Double"/>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.MinSize">
            <summary>
            Gets or sets the Minimum size of the bubble in the map.
            </summary>
            <remarks>
            MaxSize property set the Minimum height and width for the bubble which a bubble has minimum "BubbleValue" in the map.
            </remarks>
            Type :<see cref="T:System.Double"/>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.Fill">
            <summary>
            Gets or sets the fill color of the bubbles when "AutoFillColor" of the <see cref="T:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting"/> is True.
            </summary>
            <remarks>
            Use this property to set the fill color for the bubble when need not Tree map like support to the bubble fill. "AutoFillColor" of the <see cref="T:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting"/> must set as true.
            </remarks>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ValuePath">
            <summary>
            Gets or sets the property name from the Item of ItemsSource in <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/> for bubble value.
            </summary>
            <remarks>
            Use this ValuePath to determine the under bound value for the bubbles. The property value with the name of "ValuePath" will be fetched from Item of ItemsSource in <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>.
            </remarks>
            <value>
            Type :<see cref="T:System.String"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ColorValuePath">
            <summary>
            ColorValuePath
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.Stroke">
            <summary>
            Gets or set the border color of the bubbles.
            </summary>
            <remarks>
            Use this property to set the border color of the bubbles in the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.StrokeThickness">
            <summary>
            Gets or set the border thickness of the bubbles.
            </summary>
            <remarks>
            Use this property to set the border thickness of the bubbles in the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = true;          
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.ToolTipSettings">
            <summary>
            Gets or sets the tooltip settings for Bubbles.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.BubbleMarkerSetting.SizeChanged">
            <summary>
            SizeChangingEventHandler
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase">
            <summary>
            Represents the MapLayerCommandBase. Inherits form <see cref="T:System.Windows.Input.ICommand"/>
            </summary>
            <remarks>
            MapLayerCommandBase is base class for all commands in the map. It is inherited from <see cref="T:System.Windows.Input.ICommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase">MapLayerCommandBase</see> class. 
            </summary>
            <param name="mapControl">SfMap which is having commands and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase.CanExecute(System.Object)">
            <summary>
             Determines whether this Command can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the current command target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase.Execute(System.Object)">
            <summary>
             Executes the Command on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the handler</para>
             </param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase.MapControl">
            <summary>
            Gets the SfMap for the command.
            </summary>
            <value>Type :<see cref="T:Syncfusion.UI.Xaml.Maps.SfMap"/>SfMap which is having Commands and its implementations</value>
            <remarks>
            This property is used to get the SfMap, which is having and  implementations of the commands.
            </remarks>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase.CanExecuteChanged">
            <summary>
            Occurs when CanExecute value is changed. 
            </summary>
            <remarks>
            This is the event handler to handle the execution when CanExecute value is changed.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileResetCommand">
            <summary>
            Represents the ShapeFileResetCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the ShapeFileResetCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileResetCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileResetCommand">ShapeFileResetCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having ShapeFileResetCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileResetCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileResetCommand.CanExecute(System.Object)">
            <summary>
             Determines whether ShapeFileResetCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the ShapeFileResetCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileResetCommand.Execute(System.Object)">
            <summary>
             Executes the ShapeFileResetCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the ShapeFileResetCommand handler.</para>
             </param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileRefreshCommand">
            <summary>
            Represents the ShapeFileRefreshCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the ShapeFileRefreshCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRefreshCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileRefreshCommand">ShapeFileRefreshCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having ShapeFileRefreshCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileRefreshCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRefreshCommand.CanExecute(System.Object)">
            <summary>
             Determines whether ShapeFileRefreshCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the ShapeFileRefreshCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRefreshCommand.Execute(System.Object)">
            <summary>
             Executes the ShapeFileRefreshCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the ShapeFileRefreshCommand handler.</para>
             </param>         
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.PanResetCommand">
            <summary>
            Represents the PanResetCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the PanResetCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanResetCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.PanResetCommand">PanResetCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having ShapeFileRefreshCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.PanResetCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanResetCommand.CanExecute(System.Object)">
            <summary>
             Determines whether PanResetCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the PanResetCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanResetCommand.Execute(System.Object)">
            <summary>
             Executes the PanResetCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the PanResetCommand handler.</para>
             </param>         
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ZoomResetCommand">
            <summary>
            Represents the ZoomResetCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the ZoomResetCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomResetCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomResetCommand">ZoomResetCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having ZoomResetCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomResetCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomResetCommand.CanExecute(System.Object)">
            <summary>
             Determines whether ZoomResetCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the ZoomResetCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomResetCommand.Execute(System.Object)">
            <summary>
             Executes the ZoomResetCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the ZoomResetCommand handler.</para>
             </param> 
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ZoomInCommand">
            <summary>
            Represents the ZoomInCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the ZoomInCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomInCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomInCommand">ZoomInCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having ZoomInCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomInCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomInCommand.CanExecute(System.Object)">
            <summary>
             Determines whether ZoomInCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the ZoomInCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomInCommand.Execute(System.Object)">
            <summary>
             Executes the ZoomInCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the ZoomInCommand handler.</para>
             </param> 
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ZoomOutCommand">
            <summary>
            Represents the ZoomOutCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the ZoomOutCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomOutCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomOutCommand">ZoomOutCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having ZoomOutCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomOutCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomOutCommand.CanExecute(System.Object)">
            <summary>
             Determines whether ZoomOutCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the ZoomOutCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomOutCommand.Execute(System.Object)">
            <summary>
             Executes the ZoomOutCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the ZoomOutCommand handler.</para>
             </param> 
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.PanCommand">
            <summary>
            Represents the PanCommand class in the SfMap. It is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </summary>
            <remarks>
             This class represents the PanCommand in the map. Also it is inherited from <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayerCommandBase"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanCommand.#ctor(Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.PanCommand">PanCommand</see> class. 
            </summary>
             <param name="mapControl">SfMap which is having PanCommand and its implementations.</param>      
            <remarks>
            Initialize the MapControl property of the <see cref="T:Syncfusion.UI.Xaml.Maps.PanCommand"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanCommand.CanExecute(System.Object)">
            <summary>
             Determines whether PanCommand can execute in its current state.
             </summary> 
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>object to determine can execute.</para>
             </param>
             <returns>
             Type :<see cref="T:System.Boolean"/>
             <para>true if the command can execute on the PanCommand target; otherwise, false.</para>
             </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanCommand.Execute(System.Object)">
            <summary>
             Executes the ZoomOutCommand on the  target.
             </summary>
             <param name="parameter">
             Type :<see cref="T:System.Object"/>
             <para>Parameter to be passed to the ZoomOutCommand handler.It will reoresent the direction to be panned.</para>
             </param> 
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.CustomDataSymbol">
            <summary>
            Represent the CustomDataSymbol class in the SfMap. It is inherited from <see cref="T:System.Windows.DependencyObject"/>
            </summary>
            <remarks>
            CustomDataSymbol is used to present the custom symbols in the map. Custom Symbols are generated from CustomDataSource of <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>
            <para>This class was internally used for creating custom data symbols.</para>
            <para>CustomDataSymbols are internally generated and added into the CustomDataSymbols of <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/></para>
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.CustomDataSymbol">CustomDataSymbol</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconSizeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconSize"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconSourceProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconSource"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconFillProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconFill"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontStyleProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontStyle"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontSizeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontSize"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.LabelForegroundProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.LabelForeground"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontFamilyProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontFamily"/> property
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontWeightProperty" -->
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.LatitudeProperty">
            <summary>
             // Using a DependencyProperty as the backing store for Latitude.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.LongitudeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Longitude.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.CustomDataSymbolTemplateProperty">
            <summary>
             Gets or sets the value for CustomDataSymbolTemplateProperty
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.MarginProperty" -->
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.DataProperty">
            <summary>
             Gets or sets the value for data property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.LabelProperty">
            <summary>
            Gets or sets the value for label property
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.SymbolSize">
            <summary>
            Gets or sets the value for symbol size
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IsSelectedView">
            <summary>
            Gets or sets the value indicating whether the marker has default view
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontSize">
            <summary>
            Gets or sets the value for font size
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconSource">
            <summary>
            Gets or sets the value for Uri
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconFill">
            <summary>
            Gets or sets the value for icon color
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.IconSize">
            <summary>
            Gets or sets the value for icon size
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontStyle">
            <summary>
            Gets or sets the value for font style
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.LabelForeground">
            <summary>
            Gets or sets the value for label foreground
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontFamily">
            <summary>
            Gets or sets the value for font family
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.FontWeight">
            <summary>
            Gets or sets the value for font weight
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.XFormsLayer">
            <summary>
            Get or set the Forms Imagery Layer value.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.Latitude">
            <summary>
            Gets the Latitude values for CustomDataSymbol.
            </summary>
            <remarks>
            CustomDataSymbols are arranged based on  Latitude and Longitude values. This property used to set the Latitude of the CustomDataSymbol.
            </remarks>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.Longitude">
            <summary>
            Gets  Longitude values for CustomDataSymbol.
            </summary>
            <remarks>
            CustomDataSymbols are arranged based on  Longitude and Longitude values. This property used to set the Longitude of the CustomDataSymbol.
            </remarks>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.CustomDataSymbolTemplate">
            <summary>
            Gets the Template for the custom data symbols of the shape file layer.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
            <remarks>
            CustomDataSymbolTemplate is read only property  and  used to internally set the template for custom data symbols.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.Margin">
            <summary>
            Gets the margin for custom data symbol.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Thickness"/>
            </value>
            <remarks>
            This is read only property. This property is used to internally set the margin for the CustomDataSymbols.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.Data">
            <summary>
            Gets the DataContext for the CustomDataSymbol .
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            This is the read only property to internally set the under bound object value for the CustomDataSymbol.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CustomDataSymbol.Label">
            <summary>
            Gets or sets the value for label
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MarkerSelectedEventArgs">
            <summary>
            Class implementation of marker selected event args
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MarkerSelectedEventArgs.IsSelected">
            <summary>
            Gets the boolean value to identify whether the marker is selected or unselected. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MarkerSelectedEventArgs.SelectedMarker">
            <summary>
            Gets or sets the value of selected marker
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MarkerSelectedEventArgs.MarkerTemplate">
            <summary>
            Gets or sets the value for the selected marker template
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.InteractiveLegendPanel">
            <summary>
            InteractiveLegendPanel
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.Legend">
            <summary>
             Defines Legend class
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Legend.#ctor">
            <summary>
            Legend constructor
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Legend.MappingProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Fill.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Legend.LabelForeground">
            <summary>
            Gets or sets a value for header foreground
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Legend.Mapping">
            <summary>
            Gets  values for the Fill.
            </summary>
            <value>Type :<see cref="!:Object"/></value>
            <remarks>
            Fill property used to represent the Color to be bounded with Legend.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LegendPanel">
            <summary>
            LegendPanel
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPanel.SplitProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Split.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPanel.LegendWidthProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LegendPanel.Split">
            <summary>
            Defines 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LegendSetting">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.LegendSetting">LegendSetting</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendSetting.IconHeightProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendIconHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendSetting.IconWidthProperty">
            <summary>
            // Using a DependencyProperty as the backing store for IconWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LegendSetting.Foreground">
            <summary>
            Gets or sets a value for legend foreground
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LegendSetting.IconHeight">
            <summary>
            Gets or Sets IconHeight
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LegendSetting.IconWidth">
            <summary>
            Gets or Sets IconWidth
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LegendSetting.FontFamily">
            <summary>
            Gets or sets the font family of the Legend Label.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LegendSetting.FontStyle">
            <summary>
             Gets or sets the font style of the Legend Label.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapAnnotations">
            <summary>
            Represents the MapAnnotation class in the SfMap.
            </summary>
            <example>
            <code>
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height = 50, Width = 50, Fill = new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
            
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapAnnotations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapAnnotations">MapAnnotations</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationSymbolProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Symbol.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.LatitudeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Latitude.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.LongitudeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Longitude.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelForegroundProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelForeground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelFontFamilyProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelFontFamily.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelBackgroundProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelBackground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelFontStyleProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelFontStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelFontSizeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelFontSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationMarginProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationSymbol">
            <summary>
            Gets or sets the Symbol to be displayed on the Annotation.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.UIElement"/>
            </value>
            <remarks>
            Use this property to set the symbol for the annotation.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.Latitude">
            <summary>
            Gets or sets the Latitude coordinate of the Annotation.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            Use this property to arrange the annotation in the particular latitude coordinate.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.Longitude">
            <summary>
            Gets or set the Longitude coordinate of the Annotation.
            </summary>
            <remarks>
            Use this property to arrange the annotation in the particular longitude coordinate.
            </remarks>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabel">
            <summary>
            Gets or set the display label for the Annotations.
            </summary>
            <value>
            Type :<see cref="T:System.String"/>
            </value>
            <remarks>
            Use this property to set the display any text on the annotation.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelForeground">
            <summary>
            Gets or sets the Foreground Color for the Labels on the annotation.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <remarks>
            Use this property to set the foreground color for the annotation label.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelFontFamily">
            <summary>
            Gets or sets the font family of the Labels annotation.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Media.FontFamily"/>
            </value>
            <remarks>
            Use this property to set the Font family for the map annotations.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelBackground">
            <summary>
            Gets or sets Background color of the annotation label.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <remarks>
            Use this property to set the background color of the annotation label.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelFontStyle">
            <summary>
            Gets or sets Font Style of the  annotation label in the SfMap.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.FontStyle"/>
            </value>
            <remarks>
            Use this property to set the font style of the annotation label.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationLabelFontSize">
            <summary>
            Gets or sets the font size of the annotation label in the SfMap.
            </summary>
            <value>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Rectangle { Height=50, Width=50, Fill=new SolidColorBrush(Colors.Aqua) };
                        annotation.AnnotationLabel = "SfMap Annotation";
                        annotation.Latitude = 30;
                        annotation.Longitude = 20;
                        annotation.AnnotationLabelBackground = new SolidColorBrush(Colors.Azure);
                        annotation.AnnotationLabelFontFamily = new Windows.UI.Xaml.Media.FontFamily("Comic Sans MS");
                        annotation.AnnotationLabelFontSize = 10d;
                        annotation.AnnotationLabelFontStyle = FontStyle.Normal;
                        annotation.AnnotationLabelForeground = new SolidColorBrush(Colors.Black);
                        layer.Annotations.Add(annotation);
                        syncMap.Layers.Add(layer);
                    }
                }
            }
            
            </code>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapAnnotations.AnnotationTemplate">
            <summary>
            Gets  template for the map annotations.
            </summary>
            <remarks>
            This is read-only property to read the template for annotations.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapItem">
            <summary>
            Used to represent the MapItem in the SfMap.
            </summary>
            <remarks>
            This class is used to represent the MapItems which are generated from the ItemsSource of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>.Collection of this objects of this class will be added internally in MapItems of <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapItem">MapItem</see> class. 
            </summary>
            <remarks>
             Create the new instance for the MapItem.
            </remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.SettingProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Setting.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.MapItemValueProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.MapItemBrushProperty">
            <summary>
            // Using a DependencyProperty as the backing store for item brush.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.MarginProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.TemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.DataProperty">
            <summary>
            // Using a DependencyProperty as the backing store for DataItem.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItem.DbfDataProperty">
            <summary>
            // Using a DependencyProperty as the backing store for DBFData.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.LeftPointMax">
            <summary>
            Gets or sets the shape left point maximum.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.RightPointMin">
            <summary>
            Gets or sets the shape right point minimum.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.ItemRect">
            <summary>
            Gets or sets the shape item bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.SmartLabelMode">
            <summary>
            Gets or sets the item smart label mode.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.FontSize">
            <summary>
            Gets or sets the item font size.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.IntersectAction">
            <summary>
            Gets or sets the item intersection action.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.Setting">
            <summary>
            Gets the Customization Setting for the MapItem.
            </summary>
            <value>
            Type :<see cref="T:Syncfusion.UI.Xaml.Maps.MapItemSetting"/>
            </value>
            <remarks>
            This property is read only property. Value for this property will be internally set from MapItemSetting of <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>.
            Setting will be applied on map items when default template is applied on the map item.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.MapItemValue">
            <summary>
            Gets the display value on the MapItems.
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            MapItemValue is the read only property to get the display value of the MapItem. Value for this property will be set internally.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.MapItemBrush">
            <summary>
            Gets the color on the MapItems.
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            MapItemValue is the read only property to get color of the MapItem. Value for this property will be set internally.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.Margin">
            <summary>
            Gets the margin for the MapItem in the map.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Thickness"/>
            </value>
            <remarks>
            Margin property is used to arrange the MapItems on the map.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.Template">
            <summary>
            Gets the Template for the MapItem.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
            <remarks>
            Template is the read only property to get the template for MapItem. Value for this property is set internally from "ItemsTemplate" of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.Data">
            <summary>
            Gets the Under bound object value for the MapItem
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            Data is the read only property to get the under bound object for the MapItem. Value for this property will be set internally.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItem.DbfData">
            <summary>
            Get the DBFData value
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapItemSetting">
            <summary>
            Represents the MapItemSetting in the map.
            </summary>
            <remarks>
            MapItemSetting class contains the properties to customize the map items, when default template is applied on the MapItem.
            </remarks>
            <example>
            <para>Refer the following code to know how MapItemSetting is defined.</para>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        MapItemSetting mapItemSetting = new MapItemSetting();
                        mapItemSetting.MapItemFontFamily = new Windows.UI.Xaml.Media.FontFamily("Times New Roman");
                        mapItemSetting.MapItemFontSize = 10d;
                        mapItemSetting.MapItemForeground = new SolidColorBrush(Colors.OldLace);
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapItemSetting = mapItemSetting;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            } 
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapItemSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapItemSetting">MapItemSetting</see> class. 
            </summary>        
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemForegroundProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelForeground.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemFontFamilyProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelFontFamily.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemFontStyleProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelFontStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemFontSizeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelFontSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItemSetting.SmartLabelModeProperty">
            <summary>
            Using a DependencyProperty as the backing store for SmartLabelMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapItemSetting.IntersectActionProperty">
            <summary>
            Using a DependencyProperty as the backing store for IntersectionAction.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.ShapeFileLayer">
            <summary>
            Gets or sets the shape file layer for map item setting.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemForeground">
            <summary>
            Gets or sets the Foreground Color for the Labels on the SfMap.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <remarks>
            Use MapItemForeground property to set the foreground color for the map item.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        MapItemSetting mapItemSetting = new MapItemSetting();        
                        mapItemSetting.MapItemForeground = new SolidColorBrush(Colors.OldLace);
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapItemSetting = mapItemSetting;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            } 
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemFontFamily">
            <summary>
            Gets or sets the font family for the map item Labels on the SfMap.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Media.FontFamily"/>
            </value>
            <remarks>
            Use MapItemForeground property to set the font family for the map item.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        MapItemSetting mapItemSetting = new MapItemSetting();        
                        mapItemSetting.MapItemFontFamily = new Windows.UI.Xaml.Media.FontFamily("Times New Roman");
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapItemSetting = mapItemSetting;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            } 
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemFontStyle">
            <summary>
            Gets or sets the font style for the map item Labels on the SfMap.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.FontStyle"/>
            </value>
            <remarks>
            Use MapItemForeground property to set the font style color for the map item.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        MapItemSetting mapItemSetting = new MapItemSetting();        
                        mapItemSetting.MapItemFontStyle = FontStyle.Normal;
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapItemSetting = mapItemSetting;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            } 
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.MapItemFontSize">
            <summary>
            Gets or sets the font size for the map item Labels on the SfMap.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            Use MapItemForeground property to set the font size  for the map item.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        MapItemSetting mapItemSetting = new MapItemSetting();        
                        mapItemSetting.MapItemFontSize = 20d;
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapItemSetting = mapItemSetting;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            } 
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.SmartLabelMode">
            <summary>
            Gets or sets the SmartLabelMode
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapItemSetting.IntersectionAction">
            <summary>
            Gets or sets IntersectionAction
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapItemsPanel">
            <summary>
            Represents the MapItemsPanel class in the map.
            </summary>
            <remarks>
            MapItemsPanel class measures and arranges the MapItems in the map.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapLayer">
            <summary>
            Represent the MapLayer in the SfMap. Inherited from the <see cref="T:System.Windows.Controls.Control"/> class
            </summary>
            <remarks>
            MapLayer is the Base class for all layer class in maps.
            </remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.map">
            <summary>
            To store the map value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelForegroundProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelForeground"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconSizeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconSize"/> property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.OnMarkerIconSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the marker icon size value changed
            </summary>
            <param name="d">The map layer</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconFillProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconFill"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconSourceProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconSource"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconTypeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconType"/> property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.OnMarkerIconPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the marker icon property is changed
            </summary>
            <param name="d">Map Layer</param>
            <param name="e">Event argument</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerSelectionModeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerSelectionMode"/> property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.OnSelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the selection mode property is changed
            </summary>
            <param name="d">Map Layer</param>
            <param name="e">Event argument</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontSizeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontSize"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontFamilyProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontFamily"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontStyleProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontStyle"/> property
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontWeightProperty" -->
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerVerticalAlignmentProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerVerticalAlignment"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerHorizontalAlignmentProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerHorizontalAlignment"/> property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.OnMarkerAlignmentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the marker alignment property is changed
            </summary>
            <param name="d">Map Layer</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.SetSymbolTemplate(System.Collections.ObjectModel.ObservableCollection{Syncfusion.UI.Xaml.Maps.CustomDataSymbol})">
            <summary>
            To set the symbol tempalte
            </summary>
            <param name="customDataSymbols">Collection of custom data symbols</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.UpdateSymbolTemplate(System.Collections.ObjectModel.ObservableCollection{Syncfusion.UI.Xaml.Maps.CustomDataSymbol},System.Windows.DataTemplate)">
            <summary>
            To update the symbol tempalte
            </summary>
            <param name="customDataSymbols">Collection of custom data symbols</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.SetSymbolSize(System.Collections.ObjectModel.ObservableCollection{Syncfusion.UI.Xaml.Maps.CustomDataSymbol})">
            <summary>
            To set the size for the symbol
            </summary>
            <param name="customDataSymbols">The collection of custom data symbols</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapLayer">MapLayer</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.UpdateTooltip(System.Object,System.Double,System.Double,Syncfusion.UI.Xaml.Maps.SfMap,Syncfusion.UI.Xaml.Maps.ToolTipSetting)">
            <summary>
            To update the tooltip
            </summary>
            <param name="shape">The shape for Tooltip</param>
            <param name="x">The touch x position</param>
            <param name="y">The touch y position</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.DrawTooltip(System.Double,System.Double,Syncfusion.UI.Xaml.Maps.ToolTipSetting,System.Object,System.Double,System.Double,Syncfusion.UI.Xaml.Maps.SfMap)">
            <summary>
            To Draw tooltip
            </summary>
            <param name="x">The x position</param>
            <param name="y">The y position</param>
            <param name="settings">The tooltip setting</param>
            <param name="shape">The shape</param>
            <param name="touchedX">The touch x position</param>
            <param name="touchedY">The touch y position</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.RemoveToolTipItem(Syncfusion.UI.Xaml.Maps.MapLayer)">
            <summary>
            Removes the stored tooltip item.
            </summary>
            <param name="mapLayer">map layer</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.GetLatLonFromPoint(System.Windows.Point)">
            <summary>
            Convert point X and point Y to longitude and latitude values.
            </summary>
            <param name="pointXY">To get point x and point y</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.GeopointToViewPoint(System.Double,System.Double)">
            <summary>
            Convert latitude and longitude values to view's x and y points.
            </summary>
            <param name="latitude">To get latitude</param>
            <param name="longitude">To get longitude</param>
            <returns>returns the point X and point Y from latitude and longitude</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.GetLatitudeLongitudeFromPoint(System.Windows.Point)">
            <summary>
            Convert point X and point Y to longitude and latitude values.
            </summary>
            <param name="pointXY">To get point x and point y</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapLayer.GetPointFromLatitudeLongitude(System.Windows.Point)">
            <summary>
            Convert latitude and longitude to point X and point Y
            </summary>
            <param name="latitudeLongitude">To get latitude and longitude</param>
            <returns>returns the point X and point Y from latitude and longitude</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelForeground">
            <summary>
            Gets or sets the value for marker label foreground
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconSize">
            <summary>
            Gets or sets the value for marker icon size
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconFill">
            <summary>
            Gets or sets the value for marker icon color
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconSource">
            <summary>
            Gets or set the value for marker icon source
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerIconType">
            <summary>
            Gets or sets the value for marker icon
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerSelectionMode">
            <summary>
            Gets or sets the marker selection mode <see cref="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerSelectionMode"/> on mouse click
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontSize">
            <summary>
            Gets or sets the value for marker label font size
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontFamily">
            <summary>
            Gets or sets the value for marker label font family
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontStyle">
            <summary>
            Gets or sets the value for marker Label font style
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerLabelFontWeight">
            <summary>
            Gets or sets the value for marker Label font weight
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerVerticalAlignment">
            <summary>
            Gets or sets the value for marker position in VerticalAlignment
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerHorizontalAlignment">
            <summary>
            Gets or sets the value for marker position in HorizontalAlignment
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerToolTipSettings">
            <summary>
            Gets or sets the tooltip settings for Markers in <see cref="T:Syncfusion.UI.Xaml.Maps.SfMap"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.MapLayer.MarkerSelected">
            <summary>
            Event corresponds to marker selected.It invokes once the marker selected
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapPoint">
            <summary>
            MapPoint
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapPoint.#ctor">
            <summary>
            MapPoint
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPoint.PointDataProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Vals.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPoint.TooltipTextProperty">
            <summary>
             // Using a DependencyProperty as the backing store for TooltipText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPoint.PointPopupTemplateProperty">
            <summary>
             // Using a DependencyProperty as the backing store for PointPopupTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPoint.ActualTemplateProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ActualTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPoint.PointMarginProperty">
            <summary>
             // Using a DependencyProperty as the backing store for PointMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.PointData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.Item(System.String)">
            <summary>
             Validates the key values
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.TooltipText">
            <summary>
            TooltipText
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.PointPopupTemplate">
            <summary>
            PointPopupTemplate
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.ActualTemplate">
            <summary>
            ActualTemplate
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.PointMargin">
            <summary>
            PointMargin
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapPoint.PixelPoint">
            <summary>
            Gets or sets the value for pixel point
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapPointPanel">
            <summary>
            MapPointPanel
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapPointPanel.#ctor">
            <summary>
            MapPointPanel()
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapShape">
            <summary>
            Represents the MapShape class in the SfMap.Inherited from <see cref="T:System.Windows.Controls.Control"/> class.
            </summary>
            <remarks>
            MapShape are core element of the SfMap. MapShape is generate from a record in the ShapeFile.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapShape">MapShape</see> class. 
            </summary>
            <remarks>
            Intialize the instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapShape"/>class and attribute values.
            </remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShape.invokeTooltipEvent">
            <summary>
            Gets or sets a value indicating whether to invoke tooltip openning event or not.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShape.ShapeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Shape.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShape.ShapeValueProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShape.ShapeDataProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShape.RecordProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Record.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShape.ColorValueProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ShapeValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.OnApplyTemplate">
            <summary>
            Defines OnApplyTemplate
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.ShapeTooltip(System.Windows.Input.MouseEventArgs)">
            <summary>
            The ShapeLayer Tooltip
            </summary>
            <param name="e">The Routed event</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.UpdateTooltip(Syncfusion.UI.Xaml.Maps.ToolTipSetting,System.Double,System.Double,System.Object)">
            <summary>
            To update the tooltip
            </summary>
            <param name="settings">Tooltip setting</param>
            <param name="x">The touch x position</param>
            <param name="y">The touch y position</param>
            <param name="data">The data shape data context</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.DrawTooltip(System.Double,System.Double,Syncfusion.UI.Xaml.Maps.ToolTipSetting,System.Double,System.Double,System.Windows.Point)">
            <summary>
            Draw Tooltip
            </summary>
            <param name="x">The x position</param>
            <param name="y"></param>
            <param name="settings">The y position</param>
            <param name="touchedX">The touch x position</param>
            <param name="touchedY">The touch y position</param>
            <param name="mapStartPosition"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.DurationTimer_Tick(System.Object,System.Object)">
            <summary>
            Hide Tooltip 
            </summary>
            <param name="sender">The duration</param>
            <param name="e">Duration event</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapShape.Dispose">
            <summary>
            Dispose method invokes while unloading mapshape
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapShape.IsPolyLinePointsAdded">
            <summary>
            It will be enable when we add the polylines.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapShape.Shape">
            <summary>
            Get the shape of the MapShape.
            </summary>
            <remarks>
            Shape is the read only property. Value for the Shape is internally set.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Shapes.Path"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapShape.ShapeValue">
            <summary>
            Get the Under bound object value of the shape.
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            ShapeValue is the read only property. It contains under bound object value of the corresponding shape. Value for this property is internally set.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapShape.ShapeData">
            <summary>
            Gets and Sets ShapeData values
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapShape.ColorValue">
            <summary>
            Gets or Sets ColorValue for shapes
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapShapeType">
            <summary>
            Gets or Sets MapShapeType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShapeType.NullShape">
            <summary>
            Nullshape / placeholder record.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShapeType.Point">
            <summary>
            Point record, for defining point locations such as a city.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShapeType.PolyLine">
            <summary>
            One or more sets of connected points. Used to represent roads,
            hydrography, etc.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShapeType.Polygon">
            <summary>
            One or more sets of closed figures. Used to represent political
            boundaries for countries, lakes, etc.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapShapeType.Multipoint">
            <summary>
            A cluster of points represented by a single shape record.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LayoutType">
            <summary>
            Gets or Sets LayoutType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LayoutType.Default">
            <summary>
            Defines Default view of Map.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LayoutType.Tile">
            <summary>
            Defines Tile view of Map.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MaxMin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ColorPalettes">
            <summary>
            Gets or Sets ColorPalettes to the Maps.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ColorPalettes.Metro">
            <summary>
            Defines Metro style of ColorPalettes
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ColorPalettes.CoolBlue">
            <summary>
            Defines CoolBlue style of ColorPalettes
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ColorPalettes.CustomPalette">
            <summary>
            Defines CustomPalette style
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.PanMode">
            <summary>
            Gets or Sets PanMode to the Maps.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.Right">
            <summary>
            Defines Right PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.Left">
            <summary>
            Defines Left PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.Top">
            <summary>
            Defines Top PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.Bottom">
            <summary>
            Defines Bottom PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.LeftTop">
            <summary>
            Defines LeftTop PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.LeftBottom">
            <summary>
            Defines LeftBottom PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.RightTop">
            <summary>
            Defines RightTop PanMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.PanMode.RightBottom">
            <summary>
            Defines RightBottom PanMode.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.NavigationControlPositions">
            <summary>
            Gets or Sets NavigationControlPositions
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.NavigationControlPositions.Top">
             <summary>
            NavigationControl is placed at Top
             </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.NavigationControlPositions.Right">
             <summary>
            NavigationControl is placed at Right
             </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.NavigationControlPositions.Bottom">
             <summary>
            NavigationControl is placed at Bottom
             </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.NavigationControlPositions.Left">
             <summary>
            NavigationControl is placed at Left
             </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LayerChangeMode">
            <summary>
            Gets or Sets LayerChangeMode
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LayerChangeMode.Default">
            <summary>
            Defines Default LayerChangeMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LayerChangeMode.Automatic">
            <summary>
            Defines Automatic LayerChangeMode.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LatLonType">
            <summary>
            Gets or Sets LatLonType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LatLonType.DMS">
            <summary>
            Defines DMS LatLonType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LatLonType.Decimal">
            <summary>
            Defines Decimal LatLonType
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LegendIcons">
            <summary>
            Gets or Sets LegendIcons 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendIcons.Rectangle">
            <summary>
            Defines LegendIcons view as Rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendIcons.Ellipse">
            <summary>
            Defines LegendIcons view as Ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendIcons.Custom">
            <summary>
            Defines LegendIcons view as Custom.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendIcons.Default">
            <summary>
            Defines LegendIcons view as Default.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendIcons.Diamond">
            <summary>
            Defines LegendIcons view as Diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendIcons.Triangle">
            <summary>
            Defines LegendIcons view as Triangle.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LegendMode">
            <summary>
            Gets or Sets LegendMode
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendMode.Default">
            <summary>
            Defines Default LegendMode.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendMode.Interactive">
            <summary>
            Defines Interactive LegendMode.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LegendType">
            <summary>
            Gets or Sets LegendType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendType.Bubbles">
            <summary>
            Defines Bubbles LegendType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendType.Layers">
            <summary>
            Defines Layers LegendType
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapPointIcon">
            <summary>
            Gets or Sets MapPointIcon
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPointIcon.Rectangle">
            <summary>
            Sets Rectangle Shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPointIcon.Circle">
            <summary>
            Sets Circle Shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPointIcon.Square">
            <summary>
            Sets Square Shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPointIcon.Diamond">
            <summary>
            Sets Diamond Shape
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapPointIcon.Star">
            <summary>
            Sets Star Shape
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LayerType">
            <summary>
            Gets or Sets LayerType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LayerType.OSM">
            <summary>
            Defines OSM LayerType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LayerType.Bing">
            <summary>
            Defines Bing LayerType
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LegendPosition">
            <summary>
            Gets or Sets LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.Default">
            <summary>
            Defines Default LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.TopLeft">
            <summary>
            Defines TopLeft LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.TopCenter">
            <summary>
            Defines TopCenter LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.TopRight">
            <summary>
            Defines TopRight LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.MidLeft">
            <summary>
            Defines MidLeft LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.Center">
            <summary>
            Defines Center LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.MidRight">
            <summary>
            Defines MidRight LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.BottomLeft">
            <summary>
            Defines BottomLeft LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.BottomCenter">
            <summary>
            Defines BottomCenter LegendPosition
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LegendPosition.BottomRight">
            <summary>
            Defines BottomRight LegendPosition
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapViews">
            <summary>
            Gets or Sets MapViews
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapViews.NormalView">
            <summary>
            Defines NormalView of Maps
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapViews.SmartView">
            <summary>
            Defines SmartView of Maps
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.BubbleType">
            <summary>
            Gets or Sets BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Circle">
            <summary>
            Defines Circle BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Rectangle">
            <summary>
            Defines Rectangle BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Diamond">
            <summary>
            Defines Diamond BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Triangle">
            <summary>
            Defines Triangle BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Trapezoid">
            <summary>
            Defines Trapezoid BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Star">
            <summary>
            Defines Star BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Pentagon">
            <summary>
            Defines Pentagon BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Pushpin">
            <summary>
            Defines Pushpin BubbleType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BubbleType.Custom">
            <summary>
            Defines Custom BubbleType
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.BingMapStyle">
            <summary>
            Gets or Sets BingMapStyle
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BingMapStyle.Road">
            <summary>
            Defines Road view of BingMap
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BingMapStyle.Aerial">
            <summary>
            Defines Aerial view of BingMap
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.BingMapStyle.AerialWithLabels">
            <summary>
            Defines AerialWithLabels view of BingMap
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LabelOrientation">
            <summary>
            Gets or Sets LabelOrientation
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LabelOrientation.Vertical">
            <summary>
            Defines Vertical LabelOrientation
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LabelOrientation.Horizontal">
            <summary>
            Defines Horizontal LabelOrientation
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeType">
            <summary>
            Gets or Sets ShapeType
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeType.Polyline">
            <summary>
            Defines Polyline points in the collection
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeType.Polygon">
            <summary>
            Defines Polygon points in the collection
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeType.PointIcon">
            <summary>
            Defines Geo points in the collection
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.IntersectAction">
            <summary>
            Gets or sets IntersectAction
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.IntersectAction.None">
            <summary>
            Defines None IntersectAction
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.IntersectAction.Trim">
            <summary>
            Defines Trim IntersectAction
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.IntersectAction.Hide">
            <summary>
            Defines Hide IntersectAction
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ImageryLayer">
            <summary>
            ImageryLayer
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.preSize">
            <summary>
            Stores the previous control size
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.currentTiles">
            <summary>
            Gets or sets the current tile
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isSecondLevelLoaded">
            <summary>
            Used to specify whether the second level tiles loaded or not.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousCumulativeScaleValue">
            <summary>
            Gets or sets the valus of previous cumulative scale
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousTranslateX">
            <summary>
            Gets or sets the previous translate  x value
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousTranslateY">
            <summary>
            Gets or sets the previous translate y value
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousXPosition">
            <summary>
            Gets or sets the previous center x position
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousYPosition">
            <summary>
            Gets or sets the previous center y position
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isTransformed">
            <summary>
            It contain tile are transformed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.currentZoomLevel">
            <summary>
            Gets or sets the current zoomlevel
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousCumlativeScale">
            <summary>
            Gets or sets the previous cumulative scale value
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.touchCount">
            <summary>
            Gets or sets the touch count
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isZoomed">
            <summary>
            Gets or sets the value for indicating whether the layer is zoomed
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isScale">
            <summary>
            Gets or sets the bool value indicating whether the layer is scaled
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isKeyValidated">
            <summary>
            Gets or sets a bool value indicating whether the key is validated
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousTiles">
            <summary>
            Gets or sets the value for PreviousTiles
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousTilesCollection">
            <summary>
            Gets or sets the PreviousTilesCollection
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.layer">
            <summary>
            Gets or sets the layer
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.imageUriSubdomains">
            <summary>
            Gets or sets the bing map sub domain
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isPanned">
            <summary>
            Gets or sets a value indicating whether the control is panned
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.imageDpi">
            <summary>
            Gets or sets a value for image dpi
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.centerChangedEventArgs">
            <summary>
            Gets or sets a value center event
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousZoomLevel">
            <summary>
            Gets or sets a value of previousZoomLevel
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.cursorLocation">
            <summary>
            Gets or sets the cursor location on mouse enter.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isSublayerScale">
            <summary>
            Gets or sets a value indicating whether the sub shape layer is scaling 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.removableItems">
            <summary>
            Gets or sets marker items that has to be removed.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.transformGroup">
            <summary>
            Gets or sets the translate group
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.center">
            <summary>
            Gets or sets the value for center
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.topLeft">
            <summary>
            Gets or sets the value for top left
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.topRight">
            <summary>
            Gets or sets the value for top right
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.bottomLeft">
            <summary>
            Gets or sets the value for bottom left
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.bottomRight">
            <summary>
            Gets or sets the value for bottom right
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.scaling">
            <summary>
            Gets or sets a value indicating whether it is touch or pointer wheel.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.stopEventCalling">
            <summary>
            Gets or sets a value indicating whether to call event or not
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isTileDownloaded">
            <summary>
            Gets or sets a value indicating whether the tile is downloaded.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.availableMapSize">
            <summary>
            Gets or sets the available size
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.imageUri">
            <summary>
            Gets or sets the bing map url
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.coordinatePointToWindow">
            <summary>
            Gets or sets the coordinate window points.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.isSizeChanged">
            <summary>
            Gets or sets whether the size of the layer changed
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.originalPath">
            <summary>
            Gets or sets the application local data path
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.ImageryLayer.previousMarker" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.ImageryLayer.markerSelectedTemplate" -->
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.scaleTransformScale">
            <summary>
            Gets or sets the scale transform's scale.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.matrixTransform">
            <summary>
            Gets or sets the matarix transform
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.LatLngBoundsProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.LatLngBounds"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.RadiusProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Radius"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.DistanceTypeProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.DistanceType"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.ResetOnDoubleTapProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.ResetOnDoubleTap"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.CanCacheTilesProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.CanCacheTiles"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.CacheDirectoryProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.CacheDirectory"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.CenterProperty">
            <summary>
            The DependencyProperty of <see cref="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Center"/> property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnLatLngPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the LatLngProperty changed
            </summary>
            <param name="d">Dependency object</param>
            <param name="e">property changed</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnDistancePropertiesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the Distance properties changed
            </summary>
            <param name="d">Dependency object</param>
            <param name="e">Property changed</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.MarkersProperty">
            <summary>
            Gets or sets the value for marker property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.MarkerTemplateProperty">
            <summary>
            Gets or sets the value for marker template property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.BoundingBoxProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BoundingBox.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.CustomDataSymbolsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomDataSymbols.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.SubShapeFileLayersProperty">
            <summary>
             // Using a DependencyProperty as the backing store for SubShapeFileLayers.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.BingMapKeyProperty">
            <summary>
            Identifies the BingMapKey property of the Imagery Layer.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.BingMapStyleProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BingMapStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ImageryLayer.LayerTypeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LayerType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.#ctor">
            <summary>
            Defines the ImageryLayer constructor
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ImageryLayerManipulationStarted">
            <summary>
            Method is called when the manipulation is started
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ImageryLayerManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Method is called when the manipulation is in progress
            </summary>
            <param name="e">Manipulation delta event arguments.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ChangeLevel(System.Windows.Point)">
            <summary>
            Method is called when the manipulation is completed
            </summary>
            <param name="position">zoom position</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ResetLayerTransform">
            <summary>
            To reset the transform of the layer
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ImageryLayerManipulationCompleted">
            <summary>
            Method is used downloading the next level tile 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.UnHookMarkerPropertyChanged(Syncfusion.UI.Xaml.Maps.CustomDataSymbol)">
            <summary>
            Unhooks the property changed event for marker items.
            </summary>
            <param name="symbol">marker object</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateMarkerPosition(Syncfusion.UI.Xaml.Maps.CustomDataSymbol,System.Windows.Point)">
            <summary>
            To calculate marker position
            </summary>
            <param name="symbol">Custom data Symbol</param>
            <param name="markerPosition">Marker Position</param>
            <returns>marker position</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.SetSymbolMidPoint(Syncfusion.UI.Xaml.Maps.CustomDataSymbol)">
            <summary>
            To set the mid point for the custom data symbol
            </summary>
            <param name="symbol">The custom data symbol</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateLatLngBounds">
            <summary>
            Checks to excecute zoom level calculation
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CheckGeoBoundsRange(System.Windows.Point)">
            <summary>
            Checks geo bounds range
            </summary>
            <param name="coordinate"></param>
            <returns>coordinate</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateZoomLevel">
            <summary>
            To calculate zoom level and center position
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetBoundsZoomLevel(System.Windows.Point,System.Windows.Point,System.Double,System.Double)">
            <summary>
            To calculate zoom level with the north east and south west bounds
            </summary>
            <param name="northeast">north east bounds</param>
            <param name="southwest">south west bounds</param>
            <param name="width">control width</param>
            <param name="height">control height</param>
            <returns>minimum zoom level</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.FindRadius(System.Double)">
            <summary>
            To calculate the radius of the latitude
            </summary>
            <param name="latitude">latitude value</param>
            <returns>latitude radius</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetZoomLevelForGeoPoint(System.Double,System.Double,System.Double)">
            <summary>
            To calculate zoom level for latitude and longitude
            </summary>
            <param name="radius">latitude radius</param>
            <param name="mapSize">control size</param>
            <param name="tileSize">tile size</param>
            <returns>zoom level</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateBounds">
            <summary>
            To calculate north east and south west value to calculate zoom level
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.DistanceToLatitudeDegrees(System.Double)">
            <summary>
            Convert distance to latitude degree
            </summary>
            <param name="distance">distance</param>
            <returns>Latitude Degree</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.DistanceToLongitudeDegrees(System.Windows.Point,System.Double)">
            <summary>
            Convert distance to longitude degree
            </summary>
            <param name="position">Center</param>
            <param name="distance">Distance</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.RadiusToDistanceInMeters">
            <summary>
            Convert radius to distance in meter
            </summary>
            <returns>distance in meter</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.tileGrid_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Method is called when the tile size is changed
            </summary>
            <param name="sender">imagery layer</param>
            <param name="e">size</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetLatitudeLongitudeFromPoint(System.Windows.Point)">
            <summary>
            Convert point to longitude and latitude
            </summary>
            <param name="pointXY">To get screen point values.</param>
            <returns>returns the longitude and latitude values</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetPointFromLatitudeLongitude(System.Windows.Point)">
            <summary>
            Convert latitude and longitude to point
            </summary>
            <param name="latitudeLongitude">To get latitude and longitude</param>
            <returns>returns the pixel points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetGeoCoordinateChangedArguments(System.Windows.Point,System.Single)">
            <summary>
            This method is used when panning and zooming is enabled to get the latitude and longitude.
            </summary>
            <param name="pointX">to get longitude</param>
            <param name="pointY">to get latitude</param>
            <returns>Returns the latitude and longitue</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.SetZoomChangingEventArgs(System.Int32,System.Int32)">
            <summary>
            Method used to fire zoom level changed event
            </summary>
            <param name="oldValue">old zoom level</param>
            <param name="newValue">new zoom levl</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnGeoCoordinateChanged(Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs)">
            <summary>
            Method used when zooming and panning changing
            </summary>
            <param name="args">The arguments contains top left, top right , bottom left, bottom right and center property</param>        
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.Tiles_CollectionChanged">
            <summary>
            Method is used for adding the tile in the panel
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateLatLong(System.Windows.Point)">
            <summary>
            This method is used for calculating the latitude and longitude
            </summary>
            <param name="position">latitude and longiyude</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.LoadImageryLayer">
            <summary>
            This method is used to load imagery layer
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> routed event is raised
            on this element. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/>
            that contains the event data. The event data reports that the left mouse button
            was pressed.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> routed event reaches an
            element in its route that is derived from this class. Implement this method to
            add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/>
            that contains the event data. The event data reports that the left mouse button
            was released.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.UpdateTooltip(System.Windows.Input.MouseEventArgs)">
            <summary>
            Updates the tooltip for imagery layer markers.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route
            that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.UpdateMarkerSelected(System.Windows.Input.MouseEventArgs)">
            <summary>
            Update the marker selection for imagery layer marker.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter"/> attached event reaches an element in its route that is derived from this
            class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this
            class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.PanMap(System.Windows.Point)">
            <summary>
            Calculate the distance to pan the map.
            </summary>
            <param name="currentPosition">The current mouse position</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ValidateNewXDistance(System.Double,System.Double)">
            <summary>
            This method returns bool value whether to pan map on new x direction
            </summary>
            <param name="x">new x direction</param>
            <param name="size">current size</param>
            <returns>false</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ValidateNewYDistance(System.Double,System.Double)">
            <summary>
             This method returns bool value whether to pan map on new y direction
            </summary>
            <param name="y">new x direction</param>
            <param name="size">current size</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.RemoveTiles">
            <summary>
            This method is used to remove the tiles 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.RemoveFromView(System.Collections.Generic.List{System.Windows.UIElement},System.Collections.Generic.List{Syncfusion.UI.Xaml.Maps.Tile})">
            <summary>
            This method is used to remove the tiles from view
            </summary>
            <param name="view">image</param>
            <param name="tiles">list of tiles</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GenerateTiles(System.Int32)">
            <summary>
            Generating tiles from the service provider
            </summary>
            <param name="ZoomLevel"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GenerateTilesForZoomLevel(System.Int32)">
            <summary>
            Generating tiles from the service provider
            </summary>
            <param name="ZoomLevel"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateExistingTiles">
            <summary>
            This method is used for calculating the existing tiles for zooming and panning
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.TilesForPanning">
            <summary>
            This method is used for calculating the tiles for panning
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.LoadTiles(System.Collections.Generic.List{Syncfusion.UI.Xaml.Maps.Tile})">
            <summary>
            This method is used for loading the tiles
            </summary>
            <param name="tiles">tiles</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculateTilePosition(System.Collections.Generic.List{Syncfusion.UI.Xaml.Maps.Tile})">
            <summary>
            This method is used calculating the tile position
            </summary>
            <param name="previousTiles">previous tiles</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.AddTiles(System.Collections.Generic.List{Syncfusion.UI.Xaml.Maps.Tile})">
            <summary>
            This method is used for adding tiles in the view
            </summary>
            <param name="previousTile">previous tiles</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.TilesForZooming">
            <summary>
            This method is used for calculating the tiles for zooming
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.AddAdditionalLayer">
            <summary>
            This method is used to add the additional layer in the view
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculatePreviousTile">
            <summary>
            This method is used for calculating the previous tiles
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CalculatePreviousTilesPosition(System.Int32)">
            <summary>
            This method is used for calculating the previous level tile position
            </summary>
            <param name="level">zoom level</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CheckDownloadedLevel">
            <summary>
            This method is used for calculating the downloaded tiles level
            </summary>
            <returns>level</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.RemovePreviousLevelTiles(System.Collections.Generic.List{Syncfusion.UI.Xaml.Maps.Tile})">
            <summary>
            This method is used to remove the unwanted tiles
            </summary>
            <param name="tiles">tiles</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.SetZIndex(Syncfusion.UI.Xaml.Maps.Tile)">
            <summary>
            This method is used for setting the z index for the tile
            </summary>
            <param name="tile">tile</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.UpdateDownloadedTile(Syncfusion.UI.Xaml.Maps.Tile)">
            <summary>
            This method is used for update the downloaded tile in thecollection
            </summary>
            <param name="tile">tile</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetTileTransformation(Syncfusion.UI.Xaml.Maps.Tile)">
            <summary>
            Get the boolean value for tile is added in the view or not
            </summary>
            <param name="tile">Display tile</param>
            <returns>return boolean value</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GetUri(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method returns the uri link
            </summary>
            <param name="X">X Co-ordinate</param>
            <param name="Y">Y Co-ordinate</param>
            <param name="Scale">Scale</param>
            <returns>returns uri</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CheckFolder(System.String[],System.String)">
            <summary>
            To check whether folder name already exits or not
            </summary>
            <param name="folder"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.DeleteTilesFromCache">
            <summary>
            To delete the files saved in the cache
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CheckImageInCache(Syncfusion.UI.Xaml.Maps.Tile)">
            <summary>
            To check whether the image exists in memory
            </summary>
            <param name="tile"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.CreateImageInCache(Syncfusion.UI.Xaml.Maps.Tile,System.String,System.String)">
            <summary>
            To save the image in cache
            </summary>
            <param name="tile"></param>
            <param name="folder"></param>
            <param name="path"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.Bitmap_DownloadCompleted(System.Object,System.EventArgs,Syncfusion.UI.Xaml.Maps.Tile,System.String,System.String)">
            <summary>
            Event is fired when the image is download completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="tile"></param>
            <param name="folder"></param>
            <param name="path"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.Bitmap_DownloadFailed(System.Object,System.Windows.Media.ExceptionEventArgs,Syncfusion.UI.Xaml.Maps.Tile,System.String,System.String)">
            <summary>
            Event is fired when the image is download failed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="tile"></param>
            <param name="folder"></param>
            <param name="path"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.GenerateFolderName(System.String)">
            <summary>
            To generate the folder name for custom uri
            </summary>
            <param name="customUri">custom uri</param>
            <returns>folder name</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.ConvertPointToLatLong(System.Windows.Point)">
            <summary>
            This method is used for calculating the latitude and longitude
            </summary>
            <param name="position">latitude and longiyude</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.LoadOSM">
            <summary>
             This method helps to load the OSM map in the Imagery Layer
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.LoadBingMap">
            <summary>
             This method helps to load the Bing Map in the Imagery Layer
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.TransformSubLayers">
            <summary>
            To apply the transform for the sub layers
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryLayer.Dispose">
            <summary>
            Dispose method invokes while unloading ImageryLayer
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.ViewTransform">
            <summary>
            Gets or sets the view transform
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.ZoomTransform">
            <summary>
            Gets or sets the zoom transform
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.temposition">
            <summary>
            Gets or sets the temp position
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.UnsubscribeEvent">
            <summary>
            Gets or sets a value indicating whether to subscribe the zoom level changed event
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.IsMouseWheeled">
            <summary>
            Gets or sets a value indicating whether mouse wheel performed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.IsCancel">
            <summary>
            Gets or sets a value indicating whether to cancel zooming
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.ExistingLevel">
            <summary>
            Gets or sets a value of existing zoom level
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Northeast">
            <summary>
            Gets or sets the north east coordinate. Range checked (-90, 90) and (-180, 180).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Southwest">
            <summary>
            Gets or sets the south west coordinate. Range checked (-90, 90) and (-180, 180).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.IsZoomLevelChanged">
            <summary>
            Gets or sets the value indicating whether the zoom level is changed
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.MarkerDataSymbols">
            <summary>
            Gets or sets the custom data symbols which maintain all item source markers.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.LatLngBounds">
            <summary>
            Gets or sets the geo bounds based on southwest and northeast corner goe points to calculate auto zoom level.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Radius">
            <summary>
            Gets or sets the radius distance from center position to calculate the auto zoom level.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.DistanceType">
            <summary>
            Gets or sets the radius distance type in meters or kilometers or miles to calculate the auto zoom level. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.ResetOnDoubleTap">
            <summary>
            Gets or sets a value whether to reset on double tap
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.CanCacheTiles">
            <summary>
            Gets or sets a bool value indicating whether to save the tiles in cache
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.CacheDirectory">
            <summary>
            Gets or sets the value for CacheDirectory
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Center">
            <summary>
            Gets or sets the value for Center
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.ImageryLayer.ZoomLevelChanging">
            <summary>
            Event fired when zoom level is changingfrom one level to another levl
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.ImageryLayer.CenterChanged">
            <summary>
            Gets or sets the event which is raised when the panning  and zooming is changing
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Markers">
            <summary>
            Gets or Sets the Markers for ShapeFileLayer.
            </summary>
            <remarks>
            Use this property to bound the object to a point in the map based on Latitude and Longitude.
            </remarks>
            <value>
            Type : <see cref="T:System.Collections.IEnumerable"/>
            </value>
            <example>
            <code language="C#">
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.MarkerTemplate">
            <summary>
            Gets or sets the Template for the Items in the Marker.
            </summary>
            <remarks>
            Use this property to define the template for the Items which are defines in the Marker.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.Tiles">
            <summary>
            Gets or sets the Tile for the Map Layer.
            </summary>
            <value>Collection of Tiles</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.BingMapKey">
            <summary>
            Gets or sets BingMapKey for Imagery Layer.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.BingMapStyle">
            <summary>
            Gets or sets BingMapStyle for Imagery Layer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.LayerType">
            <summary>
            Gets or sets LayerType for Imagery Layer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.DefaultCursor">
            <summary>
            Gets or sets DefaultCursor for the Imagery layer.
            </summary>
            <value>
            Cursor
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.PanCursor">
            <summary>
            Gets or sets Panning cursor for the Imagery layer.
            </summary>
            <value>
            Cursor
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.MapBounds">
            <summary>
            Gets the imagery layer bounds value (x, y, width, height) in pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ImageryLayer.TileBounds">
            <summary>
            Gets or sets the bounds of imagery layer.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.DistanceType">
            <summary>
            Represents the radius distance type
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.DistanceType.Meter">
            <summary>
            Distance in meters
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.DistanceType.KiloMeter">
            <summary>
            Distance in kilometers
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.DistanceType.Mile">
            <summary>
            Distance in miles
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ZoomLevelChangingEventArgs">
            <summary>
            Class Implementation of <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomLevelChangingEventArgs"/>
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ZoomLevelChangingEventArgs.PreviousLevel">
            <summary>
            Gets or sets a value for previous zoom level
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ZoomLevelChangingEventArgs.CurrentLevel">
            <summary>
            Gets or sets a value for current zoom level
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ZoomLevelChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the zoom level changes
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs">
            <summary>
            To implement CenterChangedEventArgs in imagery layer
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs.TopLeft">
            <summary>
            Gets the top left latitude and longitude.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs.TopRight">
            <summary>
            Gets the top right latitude and longitude.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs.BottomLeft">
            <summary>
            Gets the bottom left latitude and longitude.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs.BottomRight">
            <summary>
            Gets the bottom right latitude and longitude.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.CenterChangedEventArgs.Center">
            <summary>
            Gets the center latitude and longitude.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.LatLngBounds">
            <summary>
            To calculate the zoom level based on the bounds
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LatLngBounds.NortheastProperty">
            <summary>
            Using a DependencyProperty as the backing store for Northeast.  This enables binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.LatLngBounds.OnNortheastPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the north east propertry changed
            </summary>
            <param name="d">DependencyObject</param>
            <param name="e">PropertyChanged</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.LatLngBounds.SouthwestProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Southwest.  This enables binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.LatLngBounds.OnSouthwestPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the south west property gets changed
            </summary>
            <param name="d">Dependency object</param>
            <param name="e">PropertyChanged</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.LatLngBounds.IsNaN(System.Windows.Point)">
            <summary>
            Checks given coordinate is nan or not
            </summary>
            <param name="coordinate">Geo Coordinate</param>
            <returns>returns true/false</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LatLngBounds.ImageryLayer">
            <summary>
            Gets or sets the imagery layer
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LatLngBounds.Northeast">
            <summary>
            Gets or sets the northeast corner of the geo bounds. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.LatLngBounds.Southwest">
            <summary>
            Gets or sets the southwest corner of the geo bounds. 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ImageryPanel">
            <summary>
            ImageryPanel
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryPanel.#ctor">
            <summary>
            Constructor for ImageryPanel
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for
            child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class. 
            </summary>
            <param name="constraint">The available size that this element can give to
            child elements. Infinity can be specified as a value to indicate that the
            element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its
            calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ImageryPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a
            size for a <see cref="T:System.Windows.FrameworkElement"/> derived class. 
            </summary>
            <param name="finalSize">The final area within the parent that this element
            should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.Tile">
            <summary>
             Tile is a UIElement that contains shape file layer and map Images
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.TileImageUri">
            <summary>
            Gets or sets the image uri
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.tempImgLayer">
            <summary>
            Gets or sets the imagery layer
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.TileStringProperty">
            <summary>
            Using a DependencyProperty as the backing store for TileString.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.TileImageSourceProperty">
            <summary>
            Identifies TileImageSource Property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.XProperty">
            <summary>
            Identifies X Property of the Tiles
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.YProperty">
            <summary>
            Identifies Y Property of the Tile.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.Tile.TileImageProperty">
            <summary>
            Using a DependencyProperty as the backing store for TileImage.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BingMapApp.Tile">Tile</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or
            internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> routed event is raised
            on this element. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/>
            that contains the event data. The event data reports that the left mouse button
            was pressed.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> routed event reaches an
            element in its route that is derived from this class. Implement this method to
            add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/>
            that contains the event data. The event data reports that the left mouse button
            was released.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave"/> attached event is raised on this element. Implement this method to add class
            handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.LatLongToPoint(System.Double,System.Double)">
            <summary>
             This method converts latitude longitude to point value
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.LatLongToPoint(System.Double,System.Double,System.Int32)">
            <summary>
            Calculates Latitude and Longitude of Tiles which is to be generated
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="zoomlevel"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Tile.Dispose">
            <summary>
            Dispose method invokes while unloading Tile
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.Scale">
            <summary>
            Gets or sets the scale value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.ImageBounds">
            <summary>
            Gets or sets the image bounds
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.Bounds">
            <summary>
            Gets or sets the current image bounds
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.IsDownloaded">
            <summary>
            Gets or sets a value indicating whether the tile is dowmloaded
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.TileString">
            <summary>
            Gets or sets Text value of the tile .
            </summary>
            <value>
            String
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.TileImageSource">
            <summary>
            Gets or sets TileImageSource for the Tile.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.X">
            <summary>
            Gets or sets X Co-Ordinate For the Tile.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.Y">
            <summary>
            Gets or sets Y Co-Ordinate for the Tile.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Tile.TileImage">
            <summary>
            Gets or sets Image for Tile.
            </summary>
            <value>
            DependencyObject
            </value>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.SfMap">
            <summary>
            <toolboxitem>true</toolboxitem>
            <toolboxvscategory>Syncfusion controls for Metro</toolboxvscategory>
            <toolboxblendcategory>Syncfusion controls for Metro</toolboxblendcategory>
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.preSize">
            <summary>
            Stores the previous control size
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.TooltipPanel">
            <summary>
            Declare the tooltip panel.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.Tooltip">
            <summary>
            Declare the Tooltip content control.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.DurationTimer">
            <summary>
            Declare the tooltip duration timer.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.Scale">
            <summary>
            Declare and store the Map scroll view
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.ZoomFactorProperty">
            <summary>
            Identifies ZoomFactor Dependency Property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.MapResourceDictionaryProperty">
            <summary>
            Dependency registration for <see cref="P:Syncfusion.UI.Xaml.Maps.SfMap.MapResourceDictionary"/>
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.NavigationControlScaleProperty">
            <summary>
            // Using a DependencyProperty as the backing store for NavigationControlScale.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.OnScaleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the value of the NavigationControlScale property changes. 
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.ShowNavigationControlProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShowNavigationControl.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.NavigationControlPositionProperty">
            <summary>
            // Using a DependencyProperty as the backing store for NavigationControlPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.EnableLayerChangeAnimationProperty">
            <summary>
             // Using a DependencyProperty as the backing store for EnableLayerChangeAnimation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.MapStyleProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.HeaderProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Header.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.EnableZoomProperty">
            <summary>
            // Using a DependencyProperty as the backing store for EnableZoom.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.EnablePanProperty">
            <summary>
            // Using a DependencyProperty as the backing store for EnablePan.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.MinZoomProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MinZoom.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.MaxZoomProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MaxZoom.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.ZoomLevelProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ZoomLevel.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.LoadTileLayer(Syncfusion.UI.Xaml.Maps.ImageryLayer)">
            <summary>
            To load the imageryLayer
            </summary>
            <param name="imageryLayer">The imagery layer</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.LayerChangeModeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LayerChangeMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.ScrollContentProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ScrollContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.LayersProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Layers.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.BaseMapIndexProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BaseMapIndex.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.MapCoordsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapCoords.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.ShowCoordsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShowCoords.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.LatitudeLongitudeTypeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LatitudeLongitudeType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.EnableZoomOnSelectionProperty">
            <summary>
            // Using a DependencyProperty as the backing store for EnableZoomOnSelection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.SfMap.RectClipProperty">
            <summary>
            // Using a DependencyProperty as the backing store for RectClip.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.#ctor">
            <summary>
            Creates a new Instance for the SfMap.And initialize its values.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.Zoom(System.Double)">
            <summary>
            Zoom the map with given zoom value.
            </summary>
            <param name="zoomValue">Scale value of the map.</param>
            <remarks>
            Use this method to zoom in or zoom out the map based on the zoomValue parameter. zoomValue is the scale value of the zoom feature.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";            
                        syncMap.Layers.Add(layer);
                        syncMap.Zoom(2);
                        
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.SetShapeStrokeThicknessOnZooming(Syncfusion.UI.Xaml.Maps.MapLayer)">
            <summary>
             To change the shape ShapeStrokeThickness value on zooming based on the zoom factor.
            </summary>
            <param name="mapLayer"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.SetStrokeThickness(Syncfusion.UI.Xaml.Maps.ShapeFileLayer,System.Double)">
            <summary>
             To change the shape ShapeStrokeThickness value on zooming based on the zoom factor.
            </summary>
            <param name="subLayer"></param>
            <param name="zoomFactor"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.PanMap(System.Double,System.Double)">
            <summary>
            Pans the map up to specific x and y values
            </summary>
            <remarks>
            Use this function to pan the map to given x and y values
            </remarks>
            <param name="x">X coordinate values to be Panned.</param>
            <param name="y">Y coordinate value to be panned.</param>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";            
                        syncMap.Layers.Add(layer);
                        syncMap.Pan(100,200);
                        
                    }
                }
            
            }
            
            </code>
            </example>
            
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.MapTooltipSetting(Syncfusion.UI.Xaml.Maps.ToolTipSetting,Syncfusion.UI.Xaml.Maps.ToolTipSetting)">
            <summary>
            Mapping the tooltip settings
            </summary>
            <param name="settings">The tooltip Bindable object</param>
            <param name="tooltipSettings">the tooltip settings</param>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.UI.Xaml.Maps.SfMap.CalculateTooltipBackgroundPoints(System.Double,System.Double,Syncfusion.UI.Xaml.Maps.ToolTipSetting,System.Double,System.Double,System.Boolean)" -->
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.OnTooltipOpening(System.Object,Syncfusion.UI.Xaml.Maps.ToolTipOpeningEventArgs)">
            <summary>
            Invoked when tooltip on the map control is opened.
            </summary>
            <param name="sender">Map control</param>
            <param name="args">TooltipOpeningEventArgs</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SfMap.Dispose">
            <summary>
            Dispose method invoked while unloading map control
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.SfMap.ZoomedIn">
            <summary>
            Occurs when zooming the map. 
            </summary>
            <remarks>
            ZoomedIn event will be triggered when zooming in the map. Use this event handler to do any operation when zooming the map.The event argument contains the Latitude, Longitude values and ZoomLevel.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";            
                        syncMap.Layers.Add(layer);
                        syncMap.ZoomedIn += syncMap_ZoomedIn;
                    }
            
                    void syncMap_ZoomedIn(object sender, ZoomEventArgs args)
                    {
                        var latitude = args.Latitude;
                        var longitude = args.Longitude;
                        var zoomlevel = args.ZoomLevel;
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.SfMap.ZoomedOut">
            <summary>
            Occurs when zoomed out the map. 
            </summary>
            <remarks>
            ZoomedOut event will be triggered when zooming out the map. Use this event handler to do any operation when zooming out the map.The event argument contains the Latitude, Longitude values and ZoomLevel.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";            
                        syncMap.Layers.Add(layer);
                        syncMap.ZoomedOut += syncMap_ZoomedOut;
                    }
            
                    void syncMap_ZoomedOut(object sender, ZoomEventArgs args)
                    {
                        var latitude = args.Latitude;
                        var longitude = args.Longitude;
                        var zoomlevel = args.ZoomLevel;
                    }
                   
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.SfMap.Panned">
            <summary>
            Occurs after panned the map. 
            </summary>
            <remarks>
            Panned event will be triggered after panned the map. Use this event handler to do any operation after the map was panned.The event argument contains the Latitude, Longitude values and and PanningDirection.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.Layers.Add(layer);
                        syncMap.Panned += syncMap_Panned;
                    }
            
                    void syncMap_Panned(object sender, PanEventArgs args)
                    {
                        var latitude = args.Latitude;
                        var longitude = args.Longitude;
                        var direction = args.PanningDirection;
                    }
            
                }
            
            }
            
            
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.SfMap.Panning">
            <summary>
            Occurs while panning the map. 
            </summary>
            <remarks>
            Panned event will be triggered while panning the map. Use this event handler to do any operation while the map is panning.The event argument contains the Latitude, Longitude values and and PanningDirection.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.Layers.Add(layer);
                        syncMap.Panning += syncMap_Panning;
            
                    }
            
                    void syncMap_Panning(object sender, PanEventArgs args)
                    {
                        var latitude = args.Latitude;
                        var longitude = args.Longitude;
                        var direction = args.PanningDirection;
                    }       
                }
            
            }
            
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ZoomFactor">
            <summary>
            Gets / ses the value of zooming factor
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.MapResourceDictionary">
            <summary>
            Gets or sets the maps resource dictionary file path which is used to customize the control default styles for custom themes.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.NavigationControlScale">
            <summary>
            Gets or Sets NavigationControlScale for Map
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ShowNavigationControl">
            <summary>
            Enables or disables NavigationControl 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.NavigationControlPosition">
            <summary>
            Gets or Sets NavigationControlPosition to the Maps
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.EnableLayerChangeAnimation">
            <summary>
            Gets or Sets EnableLayerChangeAnimation
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.MapStyle">
            <summary>
            Gets or sets the style for the map.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Style"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.Header">
            <summary>
            Gets or sets the Header of the SfMap. 
            </summary>
            <remarks>
            Use this property to set the header for the SfMap. Header is the title which shown on top of the SfMap.
            </remarks>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.Header = new TextBlock { Text="World SfMap", HorizontalAlignment=HorizontalAlignment.Center,VerticalAlignment=VerticalAlignment.Center };
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.EnableZoom">
            <summary>
            Enables or disables the Zooming feature of the map.
            </summary>
            <remarks>
            Use this property to enable or disable the zooming feature of the map. "True" value will enable the zoom feature."False" value will disable the zooming feature.
            </remarks>
            <value>
            Type :<see cref="T:System.Boolean"/>
            "True" value enables the Zooming;And "False" will disable the Zooming.
            Default Value is "True".
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.EnableZoom = false;
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.EnablePan">
            <summary>
            Enables or disables the Panning feature of the map.
            </summary>
            <remarks>
            Use this property to enable or disable the panning feature of the map. "True" value will enable the panning feature."False" value will disable the panning feature.
            </remarks>
            <value>
            Type :<see cref="T:System.Boolean"/>
            "True" value enables the Panning;And "False" will disable the Panning.
            Default Value is "True".
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.EnablePan = false;
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.MinZoom">
            <summary>
            Gets or sets the minimum zoom level of the map.
            </summary>
            <remarks>
            Use this property to set the minimum zoom level of the map. The map cannot be zoomed out below the MinZoom.
            </remarks>
            <value>
            Type :<see cref="T:System.Int32"/>
            <para>
            Default value will be 1.
            </para>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.MinZoom = 3;
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>        
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.MaxZoom">
            <summary>
            Gets or sets the maximum zoom level of the map.
            </summary>
            <remarks>
            Use this property to set the maximum zoom level of the map. The map cannot be zoomed beyond the MaxZoom value.
            </remarks>
            <value>
            Type : <see cref="T:System.Int32"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.MaxZoom = 30;
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ZoomLevel">
            <summary>
            Gets or sets the ZoomLevel for the map.Based the ZoomLevel value the map will be zoomed.
            </summary>
            <remarks>Use this property to zoom in or zoom out the map. If the ZoomLavel is increased then map will be zoomed in.If value is decreases the map will be zoomed out.</remarks>
            <value>
            Type :<see cref="T:System.Int32"/>
            <para>The default value is 1</para>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.ZoomLevel = 3;
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ScrollContent">
            <summary>
            Gets or Sets MapView
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.Layers">
            <summary>
            Gets or sets the Layers for the map. Layers are the content for the map.
            </summary>
            <remarks>
            Use this property to add  or remove the layers of the map. Each layer in Layers are the container of the map elements.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.LegendSettings">
            <summary>
            Gets or Sets LegendSetting
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.BaseMapIndex">
            <summary>
            Gets or sets the index of the layer which is loaded initially.
            </summary>
            <remarks>
            Use this property to set the initial layer to be loaded in the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Int32"/>
            </value>
            <example>
            <code langeage="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        ShapeFileLayer layer1 = new ShapeFileLayer();
                        layer.Uri = "MapApp.US.shp";
                        syncMap.Layers.Add(layer);   
                        syncMap.Layers.Add(layer1);
                        syncMap.BaseMapIndex = 1;
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.MapCoords">
            <summary>
            Gets the co ordinates of the map in terms of latitude and longitude values. 
            </summary>
            <remarks>
            This is read only property to get the current latitude and longitude values when hovering on the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Point"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ShowCoords">
            <summary>
            Gets or sets a value indicating whether the latitude and longitude value can be viewed or not.
            </summary>
            <value><see langword="true"/> if ; otherwise, <see langword="false"/>.</value>
            <remarks>Use this property to enables or disables the visibility of the Latitude and Longitude values on the top right of the SfMap</remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.Layers.Add(layer);
                        syncMap.ShowCoords = false;
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.LatitudeLongitudeType">
            <summary>
            Gets or sets display type of LatitudeLangitude values on the top right of the map.
            </summary>
            <value>Type :<see cref="T:Syncfusion.UI.Xaml.Maps.LatLonType"/></value>
            <remarks>
            Use this property to determine how to display the latitude values. There are two types,
            <para>DMS and Decimal</para>
            <para>Decimal will be shown as normal numbers.</para>
            <para>DMS will be shown as Degrees,Minutes and Seconds.</para>
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.LatitudeLongitudeType = LatLonType.Decimal;
                        syncMap.LatitudeLongitudeType = LatLonType.DMS;
                        syncMap.Layers.Add(layer);
                        
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.EnableZoomOnSelection">
            <summary>
            Enables or disables the ZoomOnSelection feature of the map.
            </summary>
            <remarks>
            Use this property to enable or disable the zoom on selection feature of the map. "True" value will enable the zoom on selection feature."False" value will disable the zoom on selection feature.
            </remarks>
            <value>
            Type :<see cref="T:System.Boolean"/>
            "True" value enables the Zooming;And "False" will disable the Zooming.
            Default Value is "True".
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();
                        syncMap.EnableZoomOnSelection = false;
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";          
                        syncMap.Layers.Add(layer);            
                    }
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ResetCommand">
            <summary>
            Gets the ResetCommand for SfMap..
            </summary>
            <value>
            Type <see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <remarks>
            Use this property to invoke Reset command of the map. This command will clear all the elements of the map.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button cmdButton = new Button();
                        cmdButton.Command = syncMap.ResetCommand;
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.RefreshCommand">
            <summary>
            Gets the Refresh Command for the Maps.Invokes refresh functionality of the map.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <remarks>
            Use this command to refresh the map.While refreshing the map, all elements will be cleared then added again.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button cmdButton = new Button();
                        cmdButton.Command = syncMap.RefreshCommand;
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.PanResetCommand">
            <summary>
            Gets the command for resetting the pan values.
            </summary>
            <remarks>
            Use this command to reset the pan values of the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button cmdButton = new Button();
                        cmdButton.Command = syncMap.PanResetCommand;
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ZoomResetCommand">
            <summary>
            Gets the command for reset the zoom of the map.
            </summary>
            <remarks>
            Use this command to reset the zoom of the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button cmdButton = new Button();
                        cmdButton.Command = syncMap.ZoomResetCommand;
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ZoomInCommand">
            <summary>
            Gets the command for Zoom in the map.
            </summary>
            <remarks>
            Use this command to zoom in the map.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button cmdButton = new Button();
                        cmdButton.Command = syncMap.ZoomInCommand;
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.ZoomOutCommand">
            <summary>
            Gets the Command for zoom out the map.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <remarks>
            Use this command to zoom out the map.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button cmdButton = new Button();
                        cmdButton.Command = syncMap.ZoomOutCommand;
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SfMap.PanCommand">
            <summary>
            Gets the command for panning the map.
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Input.ICommand"/>
            </value>
            <remarks>
            Use this command to pan the map. Command parameter will specify the direction to be panned.
            <para>There are four command parameters can be given,</para>
            <para>Left,Right,Top and Bottom</para>
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        Button topPan = new Button();
                        topPan.Command = syncMap.PanCommand;
                        topPan.CommandParameter = "Top";
                        Button bottomPan = new Button();
                        bottomPan.Command = syncMap.PanCommand;
                        bottomPan.CommandParameter = "Bottom";
                        Button leftPan = new Button();
                        leftPan.Command = syncMap.PanCommand;
                        leftPan.CommandParameter = "Left";
                        Button rightPan = new Button();
                        rightPan.Command = syncMap.PanCommand;
                        rightPan.CommandParameter = "Right";
                        syncMap.Layers.Add(layer);
                    }
                }    
            }
            
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.SfMap.MapToolTipOpening">
            <summary>
            Occurs when any tooltip on the <see cref="T:Syncfusion.UI.Xaml.Maps.SfMap"/> control is opened.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileDbfData">
            <summary>
            Represents the ShapeFileDBFData class in the map.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileDbfData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DBFReader.ShapeFileDBFData">ShapeFileDBFData</see> class. 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfData.DbfHeader">
            <summary>
            Gets  the dbf data file header. .
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfData.DbfFields">
            <summary>
            Gets or sets values of DBFFields.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileDbfField">
            <summary>
            Defines class ShapeFileDBFField
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileDbfField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DBFReader.ShapeFileDBFField">ShapeFileDBFField</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader">
            <summary>
            Defines class for ShapeFileDBFHeader
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DBFReader.ShapeFileDBFHeader">ShapeFileDBFHeader</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Length">
            <summary>
            Gets or sets Length of the Header.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.FileType">
            <summary>
            Gets or sets the DBF file type.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.RecordLength">
            <summary>
            Gets or sets the Record length of the DBF file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.NumberOfRecords">
            <summary>
            Gets or sets number of Reacords in the fle.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.ShapeFileDbfFields">
            <summary>
            Gets or sets the ShapeFileDBFFields.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Day">
            <summary>
            Gets or sets Day of the DBF file last update.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Month">
            <summary>
            Gets or sets Month of the DBF file last updated.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Year">
            <summary>
            Gets or sets Year of the DBF file last updated.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.EncryptionFlag">
            <summary>
            Gets or sets Cuncription flag of the DBF file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.FreeRecordThread">
            <summary>
            Gets the FreeRecordThread of the DBF file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.IncompleteTransaction">
            <summary>
            Gets the IncompleteTransaction of the DBF File.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.LanguageDriver">
            <summary>
            Gets the Language Driver of the DBF File.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.MdxFlag">
            <summary>
            Gets the MDX Flag of the DBF File.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Reserve1">
            <summary>
            Gets the First Reserved byte in the DBF File.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Reserve2">
            <summary>
            Gets the Second Reserved byte in the DBF File.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Reserve3">
            <summary>
            Gets the Third Reserved byte in the DBF file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Reserve4">
            <summary>
            Gets the fourth Reserved byte in the DBF file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileDbfHeader.Terminator">
            <summary>
            Gets the Terminator flag of the DBF file.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileDbfReader">
            <summary>
            Defines class ShapeFileDBFReader
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileDbfReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DBFReader.ShapeFileDBFReader">ShapeFileDBFReader</see> class. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileDbfReader.ReadDbfData(System.String)">
            <summary>
            Method that Reads the DBF Data.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ZoomEventHandler">
            <summary>
            Represent a delegate to route the ZoomEvents in the map.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">An <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomEventArgs">ZoomEventArgs</see> that contains the event data.</param>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ZoomEventArgs">
            <summary>
            Represents the ZoomEventArgs in map.Inherites from the RoutedEventArgs
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomEventArgs.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ZoomEventArgs">ZoomEventArgs</see> class. 
            </summary>
            <param name="latitude">Latitude when Zooming</param>
            <param name="longitude">Longitude when zooming</param>
            <param name="zoomLevel">Current Zoom level</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ZoomEventArgs.Longitude">
            <summary>
            Gets the Latitude of the ZoomEventArgs.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            Latitude is the read only property passed when zoom the map.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ZoomEventArgs.Latitude">
            <summary>
            Gets the Longitude of the ZoomEventArgs.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            Longitude is the read only property passed when zoom the map.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ZoomEventArgs.ZoomLevel">
            <summary>
            Gets the ZoomLevel of the ZoomEventArgs.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            ZoomLevel is the read only property passed when zoom the map.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.PanEventHandler">
            <summary>
            Represent a delegate to route the Pan Events in the map.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">An <see cref="T:Syncfusion.UI.Xaml.Maps.PanEventArgs">PanEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.PanEventArgs">
            <summary>
            Represent the PanEventArgs in the SfMap.Inherited from the RoutedEventArgs. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.PanEventArgs.#ctor(System.Double,System.Double,Syncfusion.UI.Xaml.Maps.PanMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.PanEventArgs">PanEventArgs</see> class. 
            </summary>
            <param name="latitude">Latitude when Zooming</param>
            <param name="longitude">Longitude when zooming</param>
            <param name="panmode">Current ZoomLevel</param>       
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.PanEventArgs.Longitude">
            <summary>
            Gets the Longitude of the PanEventArgs.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            Longitude is the read only property passed when pan the map.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.PanEventArgs.Latitude">
            <summary>
            Gets the Latitude of the PanEventArgs.
            </summary>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <remarks>
            Latitude is the read only property passed when pan the map.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.PanEventArgs.PanningDirection">
            <summary>
            Gets the PanningDirection of the ZoomEventArgs.
            </summary>
            <value>
            Type :<see cref="T:Syncfusion.UI.Xaml.Maps.PanMode"/>
            </value>
            <remarks>
            Panning Direction is the read only property passed when pan the map.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.SelectionEventHandler">
            <summary>
            Represent a delegate to route the Selection Events in the map.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">An <see cref="T:Syncfusion.UI.Xaml.Maps.SelectionEventArgs">SelectionEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.SelectionEventArgs">
            <summary>
            Represents the SelectionEventArgs in the SfMap.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SelectionEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.SelectionEventArgs">SelectionEventArgs</see> class. 
            </summary>
            <param name="items">Items to be selected or unselected</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SelectionEventArgs.Items">
            <summary>
            Gets the Items of the SelectionEvent.
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            Items is the read only property to read the items when selection and un selection events occurred.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.SizeChangingEventHandler">
            <summary>
            Represent a delegate to route the Bubble Size changing Events in the map.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">An <see cref="T:Syncfusion.UI.Xaml.Maps.SizeChangingEventArgs">SizeChangingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.SizeChangingEventArgs">
            <summary>
            Represents the SelectionEventArgs in the SfMap.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SizeChangingEventArgs.#ctor(System.Object,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.SelectionEventArgs">SelectionEventArgs</see> class. 
            </summary>
            <param name="items">Items to be selected or unselected</param>
            <param name="size"></param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SizeChangingEventArgs.Data">
            <summary>
            Gets the Bounded object of Bubble.
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            Data is the read only property to read the items of Bubble
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.SizeChangingEventArgs.BubbleValue">
            <summary>
            Gets or Sets the BubbleValue
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ToolTipOpeningEventArgs">
            <summary>
            Represents the TooltipOpeningEventArgs in the SfMap.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ToolTipOpeningEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.TooltipOpeningEventArgs">TooltipOpeningEventArgs</see> class. 
            </summary>
            <param name="items">Items to be tooltip opened</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipOpeningEventArgs.Data">
            <summary>
            Gets the Data of the TooltipOpeningEvent.
            </summary>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
            <remarks>
            Items is the read only property to read the Data when tooltip opening events occurred.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipOpeningEventArgs.ToolTipType">
            <summary>
            Gets the name of the item in which tooltip is opened such as Bubble / Marker / Shape.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipOpeningEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel value of the TooltipOpeningEvent.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileHeader">
            <summary>
            ShapeFileHeader
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.#ctor">
            <summary>
            Constructor ShapeFileHeader
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.ToString">
            <summary>
            Converts values to ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.Length">
            <summary>
            Indicate the fixed-length of this header in bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.FileCode">
            <summary>
            Specifies the file code for an ESRI shapefile, which
            should be the value, 9994.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.FileLength">
            <summary>
            Specifies the length of the shapefile, expressed
            as the number of 16-bit words in the file.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.BoundingBox">
            <summary>
             Gets or Sets BoundingBox value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.Version">
            <summary>
            Specifies the shapefile version number.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileHeader.ShapeType">
            <summary>
            Specifies the shape type for the file. A shapefile
            contains only one type of shape.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer">
            <summary>
            Represents the ShapeFileLayer class.
            </summary>
            <remarks>
            The ShapeFileLayer is one of the Layer in the SfMap. This shape file layer will read the ShapeFile(.shp) and dBase(.dbf) file and parse them in to SfMap Elements.
            </remarks>
            <example>
            <para>The Following code demonstrate how to create a ShapeFileLayer in C#. </para>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;    
            
            namespace MapApp
            {        
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.Layers.Add(layer);
                        this.mainGrid.Children.Add(syncMap);
                    }
            
                }
            
            }
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.isBaseLayer">
            <summary>
            Determines the BaseLayer
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.baselayer">
            <summary>
            ShapeFileLayer
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.itemTextBlock">
            <summary>
            To store text block used for measure the string
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.previousMarker" -->
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.rightMinPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.rightMaxPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.leftMinPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.leftMaxPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.bottomMinPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.bottomMaxPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.topMinPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.topMaxPoint">
            <summary>
            To store the shape points
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.height">
            <summary>
            To store the shape height
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CurrentColorPaletteProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CurrentColorPalette.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointPopupTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPointPopupTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointIconProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPointIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnMapPointIconChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the value of the MapPointIcon property changes. 
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointIconSizeProperty">
            <summary>
            The dependency property of <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointIconSize"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeFillProperty">
            <summary>
            Dependency registration of <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeFill"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnShapeFillChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ShapeFill get changed.
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The dependency property changed event arguments</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeStrokeProperty">
            <summary>
            Dependency registration of <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeStroke"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnShapeStrokeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when ShapeStroke get changed.
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The dependency property changed event arguments</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MarkersProperty">
            <summary>
            Gets or sets the value for marker property
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnMarkerPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called whenever the marker propertycahnged
            </summary>
            <param name="d">The shape file layer</param>
            <param name="e">Event argment</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MarkerTemplateProperty">
            <summary>
            Gets or sets the value for marker template property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomTemplateProperty">
            <summary>
             // Using a DependencyProperty as the backing store for CustomTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPointTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPoints.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SubShapeFileLayersProperty">
            <summary>
             // Using a DependencyProperty as the backing store for SubShapeFileLayers.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointDataProperty">
            <summary>
            // Using a DependencyProperty as the backing store for PointData.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointMarginProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPointMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemsVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapItemsVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSourceTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomDataSourceTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.AnnotationTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SymbolTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeSettingsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeSettings.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.BubbleMarkerSettingProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BubbleMarkerSetting.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.BubblesProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Bubbles.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Legend.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendStartLabelProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Legend.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendEndLabelProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Legend.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendPositionXProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendPositionX.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendPositionYProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendPositionY.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendPositionProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendMarginProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendIconProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendModeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendMode.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendTypeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendHeaderProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendWidthProperty">
            <summary>
             // Using a DependencyProperty as the backing store for LegendWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.DefaultLegendVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for DefaultLegendVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.InteractiveLegendVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for InteractiveLegendVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendColumnSplitProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LegendIcon.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LabelOrientationProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelOrientation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ActualTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ActualTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeIDTableFieldProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeIDTableField.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ItemsSourceProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ItemsSource.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ItemsTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ItemsTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemSettingProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapItemSetting.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapItems.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CrossCursorVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CrossCursorVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CrossCursorStrokeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CrossCursorStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CrossCursorStrokeThicknessProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CrossCursorStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSymbolsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomDataSymbols.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LayerHeightProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LayerWidthProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.BoundingBoxProperty">
            <summary>
            // Using a DependencyProperty as the backing store for BoundingBox.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPopupVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPopupVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPopupObjectProperty">
            <summary>
            // Using a DependencyProperty as the backing store for PopupObject.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PopupCustomTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for PopupCustomTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPopupTemplateProperty">
            <summary>
            // Using a DependencyProperty as the backing store for PopupTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.AnnotationsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomSymbols.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.VisibleShapesProperty">
            <summary>
            // Using a DependencyProperty as the backing store for VisibleShapes.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.EnableSelectionProperty">
            <summary>
            // Using a DependencyProperty as the backing store for EnableSelection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.EnableMultiSelectionProperty">
            <summary>
            // Using a DependencyProperty as the backing store for EnableMultiSelection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.TranslateZoomLevelProperty">
            <summary>
            // Using a DependencyProperty as the backing store for TranslateZoomFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectionRectStrokeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SelectionRectStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectionRectStrokeThicknessProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SelectionRectStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectedMapShapesProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SelectedMapShapes.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeIDPathProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeIDPath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSourceProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomDataSource.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapShapesProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapShapes.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeDataPathProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeDataPath.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeDataProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ShapeDatasItem Source Collection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LabelPathProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LabelPath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.UriProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Uri.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LoadKmlStream(System.IO.Stream)">
            <summary>
            Loads shapes from Kml stream.
            </summary>
            <param name="kmlStream"></param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointHorizontalAlignmentProperty">
            <summary>
            The dependency property of <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointHorizontalAlignment"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnHorizontalMapPointAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the horizontal map point alignment is changed
            </summary>
            <param name="d"> The dependency property</param>
            <param name="e">The event argument</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointVerticalAlignmentProperty">
            <summary>
            The depedency property of <see cref="!:VerticalMapPointAlignment"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnVerticalMapPointAlignemntChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the vertical map point alignment is changed
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The eent arguments</param>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointColorProperty">
            <summary>
            The dependency property of <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointColor"/> property
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.HideIntersectLabelsProperty">
            <summary>
            Using a DependencyProperty as the backing store for HideIntersectLabels.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LayoutTypeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for LayoutType.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.IsTileMapProperty">
            <summary>
            // Using a DependencyProperty as the backing store for IsTileMap.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointsProperty">
            <summary>
            The DependencyProperty for <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Points"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnShapePointsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Gets or sets the collection of points. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeTypeProperty">
            <summary>
            The DependencyProperty for <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeType"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnShapeTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Gets or sets the type of points.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShowDistanceScaleProperty">
            <summary>
            // Using a DependencyProperty as the backing store for IsDistanceScaleEnabled.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.DistanceProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Distance.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPopupMarginProperty">
            <summary>
            // Using a DependencyProperty as the backing store for MapPopupMargin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PopupVisibilityProperty">
            <summary>
            // Using a DependencyProperty as the backing store for PopupVisibility.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer">ShapeFileLayer</see> class. 
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ApplyThemeShapeColors">
            <summary>
            To check and apply theme colors for shape.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ApplyShapeFill">
            <summary>
            Check and change the shape fill color in ShapeSettings.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ApplyShapeStroke">
            <summary>
            Check and change the shape stroke color in ShapeSettings.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnShapePointsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            To refresh the maps when adding or removing or reset the Points.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectShape(Syncfusion.UI.Xaml.Maps.MapShape)">
            <summary>
            SelectShape method to select any map shape dynamically
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.UpdateIconColor(Syncfusion.UI.Xaml.Maps.MapShape)">
            <summary>
            Update the luminance color for icon 
            </summary>
            <param name="mapShape">Map shape</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route
            that is derived from this class. Implement this method to add class handling for this event. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.UpdateMarkerSelected(System.Windows.Input.MouseEventArgs)">
            <summary>
            Update the marker selection for shapefile layer marker.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.UpdateTooltip(System.Windows.Input.MouseEventArgs)">
            <summary>
            Updates the tooltip for shape file layer.
            </summary>
            <param name="e">Mouse event arguments.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendRefresh">
            <summary>
            This method used to refresh the Legends
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetColorMapping(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping)">
            <summary>
            This method is used to set Icon and ColorMapping for Bubble
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ColorMapping(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping)">
            <summary>
            This method is used to set colormapping
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetSubLayerColorMapping(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping,Syncfusion.UI.Xaml.Maps.SubShapeFileLayer)">
            <summary>
            This method is used to set sublayer colormapping and icon
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
            <param name="sublayer"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetLegendIcon(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping)">
            <summary>
            This method is used to set LegendIcon
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetEllipseIcon(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping)">
            <summary>
            This method is used to draw ellipse
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetRectangleIcon(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping)">
            <summary>
            This method is used to draw rectangle
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetSubLayerLegendIcon(Syncfusion.UI.Xaml.Maps.Legend,Syncfusion.UI.Xaml.Maps.ColorMapping,Syncfusion.UI.Xaml.Maps.SubShapeFileLayer)">
            <summary>
            This method is used to set Sublayer LegendIcon
            </summary>
            <param name="legend"></param>
            <param name="colorMapping"></param>
            <param name="subShapeFileLayer"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetSubLayerLegend(Syncfusion.UI.Xaml.Maps.SubShapeFileLayer)">
            <summary>
            This method is used to generate sublayer legends
            </summary>
            <param name="sublayer"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetLegendPosition">
            <summary>
            This method is used to set LegendPosition
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetMarkerSettings(Syncfusion.UI.Xaml.Maps.MapLayer,Syncfusion.UI.Xaml.Maps.CustomDataSymbol)">
            <summary>
            To bind the marker settings property to custom data symbol's property
            </summary>
            <param name="markerSettings">The marker settings</param>
            <param name="symbol">The custom data symbol</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetSymbolMidPoint(Syncfusion.UI.Xaml.Maps.CustomDataSymbol)">
            <summary>
            To calculate and set the mid point for the custom data symbol
            </summary>
            <param name="symbol">The custom data symbol</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SmartLabel(Syncfusion.UI.Xaml.Maps.MapItem)">
            <summary>
            Implement the SmartLabel for map item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemIntersectItem(Syncfusion.UI.Xaml.Maps.MapItem)">
            <summary>
            Implement the map item intersect action
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.DoesIntersect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Return the map item intersects or not
            </summary>
            <param name="rect1"></param>
            <param name="rect2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.TrimmedLabel(Syncfusion.UI.Xaml.Maps.MapItem,System.Double)">
            <summary>
            Implementation of trim the item text
            </summary>
            <param name="item"></param>
            <param name="shapeWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CreatePathGeometryFromShapePoints">
            <summary>
            To create a Map shape from the Points collection.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.RenderRecords(Syncfusion.UI.Xaml.Maps.ShapeFileReader)">
            <summary>
            This method is used to render the records of shape file reader
            </summary>
            <param name="shapeFileReader">The shape file reader</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetDataForMapPoints(System.Collections.ObjectModel.ObservableCollection{Syncfusion.UI.Xaml.Maps.MapPoint})">
            <summary>
            This method is used to set the map point 
            </summary>
            <param name="MapPoints"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.AddMapPoint(Syncfusion.UI.Xaml.Maps.ShapeFileRecord,System.Int32)">
            <summary>
            This method is to create and add the map point
            </summary>
            <param name="record">The shape file record</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetDataForMapShape(Syncfusion.UI.Xaml.Maps.MapShape)">
            <summary>
            This method is to set the path data for map shape 
            </summary>
            <param name="shape">The map shape</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetDataForMapShapePoints(Syncfusion.UI.Xaml.Maps.MapShape)">
            <summary>
            This method is to set the path data for map shape points
            </summary>
            <param name="mapShape">The map shape</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CreateMapShapes(Syncfusion.UI.Xaml.Maps.ShapeFileReader)">
            <summary>
            This method is used to create the new map shapes
            </summary>
            <param name="shapeFileReader">The shape file reader</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CalculateBoundingBox">
            <summary>
            To calculate the BoundaryBox value from the Points collection.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.AlignMapPoint(Syncfusion.UI.Xaml.Maps.MapPoint)">
            <summary>
            This method is used to align the map point
            </summary>
            <param name="point">The point</param>
            <param name="mapPoint">The map point</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LatLongToPixelXY(System.Double,System.Double,System.Windows.Point@)">
            <summary>
            Converts latitude and longitude to X and Y values.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="point"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.FindShapeBounds(System.Double,System.Double,Syncfusion.UI.Xaml.Maps.MaxMin,Syncfusion.UI.Xaml.Maps.ShapeFileRecord)">
            <summary>
            To find the Shape bounds.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="maxMin"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.GetLuminanceColor(System.Windows.Media.Brush)">
            <summary>
            Method used to get the luminance color from RGB.
            </summary>
            <param name="interior">The Brush</param>
            <returns>The luminance brush.</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetRangeColor(System.Collections.ObjectModel.ObservableCollection{Syncfusion.UI.Xaml.Maps.ColorMapping},System.Object,System.Windows.Media.Color)">
            <summary>
            Set direct color to shapes from range color mapping.
            </summary>
            <param name="rangeCollection"></param>
            <param name="value"></param>
            <param name="defaultColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.DouglasPeuckerReduction(System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            Uses the Douglas Peucker algorithim to reduce the number of points.
            </summary>
            <param name="Points">The points.</param>
            <param name="Tolerance">The tolerance.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.DouglasPeuckerReduction(System.Collections.Generic.List{System.Windows.Point},System.Int32,System.Int32,System.Double,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Douglases the peucker reduction.
            </summary>
            <param name="points">The points.</param>
            <param name="firstPoint">The first point.</param>
            <param name="lastPoint">The last point.</param>
            <param name="tolerance">The tolerance.</param>
            <param name="pointIndexsToKeep">The point indexs to keep.</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PerpendicularDistance(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            The distance of a point from a line made from point1 and point2.
            </summary>
            <param name="Point1">The PT1.</param>
            <param name="Point2">The PT2.</param>
            <param name="Point">The p.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointToLatitudeLongitude(System.Windows.Point)">
            <summary>
            Converts the given point to Latitude and Longitude value.
            </summary>
            <param name="canvasPosition">Points to be converted.</param>
            <returns>Latitude and Longitude Values.</returns>
            <remarks>
            The function will converts the given point coordinates to latitude and longitude values.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace MapApp
            {
              
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        double x = 200;
                        double y = 348;
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        Point result = layer.PointToLatitudeLongitude(new Point(x,y));
                        syncMap.Layers.Add(layer);                  
                    }   
                    
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LatitudeLongitudeToPoint(System.Windows.Point)">
            <summary>
            Converts the given Latitude and Longitude value to screen point.
            </summary>
            <param name="latLonPt">Latitude and Longitude value to be converterd.</param>
            <returns>Screen Points</returns>
            <remarks>
            The function will converts the given latitude and longitude values to point value. Latitude and Longitude need to be given as points.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace MapApp
            {
              
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        double latitude = 54;
                        double longitude = 34;
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        Point result = layer.LatitudeLongitudeToPoint(new Point(longitude,latitude));
                        syncMap.Layers.Add(layer);                  
                    }   
                    
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.GetPointFromLatitudeLongitude(System.Windows.Point)">
            <summary>
            Convert latitude and longitude to point
            </summary>
            <param name="latitudeLongitude">To get latitude and longitude</param>
            <returns>returns the pixel points</returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.GetLatitudeLongitudeFromPoint(System.Windows.Point)">
            <summary>
            Convert point to longitude and latitude
            </summary>
            <param name="pointXY">To get screen point values.</param>
            <returns>returns the longitude and latitude values</returns>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.isUriChanged">
            <summary>
            Gets or sets the value indicating whether the size is changed
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Reset">
            <summary>
            Clears all elements from the ShapeFileLayer.
            </summary>
            <remarks>
            This Reset function will clear all the elements from the ShapeFileLayer.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
                    
            namespace MapApp
            {    
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        layer.Reset();
                        syncMap.Layers.Add(layer);            
                    }   
                    
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Refresh">
            <summary>
            Clears and re-arranges all the elements in the ShapeFileLayer.
            </summary>
            <remarks>
            The Refresh function will clears all the elements in ShapeFileLayer. And re-creates and arranges them on the map.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
                    
            namespace MapApp
            {    
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        layer.Refresh();
                        syncMap.Layers.Add(layer);            
                    }   
                    
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SetMapItemsColor">
            <summary>
            Sets color for each map items
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CalculateMarkerPosition(Syncfusion.UI.Xaml.Maps.CustomDataSymbol,System.Windows.Point)">
            <summary>
            To Calculate Marker Position
            </summary>
            <param name="symbol">Custom data symbol</param>
            <param name="markerPosition">Marker position</param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads shapes from stream
            </summary>
            <param name="shpstream"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LoadFromStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Loads shapes and dbf as stream
            </summary>
            <param name="shpstream"></param>
            <param name="dbfstream"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.IntersectItems">
            <summary>
            To collects the intersect items.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemsValueCollection">
            <summary>
            To collects the MapItemvalue.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CurrentColorPalette">
            <summary>
            Gets  the collection of brushes that are applied on the shapes.
            </summary>
            <remarks>CurrentColorPalette is the read only property to get the brushes that are currently applied on the shape.</remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeReader">
            <summary>
            ShapeReader
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointPopupTemplate">
            <summary>
            Gets or Sets MapPointPopupTemplate
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointIcon">
            <summary>
            Gets or Sets MapPointIcon to the MapPoints.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointIconSize">
            <summary>
            Gets or sets the value for map point icon size
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeFill">
            <summary>
            Gets or sets the shape fill which is used to customize the default shape fill color from custom themes.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeStroke">
            <summary>
            Gets or sets the shape stroke which is used to customize the default shape fill color from custom themes.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Markers">
            <summary>
            Gets or Sets the Markers for ShapeFileLayer.
            </summary>
            <remarks>
            Use this property to bound the object to a point in the map based on Latitude and Longitude.
            </remarks>
            <value>
            Type : <see cref="T:System.Collections.IEnumerable"/>
            </value>
            <example>
            <code language="C#">
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MarkerTemplate">
            <summary>
            Gets or sets the Template for the Items in the Marker.
            </summary>
            <remarks>
            Use this property to define the template for the Items which are defines in the Marker.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointTemplate">
            <summary>
            Gets or Sets MapPointTemplate for Shapefilelayer
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPoints">
            <summary>
            Gets or Sets MapPoints
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SubShapeFileLayers">
            <summary>
            Defines the collection of SubShapeFileLayers
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointData">
            <summary>
            Gets or Sets PointData
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointMargin">
            <summary>
            Gets or Sets MapPointMargin
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemsVisibility">
             <summary>
             Gets or sets  the Visibility for the MapItems.
             </summary>
             <remarks>
             MapItems are shown the property value of under bound objects of the Shape. This
             property sets the Visibility of MapItems.
             </remarks>
             <value>
             Type <see cref="T:System.Windows.Visibility"/>
             </value>
             <example>       
             <code language="C#">
                 using Syncfusion.UI.Xaml.Maps;
                 using System;
                 using System.Collections.Generic;
                 using System.IO;
                 using System.Linq;
                 using Windows.Foundation;
                 using Windows.Foundation.Collections;
                 using Windows.UI;
                 using Windows.UI.Xaml;
                 using Windows.UI.Xaml.Controls;
                 using Windows.UI.Xaml.Controls.Primitives;
                 using Windows.UI.Xaml.Data;
                 using Windows.UI.Xaml.Input;
                 using Windows.UI.Xaml.Media;
                 using Windows.UI.Xaml.Navigation;
                 
                 namespace MapApp
                 {               
                     public sealed partial class MainPage : Page
                     {
                         public MainPage()
                         {
                             this.InitializeComponent();
                             SfMap syncMap = new SfMap();
                             syncMap.EnablePan = true;
                             ShapeFileLayer layer = new ShapeFileLayer();
                             layer.Uri = "MapAPP.world.shp";
                             layer.MapItemsVisibility = Visibility.Visible;
                             syncMap.Layers.Add(layer);                    
                         }               
                     }
                 }
            
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSourceTemplate">
            <summary>
            Gets or sets the Template for the Items in the CustomDataSource.
            </summary>
            <remarks>
            Use this property to define the template for the Items which are defines in the CustomDataSource.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.AnnotationTemplate">
            <summary>
            Gets or sets the Template for the MapAnnotations.
            </summary>
            <remarks>
            Use the AnnotationTemplate property to re-define its Template. This will override the default Template of the MapAnnotations.  
            </remarks>       
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeSettings">
            <summary>
            Gets or sets the values for a shape's appearance in the SfMap.
            </summary>
            <remarks>
            Use this property to define the Stroke, Fill, StrokeThickness and the Under
            bound value of a shape.
            </remarks>
            <value>
            Type : <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeSetting"/>
            </value>
            <example>
            <code language="C#">
               using Syncfusion.UI.Xaml.Maps;
               using System;
               using System.Collections.Generic;
               using System.IO;
               using System.Linq;
               using Windows.Foundation;
               using Windows.Foundation.Collections;
               using Windows.UI;
               using Windows.UI.Xaml;
               using Windows.UI.Xaml.Controls;
               using Windows.UI.Xaml.Controls.Primitives;
               using Windows.UI.Xaml.Data;
               using Windows.UI.Xaml.Input;
               using Windows.UI.Xaml.Media;
               using Windows.UI.Xaml.Navigation;
                       
               
               namespace MapApp
               {
                  
                   public sealed partial class MainPage : Page
                   {
                       public MainPage()
                       {
                           this.InitializeComponent();
                           SfMap syncMap = new SfMap();
                           syncMap.EnablePan = true;
                           ShapeFileLayer layer = new ShapeFileLayer();
                           ShapeSetting shapeSettings = new ShapeSetting();
                           shapeSettings.ShapeFill = new SolidColorBrush(Colors.Red);
                           shapeSettings.ShapeStroke = new SolidColorBrush(Colors.Black);
                           shapeSettings.ShapeStrokeThickness = 1d;
                           layer.ShapeSettings = shapeSettings;
                           layer.Uri = "MapApp.world.shp";
                           syncMap.Layers.Add(layer);
                       }       
                   }
               }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.BubbleMarkerSetting">
            <summary>
            Gets or sets bubbles settings for the SfMap.
            </summary>
            <remarks>
            Use this property to set the maximum size,minimum size, fill, stroke and color mappings for the bubbles.
            </remarks>
            <value>
            Type : <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.BubbleMarkerSetting"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            namespace MapApp
            {
                
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        syncMap.EnablePan = true;
                        ShapeFileLayer layer = new ShapeFileLayer();
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.Fill = new SolidColorBrush(Colors.Blue);
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Red);
                        bubbleSetting.MaxSize = 50;
                        bubbleSetting.MinSize = 10;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        layer.Uri = "MapApp.world1.shp";
                        layer.MapItemsVisibility = Visibility.Visible;
                        syncMap.Layers.Add(layer);
                        this.mainGrid.Children.Add(syncMap);
                    }       
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Bubbles">
            <summary>
            Gets the bubbles of the ShapeFileLayer.
            </summary>
            <remarks>
            This is read only property to read the bubbles of the ShapeFileLayer.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Legends">
            <summary>
            Defines Legends collection
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendStartLabel">
            <summary>
            Gets or Sets LegendStartLabel
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendEndLabel">
            <summary>
            Gets or Sets LegendEndLabel
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendVisibility">
            <summary>
            Gets or Sets LegendVisibility
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendPositionX">
            <summary>
            Gets or Sets LegendPositionX
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendPositionY">
            <summary>
            Gets or Sets LegendPositionY
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendPosition">
            <summary>
            Gets or Sets LegendPosition 
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendMargin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendTemplate">
            <summary>
            Gets or Sets LegendTemplate
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendIcon">
            <summary>
            Gets or Sets LegendIcon
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendMode">
            <summary>
            Gets or Sets LegendMode
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendLabelMargin">
            <summary>
            Gets or sets LegendLabelMargin
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendType">
            <summary>
            Gets or Sets LegendType
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendHeader">
            <summary>
            Gets or Sets LegendHeader
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LegendColumnSplit">
            <summary>
            Gets or Sets LegendColumnSplit
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LabelOrientation">
            <summary>
            Gets or Sets LegendOrientation
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ActualTemplate">
            <summary>
            Gets the actual template applied on the MapItems.
            </summary>
            <remarks>
            This is read only property to read the Template of the MapItems.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeIDTableField">
            <summary>
            Gets or sets dbf table field name to identify or map the value with shapes in the SfMap.
            </summary>
            <remarks>
            Use this property to set the Field name of the dbf file's table to map with items values. The associate dbf file must contain the field with this Property value.         
            </remarks>
            <value>
            Type : <see cref="T:System.String"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            namespace MapApp
            {
                
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.ShapeIDTableField = "Country";
                        layer.Uri = "App2.world1.shp";
                        syncMap.Layers.Add(layer);
                        this.mainGrid.Children.Add(syncMap);
                    }       
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ItemsSource">
             <summary>
             Gets or sets the ItemsSource for the ShapeFileLayer.
             </summary>
             <remarks>
             Use this property to set the ItemsSource for the ShapeFileLayer. ItemsSource items will be bounded to the map shapes.        
             </remarks>
             <value>
             Type : <see cref="T:System.Object"/>
             </value>
             <example>
             <code language="C#">
             using Syncfusion.UI.Xaml.Maps;
             using System;
             using System.Collections.Generic;
             using System.IO;
             using System.Linq;
             using Windows.Foundation;
             using Windows.Foundation.Collections;
             using Windows.UI;
             using Windows.UI.Xaml;
             using Windows.UI.Xaml.Controls;
             using Windows.UI.Xaml.Controls.Primitives;
             using Windows.UI.Xaml.Data;
             using Windows.UI.Xaml.Input;
             using Windows.UI.Xaml.Media;
             using Windows.UI.Xaml.Navigation;
            
             namespace MapApp
             {
                
                 public sealed partial class MainPage : Page
                 {
                     public MainPage()
                     {
                         this.InitializeComponent();
                         SfMap syncMap = new SfMap();
                         syncMap.EnablePan = true;
                         ShapeFileLayer layer = new ShapeFileLayer();
                         layer.Uri = "MapApp.world1.shp";
                         ViewModel viewModel = new ViewModel();
                         layer.ItemsSource = viewModel.Models;
                         syncMap.Layers.Add(layer);
                         this.mainGrid.Children.Add(syncMap);
                     }
                 }
                 public class Weather
                 { 
                     public int CurrentTemperature { get; set; }
                     public int AverageHighTemperature { get; set; }
                     public int AverageLowTemperature { get; set; }
                     public string Country { get; set; }
                     public string Continent { get; set; }
                     public string City { get; set; }
                     public string WeatherDescription { get; set; }
                     public int Humidity { get; set; }
                     public string Longitude { get; set; }
                     public string Latitude { get; set; }
             
                     public static List<![CDATA[Weather]]> GetWeatherData()
                     {
                         List<![CDATA[Weather]]> weatherCollection = new List<![CDATA[Weather]]>();
                         weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                         weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                         weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                         weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                         weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                         weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                         weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                         weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                         weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                         weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                         return weatherCollection;
                     }
                 }
                 public class ViewModel
                 {
                     public Listt<![CDATA[Weather]]>  Models
                     {
                         get;
                         set;
                     }
             
                     public ViewModel()
                     {
             
                         this.Models = new Listt<![CDATA[Weather]]>();
                         this.Models = Weather.GetWeatherData();
             
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ItemsTemplate">
            <summary>
            Gets or Sets the Template for the MapItems.
            </summary>
            <remarks>
            Use this property to define the Template for the MapItems, which are generated from the ItemsSource.
            </remarks>
            <value>
            Type <see cref="T:System.Windows.DataTemplate"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemSetting">
            <summary>
            Gets or Sets the appearance settings when Default Template applied on the MapItems.
            </summary>
            <remarks>
            Default template for the MapItems will show the under bound value of the Shape in a TextBlock.
            To set the appearance like Background,FontStyle and FontFamily, this property will be used.
            </remarks>
            <value>
            Type :<see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItemSetting"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        MapItemSetting mapItemSetting = new MapItemSetting();
                        mapItemSetting.MapItemFontFamily = new Windows.UI.Xaml.Media.FontFamily("Times New Roman");
                        mapItemSetting.MapItemFontSize = 10d;
                        mapItemSetting.MapItemForeground = new SolidColorBrush(Colors.OldLace);
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapItemSetting = mapItemSetting;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapItems">
            <summary>
            Get the MapItems of the ShapeFileLayer.
            </summary>
            <remarks>
            This is read only property to get the MapItems elements.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CrossCursorVisibility">
            <summary>
            Gets visibility of the CrossCursor shown when Selecting Multiple Shapes in the SfMap.
            </summary>
            <remarks>
            This is the read only property to get the visibility of the CrossCursor, shown on MultiSelection of the SfMap.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CrossCursorStroke">
            <summary>
            Gets or sets the Stroke of the CrossCusrsor.
            </summary>
            <remarks>
            Use this property to set the Cross cursor's color.
            </remarks>
            <value>
            Type : <see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.EnableMultiSelection = true;
                        layer.CrossCursorStroke = new SolidColorBrush(Colors.OliveDrab);
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CrossCursorStrokeThickness">
            <summary>
            Gets or Sets the thickness of the CrossCursor.
            </summary>
            <remarks>
            Use this property to set the thickness of the CrossCursor.
            </remarks>
            <value>
            Type : <see cref="T:System.Double"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();           
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.EnableMultiSelection = true;
                        layer.CrossCursorStroke = new SolidColorBrush(Colors.OliveDrab);
                        layer.CrossCursorStrokeThickness = 1d;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);          
            
                    }
            
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSymbols">
            <summary>
            Gets the CustomDataSymbols of the ShapeFileLayer.
            </summary>
            <remarks>
            CustomDataSymbols are generated when <see cref="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSource"/> is set. This property is used to get that data symbols.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LayerHeight">
            <summary>
            Gets the Height of the Current Layer in the SfMap.
            </summary>
            <remarks>
            This is read only property to get the height of the Layer.
            </remarks>
            <value>
            Type : <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LayerWidth">
            <summary>
            Gets the Width of the Current Layer in the SfMap.
            </summary>
            <remarks>
            This is read only property to get the width of the Layer.
            </remarks>
            <value>
            Type : <see cref="T:System.Double"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.BoundingBox">
            <summary>
            Gets or Sets BoundingBox values
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPopupVisibility">
            <summary>
            Gets or Sets the Visibility of the MapPopup.
            </summary>
            <remarks>
            Use this property to set the Visibility of the MapPopup.
            </remarks>
            <value>
            Type : <see cref="T:System.Windows.Visibility"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.MapPopupVisibility = Visibility.Visible;
                        layer.Uri = "MapApp.world1.shp";
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPopupObject">
            <summary>
            Gets the Binded object of the MapPopup
            </summary>
            <remarks>
            This is read only property to get the Bounded object of the MapPopup.
            </remarks>
            <value>
            Type :<see cref="T:System.Object"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PopupCustomTemplate">
            <summary>
            Gets or sets the Custom Template for the MapPopup.
            </summary>
            <remarks>
            Use this property to set the CustomTemplate for the MapPopup.
            </remarks>        
            <value>
            Type :<see cref="T:System.Windows.DataTemplate"/>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Annotations">
            <summary>
            Gets or sets the Annotations for the ShapFileLayer.
            </summary>
            <remarks>
            Use this property to add the Annotations for the ShapeFileLayer.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        MapAnnotations annotation = new MapAnnotations();
                        annotation.AnnotationSymbol = new Ellipse { Height=20,Width=20, Fill=new SolidColorBrush(Colors.PaleTurquoise)};
                        layer.Annotations.Add(annotation);
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);
                    }
            
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.VisibleShapes">
            <summary>
            Gets the visible shapes of the ShapeFileLayer.
            </summary>
            <remarks>
            This is read only property to get the shapes which are visible on the map.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.EnableSelection">
            <summary>
            Enables or Disables the shapes to be selected.
            </summary>
            <remarks>
            Use this property to enable or disable the shape selection in the map.If value is True then MapShapes can be selected.
            Otherwise cannot.
            </remarks>
            <value>
            Type : <see cref="T:System.Boolean"/>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.EnableSelection = true;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);
                    }
            
                }
            }
            
            </code>
            </example>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.EnableMultiSelection">
            <summary>
            Enables or Disables the multiple shapes can be selected.
            </summary>
            <remarks>
            Use this property to enable or disable the multi shape selection in the map.If value is True then MapShapes can be selected.
            Otherwise cannot.
            </remarks>
            <value>
            Type : <see cref="T:System.Boolean"/>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.EnableMultiSelection = true;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);
                    }
            
                }
            }
            
            </code>
            </example>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.TranslateZoomLevel">
            <summary>
            Gets or Sets TranslateZoomLevel
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectionRectStroke">
            <summary>
            Gets or Sets the Stroke Color of the Selection rectangle.
            </summary>
            <remarks>
            Use this property to set the Stroke color of the Selection rect.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.EnableMultiSelection = true;
                        layer.SelectionRectStroke = new SolidColorBrush(Colors.PeachPuff);
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);
                    }
            
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectionRectStrokeThickness">
            <summary>
            Gets or Sets the thickness of the Selection rectangle.
            </summary>
            <remarks>
            Use this property to set the thickness of the Selection rectangel.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.EnableMultiSelection = true;
                        layer.SelectionRectStrokeThickness = 2d;
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);
                    }
            
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.SelectedMapShapes">
            <summary>
            Gets the Selected shapes of the ShapeFileLayer
            </summary>
            <remarks>
            This is read only property to get the selected shapes in the ShapeFileLayer.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeIDPath">
            <summary>
            Gets or set the Identification property name of the Shape.
            </summary>
            <remarks>
            Use this property to set the Property name from the ItemsSource's Item to identify the corresponding under bound shape.
            </remarks>
            <value>
            Type :<see cref="T:System.String"/>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            using Windows.UI.Xaml.Shapes;
            
            
            namespace MapApp
            {
            
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.ShapeIDPath="Country"
                        layer.Uri = "MapApp.world.shp";
                        syncMap.Layers.Add(layer);
                    }
            
                }
            }
            
            </code>
            </example>
            </value>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.CustomDataSource">
            <summary>
            Gets or Sets the CustomDataSource for ShapeFileLayer.
            </summary>
            <remarks>
            Use this property to bound the object to a point in the map based on Latitude and Longitude.
            </remarks>
            <value>
            Type : <see cref="T:System.Collections.IEnumerable"/>
            </value>
            <example>
            <code language="C#">
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapShapes">
            <summary>
            Gets the  MapShapes of the ShapeFileLayer.       
            </summary>
            <remarks>
            This is the read only property to get the MapShapes of the ShapeFileLayer.
            </remarks>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeDataPath">
            <summary>
            Gets or Sets ShapeDataPath
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeData">
            <summary>
            Gets or Sets ShapeData values.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LabelPath">
            <summary>
            Gets ot Sets LabelPath for Shapefilelayer
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Uri">
            <summary>
            Gets or sets the embedded location of the Shape File.
            </summary>
            <remarks>
            Use this property to set the embedded resource location of the shape file.
            </remarks>
            <value>
            Type :<see cref="T:System.String"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            
            namespace MapApp
            {
               
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";           
                        syncMap.Layers.Add(layer);            
                    }       
                }
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointHorizontalAlignment">
            <summary>
            Gets or sets the value for horizontal map point alignment
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.MapPointVerticalAlignment">
            <summary>
            Get or sets the value for vertical map point alignment
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.PointColor">
            <summary>
            Gets or sets the value for point color
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ToolTipSettings">
            <summary>
            Gets or sets the tooltip settings for the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.HideIntersectLabels">
            <summary>
            Gets or sets a value indicating whether the intersected labels should be hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.LayoutType">
            <summary>
            Gets or Sets LayoutType to the ShapeFileLayer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.IsTileMap">
            <summary>
            Gets or sets a value indicating whether the control is Tiled.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Points">
            <summary>
            Gets or sets the collection of points. It is used to draw multi line over the map by using the points.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapeType">
            <summary>
            Gets or sets the type of Points. It is used to define the type of points in the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShowDistanceScale">
            <summary>
            Gets or sets a value indicating whether the DistanceScale is shown.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.Distance">
            <summary>
            Gets or Sets the Distance value on a Map.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapesSelected">
            <summary>
            Occurs when Shapes in the Shape file layer is  Selected. 
            </summary>
            <remarks>
            This event will triggered when a shape or shapes are selected in the ShapeFileLayer. The argument contains the List of selected shapes.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        layer.ShapesSelected += layer_ShapesSelected;
                        syncMap.Layers.Add(layer);
                        
                    }
            
                    void layer_ShapesSelected(object sender, SelectionEventArgs args)
                    {
                         var selectedItems = args.Items; 
                    }   
                    
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.ShapeFileLayer.ShapesUnSelected">
            <summary>
            Occurs when Shapes in the Shape file layer is Un Selected. 
            </summary>
            <remarks>
            This event will triggered when a shape or shapes are unselected  in the ShapeFileLayer. The argument contains the List of unselected shapes.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();           
                        SfMap syncMap = new SfMap();        
                        ShapeFileLayer layer = new ShapeFileLayer();          
                        layer.Uri = "MapApp.world1.shp";
                        layer.ShapesUnSelected += layer_ShapesUnSelected;
                        syncMap.Layers.Add(layer);
                        
                    }
            
                    void layer_ShapesUnSelected(object sender, SelectionEventArgs args)
                    {
                        var selectedItems = args.Items;
                    }        
                    
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapColorPalette">
            <summary>
            Represents the MapColorPalette class in the map control.Inherites from dependency object.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.MapColorPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.MapColorPalette">MapColorPalette</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MapColorPalette.FillBrushProperty">
            <summary>
            // Using a DependencyProperty as the backing store for FillBrush.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.MapColorPalette.FillBrush">
            <summary>
            Gets or sets Fill brush for the MapColorPalette..
            </summary>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <remarks>
            Use this property to set the collection brush to be applied on the shapes while setting color palette for it.
            </remarks>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MarkerIcon">
            <summary>
            Represents the map marker icon
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerIcon.Circle">
            <summary>
            Represents the map marker icon as cicle
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerIcon.Square">
            <summary>
            Represents the map marker icon as square
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerIcon.Rectangle">
            <summary>
            Represents the map marker icon as rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerIcon.Diamond">
            <summary>
            Represents the map marker icon as diamond
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerIcon.Image">
            <summary>
            Represents the map marker icon as image
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MarkerSelectionMode">
            <summary>
            Represent the MarkerSelectionMode
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerSelectionMode.Multiple">
            <summary>
            To represent multiple selection
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerSelectionMode.Single">
            <summary>
            To represent single selection
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MarkerAlignment">
            <summary>
             Represents the Marker Alignment
             </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerAlignment.Near">
            <summary>
            Near position
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerAlignment.Center">
            <summary>
            Center position
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.MarkerAlignment.Far">
            <summary>
            Far position
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFilePanel">
            <summary>
            Represents the ShapeFilePanel class in the SfMap. Inherites from the Panel class.
            </summary>
            <remarks>
            Measures and arranges the map shapes in the shape file layer.
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFilePanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFilePanel">ShapeFilePanel</see> class. 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileReader">
            <summary>
            Class ShapeFileReader
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileReader.#ctor">
            <summary>
            Constrctor
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileReader.#ctor(System.String)">
            <summary>
            ShapeFileReader 
            </summary>
            <param name="shapefilename"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileReader.ReadShapeFile">
            <summary>
             Reads the data from ReadShapeFile
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileReader.ReadFromStream(System.IO.Stream)">
            <summary>
             Reads data from stream
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileReader.ReadHeader(System.IO.Stream)">
            <summary>
            Reads and parses the header of the .shp index file
            </summary>
            <remarks>        
            
            Byte
            Position    Field           Value       Type    Order
            -----------------------------------------------------
            Byte 0      File Code       9994        Integer Big
            Byte 4      Unused          0           Integer Big
            Byte 8      Unused          0           Integer Big
            Byte 12     Unused          0           Integer Big
            Byte 16     Unused          0           Integer Big
            Byte 20     Unused          0           Integer Big
            Byte 24     File Length     File Length Integer Big
            Byte 28     Version         1000        Integer Little
            Byte 32     Shape Type      Shape Type  Integer Little
            Byte 36     Bounding Box    Xmin        Double  Little
            Byte 44     Bounding Box    Ymin        Double  Little
            Byte 52     Bounding Box    Xmax        Double  Little
            Byte 60     Bounding Box    Ymax        Double  Little
            Byte 68*    Bounding Box    Zmin        Double  Little
            Byte 76*    Bounding Box    Zmax        Double  Little
            Byte 84*    Bounding Box    Mmin        Double  Little
            Byte 92*    Bounding Box    Mmax        Double  Little
            
            * Unused, with value 0.0, if not Measured or Z type
            
            The "Integer" type corresponds to the CLS Int32 type, and "Double" to CLS Double (IEEE 754).
            </remarks>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.ShapeFileReader.ShapeFileDownloaded">
            <summary>
            ProgressChangedEventHandler
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileReader.Records">
            <summary>
            Records stores the list of shapefile values
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileReader.Header">
            <summary>
             Header property determines the header value 
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.BoundingBox">
            <summary>
            BoundingBox
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BoundingBox.MinX">
            <summary>
            Indicates the minimum x-position of the bounding
            box for the shape (expressed in degrees longitude).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BoundingBox.MinY">
            <summary>
            Indicates the minimum y-position of the bounding
            box for the shape (expressed in degrees latitude).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BoundingBox.MaxX">
            <summary>
            Indicates the maximum x-position of the bounding
            box for the shape (expressed in degrees longitude).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.BoundingBox.MaxY">
            <summary>
            Indicates the maximum y-position of the bounding
            box for the shape (expressed in degrees latitude).
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.Helpers.Split``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get the array slice between the two indexes.
            ... Inclusive for start index, exclusive for end index.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFileRecord">
            <summary>
            The ShapeFileRecord class represents the contents of
            a shape record, which is of variable length.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.#ctor">
            <summary>
            Constructor for the ShapeFileRecord class.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.GetPartsCount">
            <summary>
            Indicates the number of parts for this shape.
            A part is a connected set of points, analogous to
            a PathFigure in WPF.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.GetPointsCount">
            <summary>
            Specifies the total number of points defining
            this shape record.
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.ToString">
            <summary>
            Output some of the fields of the shapefile record.
            </summary>
            <returns>A string representation of the record.</returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.RecordIndex">
            <summary>
            Indicates the record number (or index) which starts at 1.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.ContentLength">
            <summary>
            Specifies the length of this shape record in 16-bit words.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.ShapeType">
            <summary>
            Specifies the shape type for this record.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.BoundingBox">
            <summary>
            Gets or Sets BoundingBox value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.Parts">
            <summary>      
            A collection of indices for the points array.
            Each index identifies the starting point of the
            corresponding part (or PathFigure using WPF
            terminology).
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.Points">
            <summary>
            A collection of all of the points defining the
            shape record.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFileRecord.Attributes">
            <summary>
            Access the (dBASE) attribute values associated
            with this shape record.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ColorMapping">
            <summary>
            ColorMapping
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ColorMapping.ColorProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Color.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ColorMapping.Validate(System.Object)">
            <summary>
            Validates the object value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ColorMapping.Color">
            <summary>
            Gets orSets Color for RangeColorMapping
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ColorMapping.ShapeFileLayer">
            <summary>
            Gets or sets a value for shape file layer
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping">
            <summary>
            Represents the RangeColorMapping class in the map.Inherited from the <see cref="T:System.Windows.DependencyObject"/>
            </summary>
            <remarks>
            RangeColorMapping class contains the members to provide the TreeMap like support for Bubbles and MapShapes.
            </remarks>
            <example>
            <para>Refer the following code to know how to define the range color mapping</para>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";           
                        BubbleMarkerSetting bubbleSetting = new BubbleMarkerSetting();
                        bubbleSetting.AutoFillColor = false;
                        bubbleSetting.ColorMappings.Add(new RangeColorMapping { Range=0, Color=Colors.White });
                        bubbleSetting.ColorMappings.Add(new RangeColorMapping { Range = 50, Color = Colors.Thistle });
                        bubbleSetting.ColorMappings.Add(new RangeColorMapping { Range = 100, Color = Colors.Violet });
                        bubbleSetting.ValuePath = "AverageHighTemperature";
                        bubbleSetting.Stroke = new SolidColorBrush(Colors.Black);
                        bubbleSetting.StrokeThickness = 5;
                        bubbleSetting.MaxSize = 500;
                        bubbleSetting.MinSize = 100;
                        layer.BubbleMarkerSetting = bubbleSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }    
            }
            </code>
            </example>    
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.RangeColorMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping">RangeColorMapping</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.RangeColorMapping.RangeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Range.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.RangeColorMapping.FromProperty">
            <summary>
            // Using a DependencyProperty as the backing store for From.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.RangeColorMapping.ToProperty">
            <summary>
            // Using a DependencyProperty as the backing store for To.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.RangeColorMapping.GradientColorsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for GradientColors.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.RangeColorMapping.Validate(System.Object)">
            <summary>
            Validates the object values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.RangeColorMapping.Range">
            <summary>
            Gets or sets the range for the RangeColorMapping.
            </summary>
            <value>
            Type:<see cref="T:System.Double"/>
            </value>
            <remarks>
            Use Range property to set the range in the RangeColorMapping when providing Tree map like support for bubble or map shape.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        RangeColorMapping mapping = new RangeColorMapping();
                        mapping.Range = 50;
                        mapping.Color = Colors.Orange;
            
                    }       
                   
                }
              
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.RangeColorMapping.From">
            <summary>
            Gets or sets the start range for the RangeColorMapping.
            </summary>
            <value>
            Type:<see cref="T:System.Double"/>
            </value>
            <remarks>
            Use From property to set the start range in the RangeColorMapping when providing Tree map like support for bubble or map shape.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        RangeColorMapping mapping = new RangeColorMapping();
                        mapping.From = 50;
                        mapping.Color = Colors.Orange;
            
                    }       
                   
                }
              
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.RangeColorMapping.To">
            <summary>
            Gets or sets the end range for the RangeColorMapping.
            </summary>
            <value>
            Type:<see cref="T:System.Double"/>
            </value>
            <remarks>
            Use To property to set the end range in the RangeColorMapping when providing Tree map like support for bubble or map shape.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        RangeColorMapping mapping = new RangeColorMapping();
                        mapping.To = 50;
                        mapping.Color = Colors.Orange;
            
                    }       
                   
                }
              
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.RangeColorMapping.GradientColors">
            <summary>
            Gets or sets the GradientColors range for the RangeColorMapping.
            </summary>
            <value>
            Type:<see cref="T:System.Double"/>
            </value>
            <remarks>
            Use GradientColors property to set the GradientColors range in the RangeColorMapping when providing Tree map like support for bubble or map shape.
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        RangeColorMapping mapping = new RangeColorMapping();
                        mapping.GradientColors = { Colors.Red, Colors.Blue};
                        mapping.Color = Colors.Orange;
            
                    }       
                   
                }
              
            }
            
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.EqualsColorMapping">
            <summary>
            EqualsColorMapping
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.EqualsColorMapping.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.EqualsColorMapping.ValueProperty">
            <summary>
            // Using a DependencyProperty as the backing store for Range.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.EqualsColorMapping.Validate(System.Object)">
            <summary>
            Validates the object value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.EqualsColorMapping.Value">
            <summary>
            Gets or Sets Value for EqualsColorMapping
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeFillSetting">
            <summary>
            Represents the ShapeFillSetting class in the SfMap.Inherited from <see cref="T:System.Windows.DependencyObject"/>
            </summary>
            <remarks>
            ShapeFillSetting class is used to set fill setting for the shapes in the map.
            </remarks>
            <example>
            <para>Refer the following code to know how to set the ShapeFillSetting,</para>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = false;
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 0, Color = Colors.White });
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 50, Color = Colors.Red });
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 100, Color = Colors.Purple });
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFillSetting">ShapeFillSetting</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.AutoFillColorsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for AutoFillColors.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.EnableDesaturationRangeColorProperty">
            <summary>
            // Using a DependencyProperty as the backing store for EnableDesaturationRangeColor.  This generate different colors to shape from range color mapping based on the color value.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.ColorMappingsProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ColorMappings.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.Dispose">
            <summary>
            Dispose shape fill settings
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.AutoFillColors">
            <summary>
            Gets or sets a value indicating whether fill color of map shapes from "ShapeFill" property or "ShapeSetting".
            </summary>      
            <remarks>
            This property is used to determine fill of the map shape. SfMap shapes fill color will be determined by "ShapeFill" property if "True" or determined by ColorMappings if "False".
            </remarks>
            <value>
            Type :<see cref="T:System.Boolean"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = true;
                        shapeSetting.ShapeFill=new SolidColorBrush(Colors.Yellow);        
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
                       
            
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.EnableDesaturationRangeColor">
            <summary>
            Generates desaturation color from Range ColorMapping From and To value
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeFillSetting.ColorMappings">
            <summary>
            Gets or sets the list of <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping"/> to provide tree map like support for map shapes.
            </summary>
            <remarks>
            This property contain collection of <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping"/> which contains Range and the Corresponding color of the Range. This property is used to provide the Tree map like support for map shapes.
            </remarks>
            <value>
            ObservableCollection of <see cref="T:Syncfusion.UI.Xaml.Maps.RangeColorMapping"/>.
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = false;
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 0, Color = Colors.White });
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 50, Color = Colors.Red });
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 100, Color = Colors.Purple });
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
                    }       
                   
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.ShapeSetting">
            <summary>
            Represents the ShapeSetting of the SfMap. Inherited from the <see cref="T:System.Windows.DependencyObject"/>
            </summary>
            <remarks>
            ShapeSetting class contains the member for Customizing the appearance of the MapShapes and determine the under bound values. It was inherited from the <see cref="T:System.Windows.DependencyObject"/> class.
            </remarks>
            <example>
            <para>Refer the following code to know how to set the ShapeSettings</para>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = true;
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeSetting">ShapeSetting</see> class. 
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.FillSettingProperty">
            <summary>
             // Using a DependencyProperty as the backing store for FillSetting.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.CustomColorsProperty">
            <summary>
            // Using a DependencyProperty as the backing store for CustomColors.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeFillProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeFill.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeStrokeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeStrokeThicknessProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeValuePathProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeValuePath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.SelectedShapeColorProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SelectedShapeColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.SelectedShapeStrokeProperty">
            <summary>
            // Using a DependencyProperty as the backing store for SelectedShapeStroke.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.SelectedShapeStrokeThicknessProperty">
            <summary>
            // Using a DependencyProperty as the backing store for ShapeStrokeThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.ColorPaletteProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ColorPalette.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeColorValuePathProperty">
            <summary>
             // Using a DependencyProperty as the backing store for ShapeValuePath.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ShapeSetting.OnPropertyChanged">
            <summary>
            This method when the property is chnaged
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.FillSetting">
            <summary>
            Gets or sets the settings for filling color of the shapes.
            </summary>
            <remarks>
            FillSetting properties contains the members to provide the tree map like support for the map shapes.
            </remarks>
            <value>
            Type :<see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFillSetting"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";        
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = false;
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 0, Color = Colors.White });
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 50, Color = Colors.Red });
                        shapeFillSetting.ColorMappings.Add(new RangeColorMapping { Range = 100, Color = Colors.Purple });           
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
             
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.CustomColors">
            <summary>
            Gets or sets the list of colors for CustomPalette.
            </summary>
            <remarks>
            CustomColors property used to set the colors for CustomPalette. These colors applied on the shapes when ColorPalette set as CustomPalette.        
            </remarks>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";           
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);
                        shapeSetting.ColorPalette = ColorPalettes.CustomPalette;
                        shapeSetting.CustomColors.Add(new MapColorPalette { FillBrush=new SolidColorBrush(Colors.Blue) });
                        shapeSetting.CustomColors.Add(new MapColorPalette { FillBrush = new SolidColorBrush(Colors.Gray) });
                        shapeSetting.CustomColors.Add(new MapColorPalette { FillBrush = new SolidColorBrush(Colors.RoyalBlue });
                        shapeSetting.CustomColors.Add(new MapColorPalette { FillBrush = new SolidColorBrush(Colors.Orchid) });
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = true;
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeFill">
            <summary>
            Gets or sets the fill color for the map shape.
            </summary>
            <remarks>
            ShapeFill property is used to set the fill color for the map shapes.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = false;
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeStroke">
            <summary>
            Gets or sets the border color for the MapShape.
            </summary>
            <remarks>
            ShapeStroke property is set the border color for the map shape.
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);          
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = false;                
                        shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeStrokeThickness">
            <summary>
            Gets or sets border thickness of the map shapes.
            </summary>
            <remarks>
            ShapeStrokeThickness sets the border thickness of the map shapes.
            </remarks>
            <value>
            Type :<see cref="T:System.Double"/>
            </value>
            <example>
            <code languge="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);
                        shapeSetting.ColorPalette = ColorPalettes.CustomPalette;
                        shapeFillSetting.AutoFillColors = false;
                          shapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeValuePath">
            <summary>
            Gets or sets the property name to set the value for the map shape from the under bound object.
            </summary>
            <remarks>
            ShapeValuePath sets the name of the property of the under bound object to set the value for the map shapes.
            </remarks>
            <value>
            Type :<see cref="T:System.String"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                        ViewModel viewModel = new ViewModel();
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";
                        layer.ItemsSource = viewModel.Models;
                        layer.ShapeIDPath = "Country";
                        layer.ShapeIDTableField = "NAME";
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeValuePath = "CurrentTemperature";
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                public class Weather
                {
            
                    public int CurrentTemperature { get; set; }
                    public int AverageHighTemperature { get; set; }
                    public int AverageLowTemperature { get; set; }
                    public string Country { get; set; }
                    public string Continent { get; set; }
                    public string City { get; set; }
                    public string WeatherDescription { get; set; }
                    public int Humidity { get; set; }
                    public string Longitude { get; set; }
                    public string Latitude { get; set; }
            
                    public static List<![CDATA[<Weather>]]> GetWeatherData()
                    {
                        List<![CDATA[<Weather>]]> weatherCollection = new List<![CDATA[<Weather>]]>();
                        weatherCollection.Add(new Weather() { Humidity = 86, CurrentTemperature = 44, AverageHighTemperature = 63, AverageLowTemperature = 46, City = "Chicago", Continent = "North America", Country = "United States", WeatherDescription = "Partly Cloudy", Latitude = "41.8500N", Longitude = "87.6500W" });
                        weatherCollection.Add(new Weather() { Humidity = 94, CurrentTemperature = 77, AverageHighTemperature = 89, AverageLowTemperature = 75, City = "Chennai", Continent = "Asia", Country = "India", WeatherDescription = "Rainy", Latitude = "12.5810N", Longitude = "76.0740E" });
                        weatherCollection.Add(new Weather() { Humidity = 63, CurrentTemperature = 59, AverageHighTemperature = 66, AverageLowTemperature = 45, City = "Beiging", Continent = "Asia", Country = "China", WeatherDescription = "Partly Cloudy", Longitude = "39.9100N", Latitude = "116.4000E" });
                        weatherCollection.Add(new Weather() { Humidity = 60, CurrentTemperature = 70, AverageHighTemperature = 70, AverageLowTemperature = 57, City = "Tokyo", Continent = "Asia", Country = "Japan", WeatherDescription = "Partly Cloudy", Latitude = "35.6833N", Longitude = "139.7667E" });
                        weatherCollection.Add(new Weather() { Humidity = 72, CurrentTemperature = 55, AverageHighTemperature = 47, AverageLowTemperature = 38, City = "Moscow", Continent = "Asia", Country = "Russia", WeatherDescription = "Clear", Latitude = "55.7517N", Longitude = "37.6178E" });
                        weatherCollection.Add(new Weather() { Humidity = 70, CurrentTemperature = 53, AverageHighTemperature = 69, AverageLowTemperature = 54, City = "Cape Town", Continent = "Africa", Country = "South Africa", WeatherDescription = "Partly Cloudy", Latitude = "33.9767S", Longitude = "18.4244E" });
                        weatherCollection.Add(new Weather() { Humidity = 77, CurrentTemperature = 64, AverageHighTemperature = 69, AverageLowTemperature = 56, City = "Anchorage", Continent = "North America", Country = "United States", WeatherDescription = "Mostly Cloudy", Latitude = "61.1919N", Longitude = "149.7621W" });
                        weatherCollection.Add(new Weather() { Humidity = 55, CurrentTemperature = 91, AverageHighTemperature = 95, AverageLowTemperature = 74, City = "Panama", Continent = "South America", Country = "Republic Of  Panama", WeatherDescription = "Fair", Latitude = "8.7515N", Longitude = "79.8772W" });
                        weatherCollection.Add(new Weather() { Humidity = 88, CurrentTemperature = 61, AverageHighTemperature = 76, AverageLowTemperature = 59, City = "Sao Paulo", Continent = "South America", Country = "Brazil", WeatherDescription = "Fair", Latitude = "23.5000S", Longitude = "46.6167W" });
                        weatherCollection.Add(new Weather() { Humidity = 83, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Cairo", Continent = "Africa", Country = "Egypt", WeatherDescription = "Mostly Cloudy", Latitude = "31.2262E", Longitude = "30.0566N" });
                        weatherCollection.Add(new Weather() { Humidity = 78, CurrentTemperature = 70, AverageHighTemperature = 85, AverageLowTemperature = 72, City = "Melbourne", Continent = "Oceania", Country = "Australia", WeatherDescription = "Cloudy", Latitude = "35.0833S", Longitude = "142.0667E" });
                        return weatherCollection;
                    }
                }
                public class ViewModel
                {
                    public List<![CDATA[<Weather>]]> Models
                    {
                        get;
                        set;
                    }
            
                    public ViewModel()
                    {
            
                        this.Models = new List<![CDATA[<Weather>]]>();
                        this.Models = Weather.GetWeatherData();
            
                    }
                }
            
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.SelectedShapeColor">
            <summary>
            Gets or sets the color for selected map shapes in the ShapeFileLayer.
            </summary>
            <remarks>
            SelectedShapeColor sets the color of the SelectedMapShapes of the <see cref="T:Syncfusion.UI.Xaml.Maps.ShapeFileLayer"/>
            </remarks>
            <value>
            Type :<see cref="T:System.Windows.Media.Brush"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();            
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";           
                        ShapeSetting shapeSetting = new ShapeSetting();
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);           
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
                
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.ColorPalette">
            <summary>
            Gets or set ColorPalette for the map shapes.
            </summary>
            <remarks>
            ColorPalette is the set of colors that are applied on the map shapes.There are two build in color palette available.
            <para>Metro and CoolBlue</para>
            </remarks>
            <value>
            Type :<see cref="T:Syncfusion.UI.Xaml.Maps.ColorPalettes"/>
            </value>
            <example>
            <code language="C#">
            using Syncfusion.UI.Xaml.Maps;
            using System;
            using System.Collections.Generic;
            using System.IO;
            using System.Linq;
            using Windows.Foundation;
            using Windows.Foundation.Collections;
            using Windows.UI;
            using Windows.UI.Xaml;
            using Windows.UI.Xaml.Controls;
            using Windows.UI.Xaml.Controls.Primitives;
            using Windows.UI.Xaml.Data;
            using Windows.UI.Xaml.Input;
            using Windows.UI.Xaml.Media;
            using Windows.UI.Xaml.Navigation;
            
            
            namespace MapApp
            {
                public sealed partial class MainPage : Page
                {
                    public MainPage()
                    {
                        this.InitializeComponent();
                        SfMap syncMap = new SfMap();
                       
                        ShapeFileLayer layer = new ShapeFileLayer();
                        layer.Uri = "MapApp.world1.shp";           
                        ShapeSetting shapeSetting = new ShapeSetting();            
                        shapeSetting.ShapeFill = new SolidColorBrush(Colors.Salmon);
                        shapeSetting.ShapeStroke = new SolidColorBrush(Colors.Black);
                        shapeSetting.ShapeStrokeThickness = 2d;
                        shapeSetting.SelectedShapeColor = new SolidColorBrush(Colors.Blue);
                        shapeSetting.ColorPalette = ColorPalettes.Metro;
                        ShapeFillSetting shapeFillSetting = new ShapeFillSetting();
                        shapeFillSetting.AutoFillColors = true;
                        hapeSetting.FillSetting = shapeFillSetting;
                        layer.ShapeSettings = shapeSetting;
                        syncMap.Layers.Add(layer);
            
                    }
            
                }
               
            }
            
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ShapeSetting.ShapeColorValuePath">
            <summary>
            Gets or Sets ShapeColorValuePath for map shapes
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.SubShapeFileLayer">
            <summary>
            Defines SubShapeFileLayer class
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.SubShapeFileLayer.#ctor">
            <summary>
            Constructor for SubShapeFileLayer
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MarginConverter">
            <summary>
            MarginConverter
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomLevelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a  Zoom Value to Zoom Factor.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ZoomLevelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a  Zoom Factor to Zoom Value
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.BooleanToVisibilityConverter">
            <summary>
            Represents the Boolean to visibility converter in map.
            </summary>
            <remarks>
            Convert the given Boolean converter parameter as visibility
            </remarks>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert function,which converts the given Boolean parameter as visibility.
            </summary>
            <param name="value">Value which is bonded</param>
            <param name="targetType">Target type of the binding</param>
            <param name="parameter">Converter Parameter</param>
            <param name="language">
            Language
            </param>
            <returns>
            Type :<see cref="T:System.Object"/>
            </returns>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back function,which converts the given Boolean parameter as visibility.
            </summary>
            <param name="value">Value which is binded</param>
            <param name="targetType">Target type of the binding</param>
            <param name="parameter">Converter Parameter</param>
            <param name="language">
            Language
            </param>
            <returns>
            Type :<see cref="T:System.Object"/>
            </returns>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapViewConverter">
            <summary>
            Converts Mapitem to visible shapes
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.point">
            <summary>
            Gets or sets the polygon points of the tootip pointer.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ValuePathProperty" -->
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ToolTipTemplateProperty">
            <summary>
            Using a DependencyProperty as the backing store for DataTemplate.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.FontFamilyProperty">
            <summary>
            Using a DependencyProperty as the backing store for FontFamily.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.FontSizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for FontSize.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.FontStyleProperty">
            <summary>
            Using a DependencyProperty as the backing store for FontStyle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.PointerLengthProperty">
            <summary>
            Using a DependencyProperty as the backing store for pointer length.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.ToolTipSetting.MarginProperty">
            <summary>
             Using a DependencyProperty as the backing store for margin.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Syncfusion.UI.Xaml.Maps.ToolTipSetting.OnPropertyChanged(System.String)">
            <summary>
            The on property changed event
            </summary>
            <param name="propertyName">The property name</param>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Points">
            <summary>
            Gets or sets the polygon points of the tootip pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ToolTipValue">
            <summary>
            Gets or sets the underlying value of the tapped Shape / Bubble / Marker.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ToolTipData">
            <summary>
            Gets or sets the underlying data of the tapped Shape/Bubble/Marker.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.TooltipType">
            <summary>
            Gets or sets the name of the tapped item to display tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ShowDuration">
            <summary>
            Gets or sets the visible duration of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Foreground">
            <summary>
            Gets or sets the foreground for the tooltip text.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Background">
            <summary>
            Gets or sets the background for the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.StrokeThickness">
            <summary>
            Gets or sets the width of the tooltip outline.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Stroke">
            <summary>
            Gets or sets the stroke for the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ValuePath">
            <summary>
            Gets or sets the path from which to retrieve data for the tooltip.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.ToolTipTemplate" -->
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.FontFamily">
            <summary>
            Gets or sets the font family for the tooltip text.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.FontSize">
            <summary>
            Gets or sets the font size for the tooltip text.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.FontStyle">
            <summary>
            Gets or sets the fontStyle for the tooltip text.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.PointerLength">
            <summary>
            Gets or sets the length of the tooltip pointer.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Margin">
            <summary>
            Gets or sets the margin for the tooltip content.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Data">
            <summary>
            Gets the underlying data of the tapped Shape/Bubble/Marker.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.Value">
            <summary>
            Gets the underlying value of the tapped Shape / Bubble / Marker.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.ToolTipSetting.PolygonPoints">
            <summary>
            Gets the polygon points of the tooltip pointer.
            </summary>
        </member>
        <member name="E:Syncfusion.UI.Xaml.Maps.ToolTipSetting.PropertyChanged">
            <summary>
            The property changed event
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.MapsDictionaries">
            <summary>
            Holds the instance of the resources.
            </summary>
        </member>
        <member name="F:Syncfusion.UI.Xaml.Maps.NavigationControl.NavigationControlPositionProperty">
            <summary>
            Using a DependencyProperty as the backing store for NavigationControlPosition.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Syncfusion.SfMapBaseAssembly">
            <summary>
            SharedBase assembly class.
            </summary>
        </member>
        <member name="F:Syncfusion.SfMapBaseAssembly.Name">
            <summary>
            Name of the assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.SfMapBaseAssembly.Assembly">
            <summary>
            Defines assembly object reference variable.
            </summary>
        </member>
        <member name="F:Syncfusion.SfMapBaseAssembly.RootNamespace">
            <summary>
            Root namespace of the assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.SfMapBaseAssembly.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.SfMapBaseAssembly"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SfMapBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            Assemblies the resolver.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns>Assembly object.</returns>
        </member>
        <member name="T:Syncfusion.AssemblyInfo">
            <summary>
            Assembly info class
            </summary>
        </member>
        <member name="T:Syncfusion.Licensing.EnvironmentTestNotification">
            <summary>
            Checking whether partial trust allowed or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.EnvironmentTestNotification.ValidateLicense(System.Type)">
            <summary>
            Validates the license.
            </summary>
            <param name="controltype">The control type.</param>
        </member>
        <member name="M:Syncfusion.Licensing.EnvironmentTestNotification.StartValidateLicense(System.Type)">
            <summary>
            Starts the validate license.
            </summary>
            <param name="controltype">The controltype.</param>
        </member>
        <member name="P:Syncfusion.Licensing.EnvironmentTestNotification.IsSecurityGranted">
            <summary>
            Gets a value indicating whether security permission can be granted. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.UI.Xaml.Maps.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.UI.Xaml.Maps.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
